<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <title>Planet Python</title>
  <link media="screen" href="http://legacy.python.org/styles/screen-switcher-default.css"
     type="text/css" id="screen-switcher-stylesheet" rel="stylesheet" />
  <link rel="stylesheet" type="text/css" media="sc&#82;een" href="http://legacy.python.org/styles/netscape4.css" />
  <link rel="stylesheet" type="text/css" media="print" href="http://legacy.python.org/styles/print.css" />
  <link rel="alternate stylesheet" type="text/css" media="screen" href="http://legacy.python.org/styles/largestyles.css" title="large text" />
  <link media="screen" href="/styles/defaultfonts.css" type="text/css"
      rel="alternate stylesheet" title="default fonts" />
  <script src="/js/iotbs2-key-directors-load.js" type="text/javascript"></script>
  <script src="/js/iotbs2-directors.js" type="text/javascript"></script>
  <script src="/js/iotbs2-core.js" type="text/javascript"></script>
  <meta name="generator" content="Planet/2.0 +http://www.planetplanet.org" />
  <meta name="keywords"
     content="Python weblog blog blogs blogger weblogger aggregator rss" />
  <meta name="description" content="Recent postings from Python-related blogs." />
  <link rel="alternate" type="application/rss+xml" title="RSS"
     href="rss20.xml" />
  <style>
    /* Make images responsive */
    img {
        border: 0;
        height: auto;
        max-width: 100%;
        display: block;
        padding-top: 5px;
        padding-bottom: 35px;
    }
  </style>
</head>

<body>
  <!-- Logo -->
  <h1 id="logoheader">
    <a href="/" id="logolink" accesskey="1"><img id="logo"
src="http://legacy.python.org/images/python-logo.gif" alt="homepage" border="0" /></a>
  </h1>
  <!-- Skip to Navigation -->
  <div class="skiptonav"><a href="#left-hand-navigation" accesskey="2"><img src="http://legacy.python.org/images/trans.gif" id="skiptonav" alt="skip to navigation" border="0" /></a></div>
  <div class="skiptonav"><a href="#content-body" accesskey="3"><img src="http://legacy.python.org/images/trans.gif" id="skiptocontent" alt="skip to content" border="0" /></a></div>

  <div id="content-body">
    <div id="body-main">

<h1 class="pageheading">Planet Python</h1>

<p>Last update: March 22, 2017 01:47 AM





<h2>March 21, 2017</h2>




<hr /><h3 class="post"><a href="https://www.djangoproject.com/weblog/" title="The Django weblog">Django Weblog</a></h3>


<h4><a href="https://www.djangoproject.com/weblog/2017/mar/21/django-111-rc-1-released/">Django 1.11 release candidate 1 released</a></h4>
<p>
<p>Django 1.11 release candidate 1 is the final opportunity for you to try out the <a class="reference external" href="https://docs.djangoproject.com/en/dev/releases/1.11/">medley of new
features</a> before Django 1.11 is released.</p>
<p>The release candidate stage marks the string freeze and the call for translators <a class="reference external" href="https://docs.djangoproject.com/en/dev/internals/contributing/localizing/#translations">to submit translations</a>. Provided no major bugs are discovered that can't be solved in the next two weeks, 1.11 final will be issued on or around April 4. Any delays will be communicated on the <a class="reference external" href="https://groups.google.com/d/topic/django-developers/nWk5Hoi6X6M/discussion">django-developers mailing list thread</a>.</p>
<p>Please use this opportunity to help find and fix bugs (which should be reported
to <a class="reference external" href="https://code.djangoproject.com/newticket">the issue tracker</a>). You can grab a copy of the package from
<a class="reference external" href="https://www.djangoproject.com/download/">our downloads page</a> or on PyPI.</p>
<p>The PGP key ID used for this release is Tim Graham: 1E8ABDC773EDE252.</p></p>
<p>
<em><a href="https://www.djangoproject.com/weblog/2017/mar/21/django-111-rc-1-released/">March 21, 2017 11:03 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.datacamp.com/community/blog" title="DataCamp Blog">DataCamp</a></h3>


<h4><a href="http://www.datacamp.com/community/blog/pyspark-cheat-sheet-python">PySpark Cheat Sheet: Spark in Python</a></h4>
<p>
<p>Apache Spark is generally known as a fast, general and open-source engine for big data processing, with built-in modules for streaming, SQL, machine learning and graph processing. It allows you to speed analytic applications up to 100 times faster compared to technologies on the market today. You can interface Spark with Python through "PySpark". This is the Spark Python API exposes the Spark programming model to Python. </p>

<p>Even though working with Spark will remind you in many ways of working with <a href="https://www.datacamp.com/community/tutorials/pandas-tutorial-dataframe-python">Pandas DataFrames</a>, you'll also see that it can be tough getting familiar with all the functions that you can use to query, transform, inspect, ... your data. What's more, if you've never worked with any other programming language or if you're new to the field, it might be hard to distinguish between functions.</p>

<p>Let's face it, <tt>map()</tt> and <tt>flatMap()</tt> are different enough, but it might still come as a challenge to decide which one you really need when you're faced with them in your analysis. Or what about other functions, like <tt>reduce()</tt> and <tt>reduceByKey()</tt>? </p>

<p><a href="https://s3.amazonaws.com/assets.datacamp.com/blog_assets/PySpark_Cheat_Sheet_Python.pdf" target="_blank"><img alt="PySpark cheat sheet" src="http://community.datacamp.com.s3.amazonaws.com/community/production/ckeditor_assets/pictures/441/content_content_button-cheatsheet-pyspark.png" /></a></p>

<p>Even though the <a href="http://spark.apache.org/docs/latest/api/python/">documentation</a> is very elaborate, it never hurts to have a cheat sheet by your side, especially when you're just getting into it.</p>

<p>This PySpark cheat sheet covers the basics, from initializing Spark and loading your data, to retrieving RDD information, sorting, filtering and sampling your data. But that's not all. You'll also see that topics such as repartitioning, iterating, merging, saving your data and stopping the SparkContext are included in the cheat sheet. </p>

<p><strong>Note</strong> that the examples in the document take small data sets to illustrate the effect of specific functions on your data. In real life data analysis, you'll be using Spark to analyze big data.</p>

<p>Are you hungry for more? Don't miss our other Python cheat sheets for data science that cover topics such as <a href="https://www.datacamp.com/community/tutorials/python-data-science-cheat-sheet-basics">Python basics</a>, <a href="https://www.datacamp.com/community/blog/python-numpy-cheat-sheet">Numpy</a>, <a href="https://www.datacamp.com/community/blog/python-pandas-cheat-sheet">Pandas</a>, <a href="https://www.datacamp.com/community/blog/pandas-cheat-sheet-python">Pandas Data Wrangling</a> and much more! </p></p>
<p>
<em><a href="http://www.datacamp.com/community/blog/pyspark-cheat-sheet-python">March 21, 2017 02:54 PM</a></em>
</p>









<hr /><h3 class="post"><a href="https://blog.jetbrains.com/pycharm" title="PyCharm Blog">PyCharm</a></h3>


<h4><a href="http://feedproxy.google.com/~r/Pycharm/~3/p_o0EkfK9Es/">Inside the Debugger: Interview with Elizaveta Shashkova</a></h4>
<p>
<p>PyCharm 2017.1 has several notable improvements, but there’s one that’s particularly fun to talk about: debugger speedups. PyCharm’s visual debugger regularly gets top billing as a feature our customer value the highest. Over the last year, the debugger saw a number of feature improvements and several very impressive speedups. In particular, for Python 3.6 projects, PyCharm can use a new Python API to close the gap with a non-debug run configuration.</p>
<p><a href="https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2017/03/pycharm_webinar_inside_the_debugger.png" rel="attachment wp-att-4336"><img class="alignnone size-full wp-image-4336" src="https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2017/03/pycharm_webinar_inside_the_debugger.png" alt="pycharm_webinar_inside_the_debugger" width="1921" height="1080" /></a></p>
<p>If you’ve been to PyCon or EuroPython and come by our booth, chances are you’ve seen Elizaveta Shashkova talking about the debugger to a PyCharm user, or giving a conference talk. Let’s talk to Liza about her work on PyCharm, the debugger, and her upcoming talk at PyCon.</p>
<h2>Can you share with us a bit of your background and what you do on the PyCharm development team?</h2>
<p>I started my career at JetBrains as a Summer Intern two and half years ago &#8211; I implemented a debugger for Jinja2 templates and Dmitry Trofimov (the creator of the PyCharm’s debugger) was my mentor. After that, I joined the PyCharm Team as a Junior developer and implemented a Thread Concurrency Visualizer under the supervision of Andrey Vlasovskikh, and my graduation thesis was based on it.</p>
<p>At the moment I’m supporting the Debugger and the Console in PyCharm.</p>
<h2>People really like PyCharm’s debugger. Can you describe how it works, behind the scenes?</h2>
<p>The debugger consists of two main parts: the UI (written in Java and Kotlin) and the Python debugger (written in Python). The most interesting part is on the Python side &#8211; the pydevd module, which we share with PyDev (the Python plugin for Eclipse).</p>
<p>We don’t use the pdb standard debugger for Python, but we implement our own debugger. At first glance, it’s quite simple, because it’s based on the standard sys.settrace() function, and in fact it just handles events which the Python interpreter produces for every line in the running script.</p>
<p>Of course, there are a lot of interesting frameworks or Python modules, where debugging doesn’t work by default, that’s why we add special support inside the debugger: for PyQt threads, for interactive mode in pyplot, for creation new processes, for debugging in Docker and others.</p>
<p><em>Note: A year ago <a href="https://blog.jetbrains.com/pycharm/2016/05/debugger-interview-with-pydev-and-pycharm/">we did an interview with the creator of PyDev</a> about the funded debugger speedups.</em></p>
<h2>The Cython extensions gave a big speedup. Can you explain how it works and the performance benefit?</h2>
<p>Yes, Cython speedups were implemented by Fabio Zadrozny and they gave a 40% speed improvement for the debugger. Fabio found the most significant debugger bottlenecks and optimized them. Some of them were rewritten in Cython and it gave even more &#8211; a 140% speed improvement. Fabio has done a really great job!</p>
<h2>On to new stuff. The upcoming PyCharm, paired with Python 3.6, gives some more debugger speedups, right?</h2>
<p>Yes, as I’ve already mentioned, for Python interpreters before version 3.6 we used to use the standard Python tracing function. But in Python 3.6 <a href="https://www.python.org/dev/peps/pep-0523/">the new frame evaluation API</a> was introduced and it gave us a great opportunity to avoid using tracing functions and instead implement a new mechanism for debugging.</p>
<p>And it gave us a really significant performance improvement, for example, in some cases the debugger has become 80 times faster than it used to be, and it has become at least 10 times faster in the worst case. In some partial cases, it has become almost as fast as running without debugging.</p>
<p>We have so many users’ reports about debugger’s slowness, and now I hope they will be happy to try the new fast version of the debugger. Unfortunately, it’s available for Python 3.6 only.</p>
<h2>What changed in Python 3.6 to allow this?</h2>
<p>The new frame evaluation API was introduced to CPython in PEP 523 and it allows to specify a per-interpreter function pointer to handle the evaluation of frames.</p>
<p>In other words, it means that we can get access to the code when entering a new frame, but before the execution of this frame has started. And this means that we can modify the frame’s code and introduce our breakpoints right into bytecode: execution of the frame hasn’t started yet so we won’t break anything.</p>
<p>When we used the tracing function, the idea was similar: when entering a new frame we checked if there are any breakpoints in the current frame and, if they exist, continue tracing for every line in the frame. And sometimes it led to the serious performance problems.</p>
<p>But in the new frame evaluation debugger, this problem was solved: we just introduce the breakpoint into the code and the other lines in the scope don’t matter. Instead of adding an additional call to the tracing function for every line in the frame, with Python 3.6 we add just one call to “breakpoint”, and that means that the script under debugging runs almost as fast as without the debugger.</p>
<h2>Congratulations on your Python 3.6 Debugging talk being accepted for PyCon. Who will be interested in your talk?</h2>
<p>This talk will be interesting for people who want to learn something new about the features of Python 3.6. Also, it will be useful for people who want to learn yet another reason to move to the Python 3.6: a fast debugger, which should appear in many Python IDEs.</p>
<p>Moreover, after the talk people will understand, how the PyCharm’s debugger works, and why such fast debugging wasn’t possible in the previous versions of Python.<br />
This talk is for experienced Python developers, who aren’t afraid of calling Python’s C API functions and doing bytecode modifications. <img src="https://d3nmt5vlzunoa1.cloudfront.net/pycharm/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" /></p>
<h2>What is the next big thing in debugging to work on in the next year?</h2>
<p>We have <a href="https://youtrack.jetbrains.com/issue/PY-12987">a rather old and important problem in the debugger</a> related to the evaluation and showing big objects in the debugger. This problem has existed from the beginning, but it has become really important during the last few years. I believe it gained visibility due to the increased number of scientists who use PyCharm and work with big data frames. At the moment we have some technical restrictions for implementing this feature, but we’re going to implement it in the near future.</p>
<img src="http://feeds.feedburner.com/~r/Pycharm/~4/p_o0EkfK9Es" height="1" width="1" alt="" /></p>
<p>
<em><a href="http://feedproxy.google.com/~r/Pycharm/~3/p_o0EkfK9Es/">March 21, 2017 12:30 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.pythondoeswhat.com/" title="Python Does What?!?">Python Does What?!</a></h3>


<h4><a href="http://www.pythondoeswhat.com/2017/03/when-you-can-update-locals.html">When you can update locals()</a></h4>
<p>
<span>There are two built-in functions, globals and locals. &nbsp;These return dicts of the contents of the global and local scope.</span><br /><span><br /></span><span>Locals usually refers to the contents of a function, in which case it is a one-time copy. &nbsp;Updates to the dict do not change the local scope:</span><br /><span><br /></span><span>&gt;&gt;&gt; def local_fail():</span><br /><span>... &nbsp; &nbsp;a = 1</span><br /><span>... &nbsp; &nbsp;locals()['a'] = 2</span><br /><span>... &nbsp; &nbsp;print 'a is', a</span><br /><span>...&nbsp;</span><br /><span>&gt;&gt;&gt; local_fail()</span><br /><span>a is 1</span><br /><span><br /></span><span>However, in the body of a class definition, locals points to the __dict__ of the class, which is mutable.</span><br /><span><br /></span><span>&gt;&gt;&gt; class Success(object):</span><br /><span>... &nbsp; &nbsp;locals().update({'a': 1})</span><br /><span>...&nbsp;</span><br /><span>&gt;&gt;&gt; Success.a</span><br /><span>1</span></p>
<p>
<em><a href="http://www.pythondoeswhat.com/2017/03/when-you-can-update-locals.html">March 21, 2017 11:46 AM</a></em>
</p>









<hr /><h3 class="post"><a href="https://simpleisbetterthancomplex.com/" title="Simple is Better Than Complex">Simple is Better Than Complex</a></h3>


<h4><a href="https://simpleisbetterthancomplex.com/article/2017/03/21/class-based-views-vs-function-based-views.html">Class-Based Views vs. Function-Based Views</a></h4>
<p>
<p>If you follow my content here in the blog, you probably have already noticed that I’m a big fan of function-based
views. Quite often I use them in my examples. I get asked a lot why I don’t use class-based views more frequently.
So I thought about sharing my thoughts about that subject matter.</p>

<p>Before reading, keep that in mind: <em>class-based views does not replace function-based views.</em></p>

<hr />

<h4 id="introduction">Introduction</h4>

<p>I’m not an old school Django developer that used it when there was only function-based views and watched the
class-based views been released. But, there was a time that only function-based views existed.</p>

<p>I guess it didn’t take long until all sort of hacks and solutions was created to extend and reuse views, make them more
generic.</p>

<p>There was a time that <em>function-based generic views</em> was a thing. They were created to address the common use cases. But
the problem was that they were quite simple, and was very hard to extend or customize them (other than using
configurations parameters).</p>

<p>To address those issues, the class-based views was created.</p>

<p>Now, views are always functions. Even class-based views.</p>

<p>When we add them to the URL conf using the <code class="highlighter-rouge">View.as_view()</code> class method, it returns a function.</p>

<p>Here is what the <code class="highlighter-rouge">as_view</code> method looks like:</p>

<pre><code class="language-python"><span class="k">class</span> <span class="nc">View</span><span class="p">:</span>
    <span class="nd">@classonlymethod</span>
    <span class="k">def</span> <span class="nf">as_view</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">**</span><span class="n">initkwargs</span><span class="p">):</span>
        <span class="s">"""Main entry point for a request-response process."""</span>
        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">initkwargs</span><span class="p">:</span>
            <span class="c"># Code omitted for clarity</span>
            <span class="c"># ...</span>

        <span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
            <span class="bp">self</span> <span class="o">=</span> <span class="n">cls</span><span class="p">(</span><span class="o">**</span><span class="n">initkwargs</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">'get'</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">'head'</span><span class="p">):</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">request</span> <span class="o">=</span> <span class="n">request</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">args</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">kwargs</span> <span class="o">=</span> <span class="n">kwargs</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

        <span class="c"># Code omitted for clarity</span>
        <span class="c"># ...</span>

        <span class="k">return</span> <span class="n">view</span></code></pre>

<p>Parts of the code was omitted for clarity, you can see the full method on
<a href="https://github.com/django/django/blob/1.10.6/django/views/generic/base.py#L46" target="_blank">GitHub</a>.</p>

<p>So if you want to explicitly call a class-based view here is what you need to do:</p>

<pre><code class="language-python"><span class="k">return</span> <span class="n">MyView</span><span class="o">.</span><span class="n">as_view</span><span class="p">()(</span><span class="n">request</span><span class="p">)</span></code></pre>

<p>To make it feel more natural, you can assign it to a variable:</p>

<pre><code class="language-python"><span class="n">view_function</span> <span class="o">=</span> <span class="n">MyView</span><span class="o">.</span><span class="n">as_view</span><span class="p">()</span>
<span class="k">return</span> <span class="n">view_function</span><span class="p">(</span><span class="n">request</span><span class="p">)</span></code></pre>

<p>The view function returned by the <code class="highlighter-rouge">as_view()</code> method is outer part of every class-based view. After called, the view
pass the request to the <code class="highlighter-rouge">dispatch()</code> method, which will execute the appropriate method accordingly to the request
type (<strong>GET</strong>, <strong>POST</strong>, <strong>PUT</strong>, etc).</p>

<h5 id="class-based-view-example">Class-Based View Example</h5>

<p>For example, if you created a view extending the <code class="highlighter-rouge">django.views.View</code> base class, the <code class="highlighter-rouge">dispatch()</code> method will  handle
the HTTP method logic. If the request is a <strong>POST</strong>, it will execute the <code class="highlighter-rouge">post()</code> method inside the view, if
the request is a <strong>GET</strong>, it will execute the <code class="highlighter-rouge">get()</code> method inside the view.</p>

<p><strong>views.py</strong></p>

<pre><code class="language-python"><span class="kn">from</span> <span class="nn">django.views</span> <span class="kn">import</span> <span class="n">View</span>

<span class="k">class</span> <span class="nc">ContactView</span><span class="p">(</span><span class="n">View</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="c"># Code block for GET request</span>

    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="c"># Code block for POST request</span></code></pre>

<p><strong>urls.py</strong></p>

<pre><code class="language-python"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'contact/$'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">ContactView</span><span class="o">.</span><span class="n">as_view</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="s">'contact'</span><span class="p">),</span>
<span class="p">]</span></code></pre>

<h5 id="function-based-view-example">Function-Based View Example</h5>

<p>In function-based views, this logic is handled with if statements:</p>

<p><strong>views.py</strong></p>

<pre><code class="language-python"><span class="k">def</span> <span class="nf">contact</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="c"># Code block for POST request</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c"># Code block for GET request (will also match PUT, HEAD, DELETE, etc)</span></code></pre>

<p><strong>urls.py</strong></p>

<pre><code class="language-python"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'contact/$'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">contact</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'contact'</span><span class="p">),</span>
<span class="p">]</span></code></pre>

<p>Those are the main differences between function-based views and class-based views. Now, Django’s <em>generic class-based
views</em> are a different story.</p>

<hr />

<h4 id="generic-class-based-views">Generic Class-Based Views</h4>

<p>The generic class-based-views was introduced to address the common use cases in a Web application, such as creating
new objects, form handling, list views, pagination, archive views and so on.</p>

<p>They come in the Django core, and you can implement them from the module <code class="highlighter-rouge">django.views.generic</code>.</p>

<p>They are great and can speed up the development process.</p>

<p>Here is an overview of the available views:</p>

<h5 id="simple-generic-views">Simple Generic Views</h5>

<ul>
  <li>View</li>
  <li>TemplateView</li>
  <li>RedirectView</li>
</ul>

<h5 id="detail-views">Detail Views</h5>

<ul>
  <li>DetailView</li>
</ul>

<h5 id="list-views">List Views</h5>

<ul>
  <li>ListView</li>
</ul>

<h5 id="editing-views">Editing Views</h5>

<ul>
  <li>FormView</li>
  <li>CreateView</li>
  <li>UpdateView</li>
  <li>DeleteView</li>
</ul>

<h5 id="date-based-views">Date-Based Views</h5>

<ul>
  <li>ArchiveIndexView</li>
  <li>YearArchiveView</li>
  <li>MonthArchiveView</li>
  <li>WeekArchiveView</li>
  <li>DayArchiveView</li>
  <li>TodayArchiveView</li>
  <li>DateDetailView</li>
</ul>

<p>You can find more details about each implementation in the official docs:
<a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/" target="_blank">Built-in class-based views API</a>.</p>

<p>I find it a little bit confusing, because the generic implementations uses a lot of mixins, so at least for me,
sometimes the code flow is not very obvious.</p>

<p>Now here is a great resource, also from the Django Documentation, a flattened index with all the attributes and methods from
each view: <a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/flattened-index/" target="_blank">Class-based generic views - flattened index</a>.
I keep this one in my bookmarks.</p>

<hr />

<h4 id="the-different-django-views-schools">The Different Django Views Schools</h4>

<p>Last year I got myself a copy of the
<a target="_blank" href="http://sibt.co/2scoops18" title="See on Amazon.com" rel="nofollow">Two Scoops of Django: Best Practices for Django 1.8</a>
<img src="https://ir-na.amazon-adsystem.com/e/ir?t=vitorfs0b-20&l=am2&o=1&a=0981467342" width="1" height="1" border="0" alt="Amazon AdSystem" />
book. It’s a great book. Each chapter is self-contained, so you don’t need to read the whole book in order.</p>

<p>In the chapter 10, <a href="https://twitter.com/pydanny" target="_blank">Daniel</a> and
<a href="https://twitter.com/audreyr" target="_blank">Audrey</a> talk about the best practices for class-based views. They
brought up this tip that was very interesting to read, so I thought about sharing it with you:</p>

<blockquote>
  <p><strong>School of “Use all the generic views”!</strong><br />
This school of thought is based on the idea that since Django provides functionality to reduce your workload, why not
use that functionality? We tend to belong to this school of thought, and have used it to great success, rapidly
building and then maintaining a number of projects.</p>

  <p><strong>School of “Just use django.views.generic.View”</strong><br />
This school of thought is based on the idea that the base Django CBV does just enough and is ‘the True CBV, everything
else is a Generic CBV’. In the past year, we’ve found this can be a really useful approach for tricky tasks for which
the resource-based approach of “Use all the views” breaks down. We’ll cover some use cases for it in this chapter.</p>

  <p><strong>School of “Avoid them unless you’re actually subclassing views”</strong><br />
Jacob Kaplan-Moss says, “My general advice is to start with function views since they’re easier to read and
understand, and only use CBVs where you need them. Where do you need them? Any place where you need a fair chunk of
code to be reused among multiple views.”</p>

  <p><em><small>Excerpt from <a href="http://sibt.co/2scoops18" target="_blank" title="See on Amazon.com" rel="nofollow">“Two Scoops of Django: Best Practices for Django 1.8”</a> - 10.4: General Tips for Django CBV, page 121.</small></em></p>
</blockquote>

<p>The authors said in the book they are in the first school. Personally, I’m in the third school. But as they said, there
is no consensus on best practices.</p>

<hr />

<h4 id="pros-and-cons">Pros and Cons</h4>

<p>For reference, some pros and cons about function-based views and class-based views.</p>

<table>
  <thead>
    <tr>
      <th></th>
      <th>Pros</th>
      <th>Cons</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Function-Based Views</td>
      <td>
        <ul>
          <li>Simple to implement</li>
          <li>Easy to read</li>
          <li>Explicit code flow</li>
          <li>Straightforward usage of decorators</li>
        </ul>
      </td>
      <td>
        <ul>
          <li>Hard to extend and reuse the code</li>
          <li>Handling of HTTP methods via conditional branching</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td>Class-Based Views</td>
      <td>
        <ul>
          <li>Can be easily extended, reuse code</li>
          <li>Can use O.O techniques such as mixins (multiple inheritance)</li>
          <li>Handling of HTTP methods by separate class methods</li>
          <li>Built-in generic class-based views</li>
        </ul>
      </td>
      <td>
        <ul>
          <li>Harder to read</li>
          <li>Implicit code flow</li>
          <li>Hidden code in parent classes, mixins</li>
          <li>Use of view decorators require extra import, or method override</li>
        </ul>
      </td>
    </tr>
  </tbody>
</table>

<p>There is no right or wrong. It all depends on the context and the needs. As I mentioned in the beginning of this post,
class-based views does not replace function-based views. There are cases where function-based views are better. In
other cases class-based views are better.</p>

<p>For example, if you are implementing a list view, and you can get it working just by subclassing the <code class="highlighter-rouge">ListView</code> and
overriding the attributes. Great. Go for it.</p>

<p>Now, if you are performing a more complex operation, handling multiple forms at once, a function-based view will serve
you better.</p>

<hr />

<h4 id="conclusions">Conclusions</h4>

<p>The reason why I use function-based views often in my post examples, is because they are way easier to read. Many
readers that stumble upon my blog are beginners, just getting started. Function-based views communicate better, as the
code flow is explicit.</p>

<p>I usually always start my views as function-based views. If I can use a generic class-based view just by overriding
the attributes, I go for it. If I have some very specific needs, and it will replicate across several views, I create
my own custom generic view subclassing the <code class="highlighter-rouge">django.views.generic.View</code>.</p>

<p>Now a general advice from the Django documentation: <em>If you find you’re struggling to implement your view as a subclass
of a generic view, then you may find it more effective to write just the code you need, using your own class-based or
functional views.</em></p></p>
<p>
<em><a href="https://simpleisbetterthancomplex.com/article/2017/03/21/class-based-views-vs-function-based-views.html">March 21, 2017 11:28 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://morepypy.blogspot.com/" title="PyPy Status Blog">PyPy Development</a></h3>


<h4><a href="http://feedproxy.google.com/~r/PyPyStatusBlog/~3/_ovYu1Pkj00/pypy27-and-pypy35-v57-two-in-one-release.html">PyPy2.7 and PyPy3.5 v5.7 - two in one release</a></h4>
<p>
<div dir="ltr">
<div>
The PyPy team is proud to release both PyPy2.7 v5.7 (an interpreter supporting
Python v2.7 syntax), and a beta-quality PyPy3.5 v5.7 (an interpreter for Python
v3.5 syntax). The two releases are both based on much the same codebase, thus
the dual release.  Note that PyPy3.5 only supports Linux 64bit for now.<br />
<br />
This new PyPy2.7 release includes the upstream stdlib version 2.7.13, and PyPy3.5 (our first in the 3.5 series) includes the upstream stdlib version 3.5.3.<br />
<br />
We continue to make incremental improvements to our C-API compatibility layer (cpyext). PyPy2 can now import and run many C-extension packages, among the most notable are Numpy, Cython, and Pandas. Performance may be slower than CPython, especially for frequently-called short C functions. Please let us know if your use case is slow, we have ideas how to make things faster but need real-world examples (not micro-benchmarks) of problematic code.<br />
<br />
Work proceeds at a good pace on the PyPy3.5 version due to a <a class="reference external" href="https://morepypy.blogspot.com/2016/08/pypy-gets-funding-from-mozilla-for.html">grant</a> from the Mozilla Foundation, hence our first 3.5.3 beta release. Thanks Mozilla !!! While we do not pass all tests yet, asyncio works and as <a class="reference external" href="https://morepypy.blogspot.com/2017/03/async-http-benchmarks-on-pypy3.html">these benchmarks show</a> it already gives a nice speed bump. We also backported the <code class="docutils literal"><span class="pre">f""</span></code> formatting from 3.6 (as an exception; otherwise “PyPy3.5” supports the Python 3.5 language).<br />
<br />
<a class="reference external" href="https://cffi.readthedocs.io/en/latest/whatsnew.html">CFFI</a> has been updated to 1.10, improving an already great package for interfacing with C.<br />
<br />
We now use shadowstack as our default <a class="reference external" href="http://doc.pypy.org/en/latest/config/translation.gcrootfinder.html">gcrootfinder</a> even on Linux. The alternative, asmgcc, will be deprecated at some future point. While about 3% slower, shadowstack is much more easily maintained and debuggable. Also, the performance of shadowstack has been improved in general: this should close the speed gap between other platforms and Linux.<br />
<br />
As always, this release fixed many issues and bugs raised by the growing community of PyPy users. We strongly recommend updating.<br />
<br />
You can download the v5.7 release here:<br />
<blockquote>
<div>
<a class="reference external" href="http://pypy.org/download.html">http://pypy.org/download.html</a></div>
</blockquote>
We would like to thank our donors for the continued support of the PyPy project.<br />
We would also like to thank our contributors and encourage new people to join the project. PyPy has many layers and we need help with all of them: <a class="reference external" href="http://doc.pypy.org/en/latest/index.html">PyPy</a> and <a class="reference external" href="https://rpython.readthedocs.org/">RPython</a> documentation improvements, tweaking popular <a class="reference external" href="http://doc.pypy.org/en/latest/project-ideas.html#make-more-python-modules-pypy-friendly">modules</a> to run on pypy, or general <a class="reference external" href="http://doc.pypy.org/en/latest/project-ideas.html">help</a> with making RPython’s JIT even better.<br />
<div class="section" id="what-is-pypy">
<h2>
&nbsp;</h2>
<h2>
What is PyPy?</h2>
PyPy is a very compliant Python interpreter, almost a drop-in replacement for CPython 2.7 and CPython 3.5. It’s fast (<a class="reference external" href="http://speed.pypy.org/">PyPy and CPython 2.7.x</a> performance comparison) due to its integrated tracing JIT compiler.<br />
We also welcome developers of other <a class="reference external" href="http://rpython.readthedocs.io/en/latest/examples.html">dynamic languages</a> to see what RPython can do for them.<br />
The PyPy 2.7 release supports:<br />
<blockquote>
<div>
<ul class="simple">
<li><b>x86</b> machines on most common operating systems (Linux 32/64 bits, Mac OS X 64 bits, Windows 32 bits, OpenBSD, FreeBSD)</li>
<li>newer <b>ARM</b> hardware (ARMv6 or ARMv7, with VFPv3) running Linux,</li>
<li>big- and little-endian variants of <b>PPC64</b> running Linux,</li>
<li><b>s390x</b> running Linux</li>
</ul>
</div>
</blockquote>
<br />
<h2>
&nbsp;</h2>
<h2>
What else is new?</h2>
<div>
(since the releases of PyPy 2.7 and 3.3 at the end of 2016)</div>
<div>
There are many incremental improvements to RPython and PyPy, the complete listing is <a href="http://doc.pypy.org/en/latest/release-v5.7.0.html">here.</a></div>
<div>
&nbsp; </div>
Please update, and continue to help us make PyPy better.<br />
<br />
Cheers, The PyPy team<br />
<br /></div>
</div>
</div>
<img src="http://feeds.feedburner.com/~r/PyPyStatusBlog/~4/_ovYu1Pkj00" height="1" width="1" alt="" /></p>
<p>
<em><a href="http://feedproxy.google.com/~r/PyPyStatusBlog/~3/_ovYu1Pkj00/pypy27-and-pypy35-v57-two-in-one-release.html">March 21, 2017 10:18 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://djangoweekly.com/blog/feed/" title="DjangoWeekly Blog">Django Weekly</a></h3>


<h4><a href="http://djangoweekly.com/blog/post/django-weekly-issue-30-drf-36-released-generic-relations-and-more">Django Weekly Issue 30 - DRF 3.6 Released, Generic Relations and more</a></h4>
<p>
<table><tbody><tr><td class="container-padding content" align="left"><div class="title">Worthy Read</div><br /><div class="subtitle"><a href="http://www.django-rest-framework.org/topics/3.6-announcement/" target="_blank">Django REST framework 3.6 Released</a></div><div class="body-text">The 3.6 release adds two major new features to REST framework. Built-in interactive API documentation support. A new JavaScript client library. <br /> <em><div class="body-text">django rest framework</div></em></div><br /><div class="subtitle"><a href="http://4url.in/nKOqq2Oe/" target="_blank">Manual Kinks in your CI/CD Pipeline?</a></div><div class="body-text">See The 3 Use Cases of How Our DevOp Teams Automate Development <br /> <em><div class="body-text">sponsor</div></em></div><br /><div class="subtitle"><a href="http://reinout.vanrees.org/weblog/2017/03/08/logging-verbosity-managment-commands.html" target="_blank">Logging verbosity in django management commands</a></div><div class="body-text">Making using of django's --verbosity command line argument. <br /> <em><div class="body-text">verbosity</div></em></div><br /><div class="subtitle"><a href="https://medium.com/@samuh/using-jinja2-with-django-1-8-onwards-9c58fe1204dc" target="_blank">Using Jinja2 with Django (1.8 onwards)</a></div><div class="body-text">I have been using Jinja2 previously in my projects created with Flask. Recently however I wanted to use Jinja2 with Django for its potential performance boost (10 to 20 times faster compared to Django templates according to this) and interoperability with Nunjucks. <br /> <em><div class="body-text">django</div>,</em> <em><div class="body-text">jinja2</div></em></div><br /><div class="subtitle"><a href="https://medium.com/@ajrbyers/django-fk-on-delete-defaults-to-cascade-1c1506aae7c7" target="_blank">Django FK on_delete defaults to CASCADE</a></div><div class="body-text"><em><div class="body-text">SQL</div>,</em> <em><div class="body-text">orm</div></em></div><br /><div class="subtitle"><a href="https://medium.com/@viewflow/redesigning-an-autocomplete-for-django-1994fd07c0a6" target="_blank">Redesigning an autocomplete for Django</a></div><div class="body-text"><em><div class="body-text">autocomplete</div>,</em> <em><div class="body-text">ajax</div></em></div><br /><div class="subtitle"><a href="https://medium.com/cravedev/how-we-used-generic-relations-to-add-comments-to-model-instances-b48c2509dc27" target="_blank">How we used generic relations to add comments to model instances?</a></div><div class="body-text">As I talked to some people, few new about Django’s Generic Relation and Generic Foreign Key. And when I was studying it to apply on our system, I realised that the documentation can be kind of tricky and sparse. Nevertheless, Generic Relations helped us a lot, and so I decided to write about it in this blog post. <br /> <em><div class="body-text">orm</div>,</em> <em><div class="body-text">generic</div></em></div><br /><div class="subtitle"><a href="http://4url.in/ljPeroOZ/" target="_blank">Find Top Developers Fast. The search is over.</a></div><div class="body-text">Let Toptal connect you with the world's most talented developers. Get started today. <br /> <em><div class="body-text">sponsor</div></em></div><br /><div class="subtitle"><a href="http://djangostars.com/blog/django-classifier-or-what-have-i-done/" target="_blank">django classifier</a></div><div class="body-text">django-classifier allows you to create models at start, and set the properties needed from the admin panel at any time. <br /></div><br /><div class="subtitle"><a href="https://www.codingforentrepreneurs.com/projects/django-likes/" target="_blank">Learn how to create an AJAX-powered like button in Django.</a></div><div class="body-text">We show you how to create a like button much like what you'd see on Facebook, Instagram, Google+, YouTube, and others. We are using the Django web framework along with the Django Rest Framework and jQuery. The key here in this series is how to setup Django's backend so your project can collect like data. We use jQuery as a easy-to-implement solution for working with Django but really, this method could be used with any client technology like Angular, React, Swift, Java, and more. <br /> <em><div class="body-text">video</div></em></div><br /> <br /><div class="title">Projects</div><div class="hr"></div><br /><div class="subtitle"><a href="https://github.com/joelewis/hexopress" target="_blank">hexopress</a> - <small>40 Stars, 1 Fork</small></div><div class="body-text">A tiny blogging platform that lets you write posts in Google Docs and syncs with a Google Drive directory.</div><br /><div class="subtitle"><a href="https://github.com/mcclatchy/mccelections" target="_blank">mccelections</a> - <small>6 Stars, 0 Fork</small></div><div class="body-text">Open-source Django application to ingest, store and output election results.</div><br /><img src="http://www.launchbit.com/taz-pixel/11284-6650-111" /><img src="http://www.launchbit.com/taz-pixel/11284-6596-111" /></td></tr></tbody></table></p>
<p>
<em><a href="http://djangoweekly.com/blog/post/django-weekly-issue-30-drf-36-released-generic-relations-and-more">March 21, 2017 08:22 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://wingware.com/" title="Wingware News">Wingware News</a></h3>


<h4><a href="http://wingware.com/news/2017-03-21">Wing Python IDE 6.0.3: March 21, 2017</a></h4>
<p>
This release adds auto-completion in strings and comments, syntax highlighting 
and error indicators for f-strings, a How-To for Jupyter notebooks, concurrent update of
recent menus from multiple instances of Wing, and many other bug fixes and minor 
improvements.</p>
<p>
<em><a href="http://wingware.com/news/2017-03-21">March 21, 2017 01:00 AM</a></em>
</p>









<hr /><h3 class="post"><a href="https://dbader.org/blog/tags/python" title="dbader.org - Python">Daniel Bader</a></h3>


<h4><a href="https://dbader.org/blog/python-first-class-functions">Python’s Functions Are First-Class</a></h4>
<p>
<h1>Python’s Functions Are First-Class</h1>
<p>Python’s functions are first-class objects. You can assign them to variables, store them in data structures, pass them as arguments to other functions, and even return them as values from other functions.</p>
<img alt="" src="https://dbader.org/blog/figures/python-first-class-functions.png" width="1280" height="720" />
<p>Grokking these concepts intuitively will make understanding advanced features in Python like <a href="https://dbader.org/blog/python-lambda-functions">lambdas</a> and decorators much easier. It also puts you on a path towards functional programming techniques.</p>
<p>In this tutorial I’ll guide you through a number of examples to help you develop this intuitive understanding. The examples will build on top of one another, so you might want to read them in sequence and even to try out some of them in a Python interpreter session as you go along.</p>
<p>Wrapping your head around the concepts we’ll be discussing here might take a little longer than expected. Don’t worry—that’s completely normal. I’ve been there. You might feel like you’re banging your head against the wall, and then suddenly things will “click” and fall into place when you’re ready.</p>
<p>Throughout this tutorial I’ll be using this <code>yell</code> function for demonstration purposes. It’s a simple toy example with easily recognizable output:</p>
<div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">yell</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">text</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'!'</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">yell</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">)</span>
<span class="s1">'HELLO!'</span>
</pre></div>


<h2>Functions Are Objects</h2>
<p>All data in a Python program is <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" target="_blank">represented by objects or relations between objects</a>. Things like strings, lists, modules, and functions are all objects. There’s nothing particularly special about functions in Python.</p>
<p>Because the <code>yell</code> function is an <em>object</em> in Python you can assign it to another variable, just like any other object:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">bark</span> <span class="o">=</span> <span class="n">yell</span>
</pre></div>


<p>This line doesn’t call the function. It takes the function object referenced by <code>yell</code> and creates a second name pointing to it, <code>bark</code>. You could now also execute the same underlying function object by calling <code>bark</code>:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">bark</span><span class="p">(</span><span class="s1">'woof'</span><span class="p">)</span>
<span class="s1">'WOOF!'</span>
</pre></div>


<p>Function objects and their names are two separate concerns. Here’s more proof: You can delete the function’s original name (<code>yell</code>). Because another name (<code>bark</code>) still points to the underlying function you can still call the function through it:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">yell</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">yell</span><span class="p">(</span><span class="s1">'hello?'</span><span class="p">)</span>
<span class="ne">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="s1">'yell'</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">bark</span><span class="p">(</span><span class="s1">'hey'</span><span class="p">)</span>
<span class="s1">'HEY!'</span>
</pre></div>


<p>By the way, Python attaches a string identifier to every function at creation time for debugging purposes. You can access this internal identifier with the <code>__name__</code> attribute:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">bark</span><span class="o">.</span><span class="vm">__name__</span>
<span class="s1">'yell'</span>
</pre></div>


<p>While the function’s <code>__name__</code> is still “yell” that won’t affect how you can access it from your code. This identifier is merely a debugging aid. A <em>variable pointing to a function</em> and the <em>function itself</em> are two separate concerns.</p>
<p>(<a href="https://www.python.org/dev/peps/pep-3155/" target="_blank">Since Python 3.3</a> there’s also <code>__qualname__</code> which serves a similar purpose and provides a <em>qualified name</em> string to disambiguate function and class names.)</p>
<h2>Functions Can Be Stored In Data Structures</h2>
<p>As functions are first-class citizens you can store them in data structures, just like you can with other objects. For example, you can add functions to a list:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">funcs</span> <span class="o">=</span> <span class="p">[</span><span class="n">bark</span><span class="p">,</span> <span class="nb">str</span><span class="o">.</span><span class="n">lower</span><span class="p">,</span> <span class="nb">str</span><span class="o">.</span><span class="n">capitalize</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">funcs</span>
<span class="p">[</span><span class="o">&lt;</span><span class="n">function</span> <span class="n">yell</span> <span class="n">at</span> <span class="mh">0x10ff96510</span><span class="o">&gt;</span><span class="p">,</span>
 <span class="o">&lt;</span><span class="n">method</span> <span class="s1">'lower'</span> <span class="n">of</span> <span class="s1">'str'</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span>
 <span class="o">&lt;</span><span class="n">method</span> <span class="s1">'capitalize'</span> <span class="n">of</span> <span class="s1">'str'</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">]</span>
</pre></div>


<p>Accessing the function objects stored inside the list works like it would with any other type of object:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">funcs</span><span class="p">:</span>
<span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="p">(</span><span class="s1">'hey there'</span><span class="p">))</span>
<span class="s1">'HEY THERE!'</span>
<span class="s1">'hey there'</span>
<span class="s1">'Hey there'</span>
</pre></div>


<p>You can even call a function object stored in the list without assigning it to a variable first. You can do the lookup and then immediately call the resulting “disembodied” function object within a single expression:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">funcs</span><span class="p">[</span><span class="mi">0</span><span class="p">](</span><span class="s1">'heyho'</span><span class="p">)</span>
<span class="s1">'HEYHO!'</span>
</pre></div>


<h2>Functions Can Be Passed To Other Functions</h2>
<p>Because functions are objects you can pass them as arguments to other functions. Here’s a <code>greet</code> function that formats a greeting string using the function object passed to it and then prints it:</p>
<div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="n">greeting</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="s1">'Hi, I am a Python program'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
</pre></div>


<p>You can influence the resulting greeting by passing in different functions. Here’s what happens if you pass the <code>yell</code> function to <code>greet</code>:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">greet</span><span class="p">(</span><span class="n">yell</span><span class="p">)</span>
<span class="s1">'HI, I AM A PYTHON PROGRAM!'</span>
</pre></div>


<p>Of course you could also define a new function to generate a different flavor of greeting. For example, the following <code>whisper</code> function might work better if you don’t want your Python programs to sound like Optimus Prime:</p>
<div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">whisper</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">text</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'...'</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">greet</span><span class="p">(</span><span class="n">whisper</span><span class="p">)</span>
<span class="s1">'hi, i am a python program...'</span>
</pre></div>


<p>The ability to pass function objects as arguments to other functions is powerful. It allows you to abstract away and pass around <em>behavior</em> in your programs. In this example, the <code>greet</code> function stays the same but you can influence its output by passing in different <em>greeting behaviors</em>.</p>
<p>Functions that can accept other functions as arguments are also called <em>higher-order functions</em>. They are a necessity for the functional programming style.</p>
<p>The classical example for higher-order functions in Python is the built-in <code>map</code> function. It takes a function and an iterable and calls the function on each element in the iterable, yielding the results as it goes along.</p>
<p>Here’s how you might format a sequence of greetings all at once by <em>mapping</em> the <code>yell</code> function to them:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">yell</span><span class="p">,</span> <span class="p">[</span><span class="s1">'hello'</span><span class="p">,</span> <span class="s1">'hey'</span><span class="p">,</span> <span class="s1">'hi'</span><span class="p">]))</span>
<span class="p">[</span><span class="s1">'HELLO!'</span><span class="p">,</span> <span class="s1">'HEY!'</span><span class="p">,</span> <span class="s1">'HI!'</span><span class="p">]</span>
</pre></div>


<p><code>map</code> has gone through the entire list and applied the <code>yell</code> function to each element.</p>
<h2>Functions Can Be Nested</h2>
<p>Python allows functions to be defined inside other functions. These are often called <em>nested functions</em> or <em>inner functions</em>. Here’s an example:</p>
<div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">speak</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">whisper</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">t</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'...'</span>
    <span class="k">return</span> <span class="n">whisper</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">speak</span><span class="p">(</span><span class="s1">'Hello, World'</span><span class="p">)</span>
<span class="s1">'hello, world...'</span>
</pre></div>


<p>Now, what’s going on here? Every time you call <code>speak</code> it defines a new inner function <code>whisper</code> and then calls it.</p>
<p>And here’s the kicker—<code>whisper</code> <em>does not exist</em> outside <code>speak</code>:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">whisper</span><span class="p">(</span><span class="s1">'Yo'</span><span class="p">)</span>
<span class="ne">NameError</span><span class="p">:</span>
<span class="s2">"name 'whisper' is not defined"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">speak</span><span class="o">.</span><span class="n">whisper</span>
<span class="ne">AttributeError</span><span class="p">:</span>
<span class="s2">"'function' object has no attribute 'whisper'"</span>
</pre></div>


<p>But what if you really wanted to access that nested <code>whisper</code> function from outside <code>speak</code>? Well, functions are objects—you can <em>return</em> the inner function to the caller of the parent function.</p>
<p>For example, here’s a function defining two inner functions. Depending on the argument passed to top-level function it selects and returns one of the inner functions to the caller:</p>
<div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">get_speak_func</span><span class="p">(</span><span class="n">volume</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">whisper</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">text</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'...'</span>
    <span class="k">def</span> <span class="nf">yell</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">text</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'!'</span>
    <span class="k">if</span> <span class="n">volume</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">yell</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">whisper</span>
</pre></div>


<p>Notice how <code>get_speak_func</code> doesn’t actually <em>call</em> one of its inner functions—it simply selects the appropriate function based on the <code>volume</code> argument and then returns the function object:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">get_speak_func</span><span class="p">(</span><span class="mf">0.3</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">function</span> <span class="n">get_speak_func</span><span class="o">.&lt;</span><span class="nb">locals</span><span class="o">&gt;.</span><span class="n">whisper</span> <span class="n">at</span> <span class="mh">0x10ae18</span><span class="o">&gt;</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">get_speak_func</span><span class="p">(</span><span class="mf">0.7</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">function</span> <span class="n">get_speak_func</span><span class="o">.&lt;</span><span class="nb">locals</span><span class="o">&gt;.</span><span class="n">yell</span> <span class="n">at</span> <span class="mh">0x1008c8</span><span class="o">&gt;</span>
</pre></div>


<p>Of course you could then go on and call the returned function, either directly or by assigning it to a variable name first:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">speak_func</span> <span class="o">=</span> <span class="n">get_speak_func</span><span class="p">(</span><span class="mf">0.7</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">speak_func</span><span class="p">(</span><span class="s1">'Hello'</span><span class="p">)</span>
<span class="s1">'HELLO!'</span>
</pre></div>


<p>Let that sink in for a second here… This means not only can functions <em>accept behaviors</em> through arguments but they can also <em>return behaviors</em>. How cool is that?</p>
<p>You know what, this is starting to get a little loopy here. I’m going to take a quick coffee break before I continue writing (and I suggest you do the same.)</p>
<h2>Functions Can Capture Local State</h2>
<p>You just saw how functions can contain inner functions and that it’s even possible to return these (otherwise hidden) inner functions from the parent function.</p>
<p>Best put on your seat belts on now because it’s going to get a little crazier still—we’re about to enter even deeper functional programming territory. (You had that coffee break, right?)</p>
<p>Not only can functions return other functions, these inner functions can also <em>capture and carry some of the parent function’s state</em> with them.</p>
<p>I’m going to slightly rewrite the previous <code>get_speak_func</code> example to illustrate this. The new version takes a “volume” <em>and</em> a “text” argument right away to make the returned function immediately callable:</p>
<div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">get_speak_func</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">volume</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">whisper</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">text</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'...'</span>
    <span class="k">def</span> <span class="nf">yell</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">text</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'!'</span>
    <span class="k">if</span> <span class="n">volume</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">yell</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">whisper</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">get_speak_func</span><span class="p">(</span><span class="s1">'Hello, World'</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">)()</span>
<span class="s1">'HELLO, WORLD!'</span>
</pre></div>


<p>Take a good look at the inner functions <code>whisper</code> and <code>yell</code> now. Notice how they no longer have a <code>text</code> parameter? But somehow they can still access the <code>text</code> parameter defined in the parent function. In fact, they seem to <em>capture</em> and “remember” the value of that argument.</p>
<p>Functions that do this are called <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)" target="_blank"><em>lexical closures</em></a> (or just <em>closures</em>, for short). A closure remembers the values from its enclosing lexical scope even when the program flow is no longer in that scope.</p>
<p>In practical terms this means not only can functions <em>return behaviors</em> but they can also <em>pre-configure those behaviors</em>. Here’s another bare-bones example to illustrate this idea:</p>
<div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">make_adder</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">n</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">plus_3</span> <span class="o">=</span> <span class="n">make_adder</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">plus_5</span> <span class="o">=</span> <span class="n">make_adder</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">plus_3</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="mi">7</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">plus_5</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="mi">9</span>
</pre></div>


<p>In this example <code>make_adder</code> serves as a <em>factory</em> to create and configure “adder” functions. Notice how the “adder” functions can still access the <code>n</code> argument of the <code>make_adder</code> function (the enclosing scope).</p>
<h2>Objects Can Behave Like Functions</h2>
<p>Object’s aren’t functions in Python. But they can be made <em>callable</em>, which allows you to <em>treat them like functions</em> in many cases.</p>
<p>If an object is callable it means you can use round parentheses <code>()</code> on it and pass function call arguments to it. Here’s an example of a callable object:</p>
<div class="codehilite"><pre><span></span><span class="k">class</span> <span class="nc">Adder</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
         <span class="bp">self</span><span class="o">.</span><span class="n">n</span> <span class="o">=</span> <span class="n">n</span>
    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">n</span> <span class="o">+</span> <span class="n">x</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">plus_3</span> <span class="o">=</span> <span class="n">Adder</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">plus_3</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="mi">7</span>
</pre></div>


<p>Behind the scenes, “calling” an object instance as a function attempts to execute the object’s <code>__call__</code> method.</p>
<p>Of course not all objects will be callable. That’s why there’s a built-in <code>callable</code> function to check whether an object appears callable or not:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="nb">callable</span><span class="p">(</span><span class="n">plus_3</span><span class="p">)</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">callable</span><span class="p">(</span><span class="n">yell</span><span class="p">)</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">callable</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="bp">False</span>
</pre></div>


<h2>Key Takeaways</h2>
<ul>
<li>Everything in Python is an object, including functions. You can assign them to variables, store them in data structures, and pass or return them to and from other functions (first-class functions.)</li>
<li>First-class functions allow you to abstract away and pass around behavior in your programs.</li>
<li>Functions can be nested and they can capture and carry some of the parent function’s state with them. Functions that do this are called <em>closures</em>.</li>
<li>Objects can be made callable which allows you to treat them like functions in many cases.</li>
</ul></p>
<p>
<em><a href="https://dbader.org/blog/python-first-class-functions">March 21, 2017 12:00 AM</a></em>
</p>





<h2>March 20, 2017</h2>




<hr /><h3 class="post"><a href="http://www.datacamp.com/community/blog" title="DataCamp Blog">DataCamp</a></h3>


<h4><a href="http://www.datacamp.com/community/blog/scikit-learn-cheat-sheet">Scikit-Learn Cheat Sheet: Python Machine Learning</a></h4>
<p>
<p>Most of you who are learning data science with Python will have definitely heard already about <code>scikit-learn</code>, the open source Python library that implements a wide variety of machine learning, preprocessing, cross-validation and visualization algorithms with the help of a unified interface. </p>

<p>If you're still quite new to the field, you should be aware that machine learning, and thus also this Python library, belong to the must-knows for every aspiring data scientist. </p>

<p>That's why DataCamp has created a <code>scikit-learn</code> cheat sheet for those of you who have already started learning about the Python package, but that still want a handy reference sheet. Or, if you still have no idea about how <code>scikit-learn</code> works, this machine learning cheat sheet might come in handy to get a quick first idea of the basics that you need to know to get started. </p>

<p>Either way, we're sure that you're going to find it useful when you're tackling machine learning problems!  </p>

<p>This <code>scikit-learn</code> cheat sheet will introduce you to the basic steps that you need to go through to implement machine learning algorithms successfully: you'll see how to load in your data, how to preprocess it, how to create your own model to which you can fit your data and predict target labels, how to validate your model and how to tune it further to improve its performance. </p>

<p><a href="https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Scikit_Learn_Cheat_Sheet_Python.pdf" target="_blank"><img alt="Scikit-Learn Cheat Sheet" src="http://community.datacamp.com.s3.amazonaws.com/community/production/ckeditor_assets/pictures/294/content_button-cheatsheet-scikit_1.png" /></a></p>

<p>In short, this cheat sheet will kickstart your data science projects: with the help of code examples, you'll have created, validated and tuned your machine learning models in no time.  </p>

<p>So what are you waiting for? Time to get started! (Click above to download a printable version or read the online version below.) </p>

<div id="scoped-content">
:target:before {
content:"";
display:block;
height:150px;
margin:-150px 0 0;
}

h3 {font-weight:normal;
}
h4 {
	font-weight: lighter;
}

<h2>Python For Data Science Cheat Sheet: Scikit-learn</h2>

<p>Scikit-learn is an open source Python library that implements a range of machine learning, preprocessing, cross-validation and visualization algorithms using a unified interface.</p>

<h2>A Basic Example</h2>
<code>&gt;&gt;&gt; from sklearn import neighbors, datasets, preprocessing</code>
<code>&gt;&gt;&gt; from sklearn.cross_validation import train_test_split</code>
<code>&gt;&gt;&gt; from sklearn.metrics import accuracy_score</code>
<code>&gt;&gt;&gt; iris = datasets.load_iris()</code>
<code>&gt;&gt;&gt; X, y = iris.data[:, :2], iris.target</code>
<code>&gt;&gt;&gt; X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=33)</code>
<code>&gt;&gt;&gt; scaler = preprocessing.StandardScaler().fit(X_train)</code>
<code>&gt;&gt;&gt; X_train = scaler.transform(X_train)</code>
<code>&gt;&gt;&gt; X_test = scaler.transform(X_test)</code>
<code>&gt;&gt;&gt; knn = neighbors.KNeighborsClassifier(n_neighbors=5)</code>
<code>&gt;&gt;&gt; knn.fit(X_train, y_train)</code>
<code>&gt;&gt;&gt; y_pred = knn.predict(X_test)</code>
<code>&gt;&gt;&gt; accuracy_score(y_test, y_pred)</code>

<h2>Loading The Data</h2>

<p>Your data needs to be numeric and stored as NumPy arrays or SciPy sparse matrices. Other types that are convertible to numeric arrays, such as Pandas DataFrame, are also acceptable.</p>
<code>&gt;&gt;&gt; import numpy as np</code>
<code>&gt;&gt;&gt; X = np.random.random((10,5))</code>
<code>&gt;&gt;&gt; y = np.array(['M','M','F','F','M','F','M','M','F','F','F'])</code>
<code>&gt;&gt;&gt; X[X &lt; 0.7] = 0</code>

<h2>Preprocessing The Data</h2>

<h3>Standardization</h3>
<code>&gt;&gt;&gt; from sklearn.preprocessing import StandardScaler</code>
<code>&gt;&gt;&gt; scaler = StandardScaler().fit(X_train)</code>
<code>&gt;&gt;&gt; standardized_X = scaler.transform(X_train)</code>
<code>&gt;&gt;&gt; standardized_X_test = scaler.transform(X_test)</code>

<h3>Normalization</h3>
<code>&gt;&gt;&gt; from sklearn.preprocessing import Normalizer</code>
<code>&gt;&gt;&gt; scaler = Normalizer().fit(X_train)</code>
<code>&gt;&gt;&gt; normalized_X = scaler.transform(X_train)</code>
<code>&gt;&gt;&gt; normalized_X_test = scaler.transform(X_test)</code>

<h3>Binarization</h3>
<code>&gt;&gt;&gt; from sklearn.preprocessing import Binarizer</code>
<code>&gt;&gt;&gt; binarizer = Binarizer(threshold=0.0).fit(X)</code>
<code>&gt;&gt;&gt; binary_X = binarizer.transform(X)</code>

<h3>Encoding Categorical Features</h3>
<code>&gt;&gt;&gt; from sklearn.preprocessing import LabelEncoder</code>
<code>&gt;&gt;&gt; enc = LabelEncoder()</code>
<code>&gt;&gt;&gt; y = enc.fit_transform(y)</code>

<h3>Imputing Missing Values</h3>
<code>&gt;&gt;&gt;from sklearn.preprocessing import Imputer</code>
<code>&gt;&gt;&gt;imp = Imputer(missing_values=0, strategy='mean', axis=0)</code>
<code>&gt;&gt;&gt;imp.fit_transform(X_train)</code>

<h3>Generating Polynomial Features</h3>
<code>&gt;&gt;&gt; from sklearn.preprocessing import PolynomialFeatures)</code>
<code>&gt;&gt;&gt; poly = PolynomialFeatures(5))</code>
<code>&gt;&gt;&gt; oly.fit_transform(X))</code>

<h2>Training And Test Data</h2>
<code>&gt;&gt;&gt; from sklearn.cross_validation import train_test_split)</code>
<code>&gt;&gt;&gt; X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0))</code>

<h2>Create Your Model</h2>

<h3>Supervised Learning Estimators</h3>

<h4>Linear Regression</h4>
<code>&gt;&gt;&gt; from sklearn.linear_model import LinearRegression)</code>
<code>&gt;&gt;&gt; lr = LinearRegression(normalize=True))</code>

<h4>Support Vector Machines (SVM)</h4>
<code>&gt;&gt;&gt; from sklearn.svm import SVC)</code>
<code>&gt;&gt;&gt; svc = SVC(kernel='linear'))</code>

<h4>Naive Bayes</h4>
<code>&gt;&gt;&gt; from sklearn.naive_bayes import GaussianNB)</code>
<code>&gt;&gt;&gt; gnb = GaussianNB())</code>

<h4>KNN</h4>
<code>&gt;&gt;&gt; from sklearn import neighbors)</code>
<code>&gt;&gt;&gt; knn = neighbors.KNeighborsClassifier(n_neighbors=5))</code>

<h3>Unsupervised Learning Estimators</h3>

<h4>Principal Component Analysis (PCA)</h4>
<code>&gt;&gt;&gt; from sklearn.decomposition import PCA)</code>
<code>&gt;&gt;&gt; pca = PCA(n_components=0.95))</code>

<h4>K Means</h4>
<code>&gt;&gt;&gt; from sklearn.cluster import KMeans)</code>
<code>&gt;&gt;&gt; k_means = KMeans(n_clusters=3, random_state=0))</code>

<h2>Model Fitting</h2>

<h3>Supervised learning</h3>
<code>&gt;&gt;&gt; lr.fit(X, y))</code>
<code>&gt;&gt;&gt; knn.fit(X_train, y_train))</code>
<code>&gt;&gt;&gt; svc.fit(X_train, y_train))</code>
Unsupervised Learning <code>&gt;&gt;&gt; k_means.fit(X_train))</code>
<code>&gt;&gt;&gt; pca_model = pca.fit_transform(X_train))</code>

<h2>Prediction</h2>

<h4>Supervised Estimators</h4>
<code> &gt;&gt;&gt; y_pred = svc.predict(np.random.random((2,5))))</code>
<code>&gt;&gt;&gt; y_pred = lr.predict(X_test))</code>
<code>&gt;&gt;&gt; y_pred = knn.predict_proba(X_test))</code>

<h4>Unsupervised Estimators</h4>
<code> &gt;&gt;&gt; y_pred = k_means.predict(X_test))</code>

<h2>Evaluate Your Model's Performance</h2>

<h3>Classification Metrics</h3>

<h4>Accuracy Score</h4>
<code>&gt;&gt;&gt; knn.score(X_test, y_test))</code>
<code>&gt;&gt;&gt; from sklearn.metrics import accuracy_score)</code>
<code>&gt;&gt;&gt; accuracy_score(y_test, y_pred))</code>

<h4>Classification Report</h4>
<code>&gt;&gt;&gt; from sklearn.metrics import classification_report)</code>
<code>&gt;&gt;&gt; print(classification_report(y_test, y_pred)))</code>

<h4>Confusion Matrix</h4>
<code>&gt;&gt;&gt; from sklearn.metrics import confusion_matrix)</code>
<code>&gt;&gt;&gt; print(confusion_matrix(y_test, y_pred)))</code>

<h3>Regression Metrics</h3>

<h4>Mean Absolute Error</h4>
<code>&gt;&gt;&gt; from sklearn.metrics import mean_absolute_error)</code>
<code>&gt;&gt;&gt; y_true = [3, -0.5, 2])</code>
<code>&gt;&gt;&gt; mean_absolute_error(y_true, y_pred))</code>

<h4>Mean Squared Error</h4>
<code>&gt;&gt;&gt; from sklearn.metrics import mean_squared_error)</code>
<code>&gt;&gt;&gt; mean_squared_error(y_test, y_pred))</code>

<h4>R<sup>2</sup> Score</h4>
<code>&gt;&gt;&gt; from sklearn.metrics import r2_score)</code>
<code>&gt;&gt;&gt; r2_score(y_true, y_pred))</code>

<h3>Clustering Metrics</h3>

<h4>Adjusted Rand Index</h4>
<code>&gt;&gt;&gt; from sklearn.metrics import adjusted_rand_score)</code>
<code>&gt;&gt;&gt; adjusted_rand_score(y_true, y_pred))</code>

<h4>Homogeneity</h4>
<code>&gt;&gt;&gt; from sklearn.metrics import homogeneity_score)</code>
<code>&gt;&gt;&gt; homogeneity_score(y_true, y_pred))</code>

<h4>V-measure</h4>
<code>&gt;&gt;&gt; from sklearn.metrics import v_measure_score)</code>
<code>&gt;&gt;&gt; metrics.v_measure_score(y_true, y_pred))</code>

<h3>Cross-Validation</h3>
<code>&gt;&gt;&gt; print(cross_val_score(knn, X_train, y_train, cv=4))</code>
<code>&gt;&gt;&gt; print(cross_val_score(lr, X, y, cv=2))</code>

<h2>Tune Your Model</h2>

<h3>Grid Search</h3>
<code>&gt;&gt;&gt; from sklearn.grid_search import GridSearchCV</code>
<code>&gt;&gt;&gt; params = {"n_neighbors": np.arange(1,3), "metric": ["euclidean", "cityblock"]}</code>
<code>&gt;&gt;&gt; grid = GridSearchCV(estimator=knn, param_grid=params)</code>
<code>&gt;&gt;&gt; grid.fit(X_train, y_train)</code>
<code>&gt;&gt;&gt; print(grid.best_score_)</code>
<code>&gt;&gt;&gt; print(grid.best_estimator_.n_neighbors)</code>

<h3>Randomized Parameter Optimization</h3>
<code>&gt;&gt;&gt; from sklearn.grid_search import RandomizedSearchCV</code>
<code>&gt;&gt;&gt; params = {"n_neighbors": range(1,5), "weights": ["uniform", "distance"]}</code>
<code>&gt;&gt;&gt; rsearch = RandomizedSearchCV(estimator=knn, param_distributions=params, cv=4, n_iter=8, random_state=5)</code>
<code>&gt;&gt;&gt; rsearch.fit(X_train, y_train)</code>
<code>&gt;&gt;&gt; print(rsearch.best_score_)</code>

<h2>Going Further</h2>

<p>Begin with <a href="https://www.datacamp.com/community/tutorials/machine-learning-python">our scikit-learn tutorial for beginners</a>, in which you'll learn in an easy, step-by-step way how to explore handwritten digits data, how to create a model for it, how to fit your data to your model and how to predict target values. In addition, you'll make use of Python's data visualization library <code>matplotlib</code> to visualize your results. </p>

<p>PS. Don't miss our <a href="https://www.datacamp.com/community/blog/bokeh-cheat-sheet-python">Bokeh cheat sheet</a>, the <a href="https://www.datacamp.com/community/blog/python-pandas-cheat-sheet">Pandas cheat sheet</a> or the <a href="https://www.datacamp.com/community/tutorials/python-data-science-cheat-sheet-basics">Python cheat sheet for data science</a>. </p>
</div></p>
<p>
<em><a href="http://www.datacamp.com/community/blog/scikit-learn-cheat-sheet">March 20, 2017 09:12 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://pycon.blogspot.com/" title="The PyCon blog">PyCon</a></h3>


<h4><a href="http://pycon.blogspot.com/2017/03/pycon-starts-two-months-from-today-and.html">PyCon will be underway in just two months — and is nearly sold out!</a></h4>
<p>
<p>It seems hard to believe, but two months from today PyCon 2017 will be underway in Portland! Attendees will be enjoying a full day of scheduled talks, self-organized Open Spaces, and visits to our many sponsors the Expo Hall.</p> <p>Only a little more than eight weeks remain until we meet in Portland. As PyCon’s volunteers put the finishing touches on their plans, talk slides, and rosters, here are several updates on the conference:</p> <ul><li><strong>Less than 100 tickets now remain!</strong>Soon the conference will be sold out and unable to accommodate any further attendees. If attending is crucial for you, we recommend signing up immediately while there is still time.</li><li><strong>All the major schedules are available on the site.</strong>The program committees who select <a href="https://us.pycon.org/2017/schedule/talks/">talks</a>, <a href="https://us.pycon.org/2017/schedule/tutorials/">tutorials</a>, and <a href="https://us.pycon.org/2017/schedule/posters/list/">posters</a>have completed their hard work for the year — thank you, volunteers! — and you can already start planning what you want to see.</li><li><strong>Several <a href="https://us.pycon.org/2017/schedule/sponsor-tutorials/list/">Sponsor Workshops</a>are already scheduled.</strong>Attendees can register for free for these sessions that give sponsors the chance to offer technical content, in-person instruction, and short talks to community members interested in their techology.</li><li><strong>The <a href="https://us.pycon.org/2017/events/edusummit/">one-day Education Summit</a>has <a href="https://us.pycon.org/2017/edusummit/schedule/">published its schedule</a>.</strong>The sign-up link is available from its main page. The summit invites educators from all kinds of venue to consider joining this year’s discussion and sharing their insights.</li><li><strong><a href="https://us.pycon.org/2017/sponsors/jobs/">Several job fair listings</a></strong>are already up on the site, and many more will be posted in the weeks leading up to the conference. You can go ahead and start reading about the kinds of position that PyCon sponsors are interested in filling from the ranks of the Python community.</li><li><strong>The <a href="https://us.pycon.org/2017/sponsors/">list of sponors</a>has grown and grown</strong>until, at least in my browser, it now takes nearly 40 <code>PgDn</code> keystrokes to reach the bottom! We are thrilled that so many organizations, both for-profit and non-profit, are finding it worthwhile to come alongside the open-source Python community and support the idea of a free programming language.</li></ul> <p>We are excited about this year’s conference. We know, of course, that only a fraction of the world’s Python community ever gets to attend any individual PyCon, and so we will be recording and preserving as much as possible for the use of all of the world’s programmers for years to come. But for those who will be able to manage the travel and to attend, we look forward to your presence in Portland and wish you well as your preparations enter their final weeks!</p></p>
<p>
<em><a href="http://pycon.blogspot.com/2017/03/pycon-starts-two-months-from-today-and.html">March 20, 2017 08:35 PM</a></em>
</p>









<hr /><h3 class="post"><a href="https://www.continuum.io/rss-feed" title="Continuum Analytics RSS FEED">Continuum Analytics News</a></h3>


<h4><a href="https://www.continuum.io/blog/developer-blog/%E2%80%8Banaconda-project-data-science-project-encapsulation-deployment">​Announcing Anaconda Project: Data Science Project Encapsulation and Deployment, the Easy Way!</a></h4>
<p>
<div class="field field-name-field-article-category field-type-taxonomy-term-reference field-label-hidden"><div class="field-items"><div class="field-item even"><a href="https://www.continuum.io/article-categories/developer-blog">Developer Blog</a></div></div></div><div>
      <span class="date-display-single">Monday, March 20, 2017</span>  </div>
<div class="field field-name-field-authors field-type-entityreference field-label-hidden"><div class="field-items"><div class="field-item even"><div class="row">
    <div class="columns large-3">
    <div class="profile-photo">
      <div class="field field-name-field-profile-photo field-type-image field-label-hidden"><div class="field-items"><div class="field-item even"><a href="https://www.continuum.io/people/christine-doig"><img src="https://www.continuum.io/sites/default/files/styles/profile/public/christine_doig_2.jpg?itok=JvR9w4RS" width="180" height="180" alt="" /></a></div></div></div>    </div>
  </div>
    <div class="columns large-9">
    <a href="https://www.continuum.io/people/christine-doig">Christine Doig</a>

              <div class="field field-name-field-profile-company field-type-text field-label-hidden"><div class="field-items"><div class="field-item even">Continuum Analytics</div></div></div>      </div>
</div>
<hr />
</div><div class="field-item odd"><div class="row">
    <div class="columns large-3">
    <div class="profile-photo">
      <div class="field field-name-field-profile-photo field-type-image field-label-hidden"><div class="field-items"><div class="field-item even"><a href="https://www.continuum.io/people/kristopher-overholt"><img src="https://www.continuum.io/sites/default/files/styles/profile/public/kris_overholt.jpg?itok=W7D245wF" width="180" height="180" alt="" /></a></div></div></div>    </div>
  </div>
    <div class="columns large-9">
    <a href="https://www.continuum.io/people/kristopher-overholt">Kristopher Overholt</a>

              <div class="field field-name-field-profile-company field-type-text field-label-hidden"><div class="field-items"><div class="field-item even">Continuum Analytics</div></div></div>      </div>
</div>
<hr />
</div></div></div><div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even"><p>One year ago, we presented <a href="https://www.continuum.io/blog/developer-blog/anaconda-and-docker-better-together-reproducible-data-science">Anaconda and Docker: Better Together for Reproducible Data Science</a>. In that blog post, we described our vision and a foundational approach to portable and reproducible data science using Anaconda and Docker.</p>
<p>This approach embraced the philosophy of Open Data Science in which data scientists can connect the powerful data science experience of Anaconda with the tools that they know and love, which today includes Jupyter notebooks, machine learning frameworks, data analysis libraries, big data computations and connectivity, visualization toolkits, high-performance numerical libraries and more.</p>
<p>We also discussed how data scientists could use Anaconda to develop data science analyses on their local machine, then use Docker to deploy those same data science analyses into production. This was the state of data science encapsulation and deployment that we presented last year:</p>
<p><div class="media media-element-container media-default"><div id="file-1168" class="file file-image file-image-png">

        <h2 class="element-invisible"><a href="https://www.continuum.io/files/project-1png">project-1.png</a></h2>
    
  
  <div class="content">
    <img height="616" width="1200" class="media-element file-default" src="https://www.continuum.io/sites/default/files/project-1.png" alt="" />  </div>

  
</div>
</div></p>
<p><strong>In this blog post, we’ll be diving deeper into how we’ve created a standard data science project encapsulation approach that helps data scientists deploy secure, scalable and reproducible projects across an entire team with Anaconda.</strong></p>
<p>This blog post also provides more details about how we’re using Anaconda and Docker for encapsulation and containerization of data science projects to power the <a href="https://www.continuum.io/blog/developer-blog/secure-and-scalable-data-science-deployments-anaconda">data science deployment functionality</a> in the next generation of Anaconda Enterprise, which augments our truly end-to-end data science platform.</p>
<h3>Supercharge Your Data Science with More Than Just Dockerfiles!</h3>
<p>The reality is, as much as Docker is loved and used by the DevOps community, it is not the preferred tool or entrypoint for data scientists looking to deploy their applications. Using Docker alone as a data science encapsulation strategy still requires coordination with their IT and DevOps teams to write their Dockerfiles, install the required system libraries in their containers, and orchestrate and deploy their Docker containers into production.</p>
<p>Having data scientists worry about infrastructure details and DevOps tooling takes away time from their most valuable skills: finding insights in data, modeling and running experiments, and delivering consumable data-driven applications to their team and end-users.</p>
<p>Data scientists enjoy using the packages they know and love with Anaconda along with conda environments, and wish it was as easy to deploy data science projects as it is to get Anaconda running in their laptop.</p>
<p><strong>By working directly with our amazing customers and users and listening to the needs of their data science teams over the last five years, we have clearly identified how Anaconda and Docker can be used together for data science project encapsulation and as a more useful abstraction layer for data scientists: Anaconda Projects.</strong></p>
<h3>The Next Generation of Portable and Reproducible Data Science with Anaconda</h3>
<p>As part of the next generation of data science encapsulation, reproducibility and deployment, we are happy to announce the release of Anaconda Project with the latest release of Anaconda! <a href="https://www.continuum.io/downloads">Download the latest version of Anaconda 4.3.1</a> to get started with Anaconda Project today.</p>
<p>Or, if you already have Anaconda, you can install Anaconda Project using the following command:</p>
<p><code>conda install anaconda-project</code></p>
<p>Anaconda Project makes it easy to encapsulate data science projects and makes them fully portable and deployment-ready. It automates the configuration and setup of data science projects, such as installing the necessary packages and dependencies, downloading data sets and required files, setting environment variables for credentials or runtime configuration, and running commands.</p>
<p>Anaconda Project is an open source tool created by Continuum Analytics that delivers light-weight, efficient encapsulation and portability of data science projects. Learn more by checking out the <a href="http://anaconda-project.readthedocs.io/en/latest/">Anaconda Project documentation</a>.</p>
<p>Anaconda Project makes it easy to reproduce your data science analyses, share data science projects with others, run projects across different platforms, or deploy data science applications with a single-click in Anaconda Enterprise.</p>
<p>Whether you’re running a project locally or deploying a project with Anaconda Enterprise, you are using the same project encapsulation standard: an Anaconda Project. We’re bringing you the next generation of true Open Data Science deployment in 2017 with Anaconda:</p>
<p><div class="media media-element-container media-default"><div id="file-1169" class="file file-image file-image-png">

        <h2 class="element-invisible"><a href="https://www.continuum.io/files/project-2png">project-2.png</a></h2>
    
  
  <div class="content">
    <img height="615" width="1200" class="media-element file-default" src="https://www.continuum.io/sites/default/files/project-2.png" alt="" />  </div>

  
</div>
</div></p>
<h4>New Release of Anaconda Navigator with Support for Anaconda Projects</h4>
<p>As part of this release of Anaconda Project, we’ve integrated easy data science project creation and encapsulation to the familiar Anaconda Navigator experience, which is a graphical interface for your Anaconda environments and data science tools. You can easily create, edit, and upload Anaconda Projects to Anaconda Cloud through a graphical interface:</p>
<p><div class="media media-element-container media-default"><div id="file-1157" class="file file-image file-image-gif">

        <h2 class="element-invisible"><a href="https://www.continuum.io/files/anaconda-project-1gif">anaconda-project-a (1).gif</a></h2>
    
  
  <div class="content">
    <img height="642" width="1200" class="media-element file-default" src="https://www.continuum.io/sites/default/files/anaconda-project-a%20%281%29.gif" alt="" />  </div>

  
</div>
</div></p>
<p><a href="https://www.continuum.io/downloads">Download the latest version of Anaconda 4.3.1</a> to get started with Anaconda Navigator and Anaconda Project today.</p>
<p>Or, if you already have Anaconda, you can install the latest version of Anaconda Navigator using the following command:</p>
<p><code>conda install anaconda-navigator</code></p>
<p>When you’re using Anaconda Project with Navigator, you can create a new project and specify its dependencies, or you can import an existing <a href="https://conda.io/docs/using/envs.html">conda environment file</a> (environment.yaml) or <a href="https://pip.pypa.io/en/stable/user_guide/#requirements-files">pip requirements file</a> (requirements.txt).</p>
<h4>Anaconda Project examples:</h4>
<ul><li>Image classifier web application using Tensorflow and Flask</li>
<li>Live Python and R notebooks that retrieve the latest stock market data</li>
<li>Interactive Bokeh and Shiny applications for data clustering, cross filtering, and data exploration</li>
<li>Interactive visualizations of data sets with Bokeh, including streaming data</li>
<li>Machine learning models with REST APIs</li>
</ul><p>To get started even quicker with portable data science projects, refer to the <a href="https://anaconda.org/anaconda-enterprise/projects">example Anaconda Projects on Anaconda Cloud</a>.</p>
<h3>Deploying Secure and Scalable Data Science Projects with Anaconda Enterprise</h3>
<p>The new data science deployment and collaboration functionality in Anaconda Enterprise leverages Anaconda Project plus industry-standard containerization with Docker and enterprise-ready container orchestration technology with Kubernetes.</p>
<p>This productionization and deployment strategy makes it easy to create and deploy data science projects with a single-click for projects that use Python 2, Python 3, R, (including their dependencies in C++, Fortran, Java, etc.) or anything else you can build with the 730+ packages in Anaconda.</p>
<p><div class="media media-element-container media-default"><div id="file-1170" class="file file-image file-image-png">

        <h2 class="element-invisible"><a href="https://www.continuum.io/files/project-3png">project-3.png</a></h2>
    
  
  <div class="content">
    <img height="620" width="1200" class="media-element file-default" src="https://www.continuum.io/sites/default/files/project-3.png" alt="" />  </div>

  
</div>
</div></p>
<h3>From Data Science Development to Deployment with Anaconda Projects and Anaconda Enterprise</h3>
<p>All of this is possible without having to edit Dockerfiles directly, install system packages in your Docker containers, or manually deploy Docker containers into production. Anaconda Enterprise handles all of that for you, so you can get back to doing data science analysis.</p>
<p>The result is that any project that a data scientist can create on their machine with Anaconda can be deployed to an Anaconda Enterprise cluster in a secure, scalable, and highly-available manner with just a single click, including live notebooks, interactive applications, machine learning models with REST APIs, or any other projects that leverage the 730+ packages in Anaconda.</p>
<p><div class="media media-element-container media-default"><div id="file-1158" class="file file-image file-image-gif">

        <h2 class="element-invisible"><a href="https://www.continuum.io/files/anaconda-project-b-1gif">anaconda-project-b (1).gif</a></h2>
    
  
  <div class="content">
    <img height="679" width="1200" class="media-element file-default" src="https://www.continuum.io/sites/default/files/anaconda-project-b%20%281%29.gif" alt="" />  </div>

  
</div>
</div></p>
<p>Anaconda is such a foundational and ubiquitous data science platform that other lightweight data science workspaces and workbenches are using Anaconda as a necessary core component for their portable and reproducible data science. Anaconda is the leading Open Data Science platform powered by Python and empowers data scientists with a truly integrated experience and support for end-to-end workflows. Why would you want your data science team using Anaconda in production with anything other than Anaconda Enterprise?</p>
<p>Anaconda Enterprise is a true end-to-end data science platform that integrates with all of the most popular <a href="https://docs.continuum.io/anaconda/images">tools</a> and <a href="https://www.continuum.io/partners">platforms</a> and provides your data science team with an on-premises package repository, secure enterprise notebook collaboration, data science and analytics on Hadoop/Spark, and secure and scalable data science deployment.</p>
<p>Anaconda Enterprise also includes support for all of the 730+ Open Data Science packages in Anaconda. Finally, <a href="http://docs.continuum.io/anaconda-scale">Anaconda Scale</a> is the only recommended and certified method for deploying Anaconda to a Hadoop cluster for PySpark or SparkR jobs.</p>
<h3>Getting Started with Anaconda Enterprise and Anaconda Projects</h3>
<p>Anaconda Enterprise uses Anaconda Project and Docker as its standard project encapsulation and deployment format to enable simple one-click deployments of secure and scalable data science applications for your entire data science team.</p>
<p>Are you interested in using Anaconda Enterprise in your organization to deploy data science projects, including live notebooks, machine learning models, dashboards, and interactive applications?</p>
<p>Access to the next generation of Anaconda Enterprise v5, which features one-click secure and scalable data science deployments, is now available as a technical preview as part of the Anaconda Enterprise Innovator Program.</p>
<p><strong><a href="http://go.continuum.io/anaconda-enterprise-innovator/">Join the Anaconda Enterprise v5 Innovator Program</a> today to discover the powerful data science deployment capabilities for yourself.</strong> Anaconda Enterprise handles your secure and scalable data science project encapsulation and deployment requirements so that your data science team can focus on data exploration and analysis workflows and spend less time worrying about infrastructure and DevOps tooling.</p>
</div></div></div><div class="field field-name-field-tags field-type-taxonomy-term-reference field-label-inline clearfix"><div class="field-label">Tags:&nbsp;</div><div class="field-items"><div class="field-item even" rel="dc:subject"><a href="https://www.continuum.io/tags/anaconda">Anaconda</a></div><div class="field-item odd" rel="dc:subject"><a href="https://www.continuum.io/tags/anaconda-navigator">Anaconda Navigator</a></div><div class="field-item even" rel="dc:subject"><a href="https://www.continuum.io/tags/open-data-science">Open Data Science</a></div></div></div></p>
<p>
<em><a href="https://www.continuum.io/blog/developer-blog/%E2%80%8Banaconda-project-data-science-project-encapsulation-deployment">March 20, 2017 05:30 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.weeklypython.chat/" title="Weekly Python Chat">Weekly Python Chat</a></h3>


<h4><a href="http://ccst.io/e/printing">Printing: Print Function, Print Statement, and more</a></h4>
<p>
<p>The pressure's on! Let's talk about printing!!</p></p>
<p>
<em><a href="http://ccst.io/e/printing">March 20, 2017 05:00 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://masnun.rocks/tags/python/index.xml" title="masnun.rocks()">Abu Ashraf Masnun</a></h3>


<h4><a href="http://masnun.rocks/2017/03/20/django-admin-expensive-count-all-queries/">Django Admin: Expensive COUNT(*) Queries</a></h4>
<p>
<p>If you are a Django developer, it is very likely that you use the Django Admin regularly. And if you have maintained a website with a huge amount of data, you probably already know that Django Admin can become very slow when the database table gets so large. If you log the SQL queries (either using Django logging or using Django Debug Toolbar), you would notice a very expensive
SQL query, something like this:</p>

<pre><code class="language-SQL">SELECT COUNT(*) AS &quot;__count&quot; FROM &quot;table_name&quot;
</code></pre>

<p>In the default settings, you will actually notice this query twice. If you use Django Debug Toolbar, it will tell you that the query was duplicated 2 times.</p>

<h3 id="issue-1">Issue - 1</h3>

<p>By default <code>ModelAdmin</code> has <code>show_full_result_count = True</code> which shows the full result count in the admin interface. This is the source of one of the <code>count(*)</code> queries.</p>

<p>To fix that, we just need to set this on our <code>ModelAdmin</code>:</p>

<pre><code class="language-Python">show_full_result_count = False
</code></pre>

<h3 id="issue-2">Issue - 2</h3>

<p>Even after switching <code>show_full_result_count</code> off, we are still noticing a <code>count(*)</code> query in the log. It&rsquo;s because the Django Paginator does a count itself.</p>

<p>The solution is to somehow bypass the expensive query while still returning a number so the pagination works as expected. We can cache the count value or even run raw SQL query find an approximate value through a rather inexpensive lookup somewhere else.</p>

<p>Here&rsquo;s a quick example of a paginator that runs the expensive query once and then caches the results:</p>

<pre><code class="language-Python">from django.core.paginator import Paginator
from django.core.cache import cache

# Modified version of a GIST I found in a SO thread
class CachingPaginator(Paginator):
    def _get_count(self):

        if not hasattr(self, &quot;_count&quot;):
            self._count = None

        if self._count is None:
            try:
                key = &quot;adm:{0}:count&quot;.format(hash(self.object_list.query.__str__()))
                self._count = cache.get(key, -1)
                if self._count == -1:
                    self._count = super().count
                    cache.set(key, self._count, 3600)

            except:
                self._count = len(self.object_list)
        return self._count

    count = property(_get_count)

    
</code></pre>

<p>Now on our <code>ModelAdmin</code> we just need to use this paginator.</p>

<pre><code class="language-Python">paginator = CachingPaginator
</code></pre>

<p>Once we have done that, it will be slow when we first time load the page and it will be faster afterwards. We can also fetch and cache this value from time to time. This solution might not get us the exact count and thus mess up pagination sometimes but in most cases that would not be much
of a problem.</p></p>
<p>
<em><a href="http://masnun.rocks/2017/03/20/django-admin-expensive-count-all-queries/">March 20, 2017 04:43 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.blog.pythonlibrary.org" title="The Mouse Vs. The Python">Mike Driscoll</a></h3>


<h4><a href="http://www.blog.pythonlibrary.org/2017/03/20/python-101-online-course-is-free-for-48-hours/">Python 101 Online Course is FREE for 48 Hours!</a></h4>
<p>
<div class="pf-content"><p>My Python 101 online course will be completely <strong>FREE</strong> for the next 48 hours on <a href="https://www.educative.io/collection/5663684521099264/5707702298738688" target="_blank">Educative&#8217;s website</a>. Be sure to go get yourself a copy.</p>
<p>It is based on my <a href="https://leanpub.com/python_101/" target="_blank">Python 101 book</a>. When you get it from Educative, it will be yours to keep for life. Note that this is an interactive online course, not a video course. If you enjoy the Python 101 online course, you can get my second online course, <a href="https://www.educative.io/collection/5663684521099264/5693417237512192" target="_blank">Python 201</a> for 50% off just by using the following coupon: <strong>au-promo-py201</strong>.</p>
<p>Links:</p>
<ul>
<li><a href="https://www.educative.io/collection/5663684521099264/5707702298738688" target="_blank">Python 101</a> Online course (FREE for 48 Hours)</li>
<li><a href="https://www.educative.io/collection/5663684521099264/5693417237512192" target="_blank">Python 201</a> Online course (50% off with <strong>au-promo-py201</strong> coupon</li>
</ul>
<p>You can also get my eBooks for 50% off the suggested price with the following links:</p>
<ul>
<li>Python 201: <a href="http://leanpub.com/python201/c/50percent" target="_blank">Intermediate Python</a></li>
<li><a href="http://leanpub.com/wxpythoncookbook/c/50percent" target="_blank">wxPython Cookbook</a></li>
</ul>
</div><p><a class="a2a_button_facebook" href="http://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F20%2Fpython-101-online-course-is-free-for-48-hours%2F&linkname=Python%20101%20Online%20Course%20is%20FREE%20for%2048%20Hours%21" title="Facebook" rel="nofollow" target="_blank"></a><a class="a2a_button_twitter" href="http://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F20%2Fpython-101-online-course-is-free-for-48-hours%2F&linkname=Python%20101%20Online%20Course%20is%20FREE%20for%2048%20Hours%21" title="Twitter" rel="nofollow" target="_blank"></a><a class="a2a_button_google_plus" href="http://www.addtoany.com/add_to/google_plus?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F20%2Fpython-101-online-course-is-free-for-48-hours%2F&linkname=Python%20101%20Online%20Course%20is%20FREE%20for%2048%20Hours%21" title="Google+" rel="nofollow" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F20%2Fpython-101-online-course-is-free-for-48-hours%2F&title=Python%20101%20Online%20Course%20is%20FREE%20for%2048%20Hours%21"></a></p></p>
<p>
<em><a href="http://www.blog.pythonlibrary.org/2017/03/20/python-101-online-course-is-free-for-48-hours/">March 20, 2017 01:05 PM</a></em>
</p>









<hr /><h3 class="post"><a href="https://doughellmann.com/blog" title="python – Doug Hellmann">Doug Hellmann</a></h3>


<h4><a href="http://feeds.doughellmann.com/~r/doughellmann/python/~3/5aOG-Mo4Hy0/">heapq – Heap Sort Algorithm — PyMOTW 3</a></h4>
<p>
A heap is a tree-like data structure where the child nodes have a sort-order relationship with the parents. Binary heaps can be represented using a list or array organized so that the children of element N are at positions 2*N+1 and 2*N+2 (for zero-based indexes). This layout makes it possible to rearrange heaps in place, &#8230; <a href="https://doughellmann.com/blog/2017/03/20/heapq-heap-sort-algorithm-pymotw-3/" class="more-link">Continue reading <span class="screen-reader-text">heapq – Heap Sort Algorithm — PyMOTW 3</span></a><div class="feedflare">
<a href="http://feeds.doughellmann.com/~ff/doughellmann/python?a=5aOG-Mo4Hy0:_ao8bZQjRsU:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/doughellmann/python?d=yIl2AUoC8zA" border="0" /></a> <a href="http://feeds.doughellmann.com/~ff/doughellmann/python?a=5aOG-Mo4Hy0:_ao8bZQjRsU:7Q72WNTAKBA"><img src="http://feeds.feedburner.com/~ff/doughellmann/python?d=7Q72WNTAKBA" border="0" /></a> <a href="http://feeds.doughellmann.com/~ff/doughellmann/python?a=5aOG-Mo4Hy0:_ao8bZQjRsU:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/doughellmann/python?i=5aOG-Mo4Hy0:_ao8bZQjRsU:V_sGLiPBpWU" border="0" /></a>
</div><img src="http://feeds.feedburner.com/~r/doughellmann/python/~4/5aOG-Mo4Hy0" height="1" width="1" alt="" /></p>
<p>
<em><a href="http://feeds.doughellmann.com/~r/doughellmann/python/~3/5aOG-Mo4Hy0/">March 20, 2017 01:00 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.blog.pythonlibrary.org" title="The Mouse Vs. The Python">Mike Driscoll</a></h3>


<h4><a href="http://www.blog.pythonlibrary.org/2017/03/20/pydev-of-the-week-paul-moore/">PyDev of the Week: Paul Moore</a></h4>
<p>
<div class="pf-content"><p>This week we welcome Paul Moore as our PyDev of the Week! Paul is a core developer of pip, the defacto method of installing packages in Python as well as a core developer of Python itself. You can get a glimpse of some of the projects that Paul is involved with on his <a href="https://github.com/pfmoore?language=python&tab=repositories" target="_blank">Github profile</a>. Let&#8217;s spend some time getting to know Paul better!</p>
<p><img src="http://www.blog.pythonlibrary.org/wp-content/uploads/2017/03/Profile-Photo-300x225.jpg" alt="" width="300" height="225" class="aligncenter size-medium wp-image-6244" /></p>
<p><strong>Can you tell us a little about yourself (hobbies, education, etc):</strong></p>
<p><em>I was born in Liverpool, England, and (apart from a few years in Cambridge studying maths at university) I&#8217;ve lived in the north west of England all my life. When I was at school, my passion was for maths, which led to an interest in programming and computers. My first computer was a Sinclair ZX-81 and I learned Z80 assembler from a disassembly of the complete OS of that machine &#8211; not something I&#8217;d ever try these days! I quickly moved onto the BBC micro and then the Acorn Archimedes, until I finally joined the mainstream in about 1995 when I got my first PC. Although I&#8217;ve always been interested in Unix, I never really used it at home, so I&#8217;ve pretty much always been a Windows user (which has its frustrations, but is also much more fun as you get the chance to port stuff that the Unix people take for granted :-)).</em></p>
<p>In the past I&#8217;ve contributed to a lot of open source projects &#8211; vim (I wrote the original OLE and Python interfaces), the Boost C++ libraries, some long-gone Windows utility libraries &#8211; and ported a lot of Unix programs to Windows (I had my own ports of many of the GNU utilities). These have mostly died down now, and I focus mainly on Python.</p>
<p>In my working life, I work for a software consultancy doing Oracle support. While there&#8217;s not much official use of Python involved, I&#8217;ve always used it as much as possible for background scripts and personal utilities. And these days it&#8217;s nice to see it appearing more and more as a &#8220;mainstream&#8221; language &#8211; it&#8217;s popping up in all sorts of unexpected places these days.</p>
<p>Outside of computing I like to spend time with my family (I&#8217;m married and I have a son and daughter, both at university/college), as well as playing music (guitar and piano), playing boardgames and reading/watching videos. I used to practice Ju Jitsu, but haven&#8217;t had time in a few years now (advancing age may also have been a factor!)</p></div>
<p><span id="more-6240"></span></p>
<p><strong>Why did you start using Python?</strong></p>
<p><em>I became interested in &#8220;open source&#8221; (it wasn&#8217;t called that at the time!) in the early 1990&#8217;s, when I loved reading about all the amazing programs available for Unix. None of them were available for the Acorn machines, so naturally I got hold of the sources and ported them myself! I was particularly interested in the scripting languages available, and I produced a port of Perl 3 for the Acorn. While working on that, I heard about this other scripting language called Python. although I didn&#8217;t do much about it initially.</em></p>
<p>When I got a PC, I looked again at Python. I&#8217;d got tired of Perl, and liked how clean Python code looked. So I picked up a copy (this was probably around when Python 1.4 was current) and dived in, and I&#8217;ve never looked back. I started contributing on the python-dev list, and became involved in the actual development around 2002, when I co-authored PEP 302 (import hooks) with Just van Rossum. I&#8217;ve been a relatively active python-dev contributor ever since.</p>
<p><strong>What other programming languages do you know and which is your favorite?</strong></p>
<p><em>Without a shadow of a doubt, my favourite language is Python. Apart from that, I use Oracle SQL and PL/SQL in my day job, as well as a bit of Java. Otherwise, I&#8217;m a bit of a language junkie &#8211; I&#8217;ve played with pretty much every language I could get my hands on over the years &#8211; C/C++, Perl, shell scripting, awk, Lisp, Javascript, Visual Basic, C#, Haskell, J, Forth, Prolog, &#8230; I like C for its performance and direct access to the machine &#8211; there&#8217;s nothing better when you need that low level. SQL pays the wages, and I like its declarative approach to querying data &#8211; having to do groups and joins procedurally feels really clumsy once you learn SQL.</em></p>
<p>Someday I must get into the newer crop of languages like Rust and Go &#8211; but whenever I go looking at them, I always end up thinking &#8220;but this would be *so* much easier in Python&#8221;&#8230;</p>
<p><strong>What projects are you working on now?</strong></p>
<p><em>I became a pip core developer in 2013, and a lot of my time is spent on Python packaging. A lot of that time is contributing to the various discussions and proposals for the future of packaging &#8211; I have surprisingly little time for actual coding these days, unfortunately.</em></p>
<p>Last year, I was invited to become a core Python developer, which was a huge honour. My first commit was the new zipapp module in Python 3.6, which makes it a little easier to bundle standalone Python applications (and brings things nicely full circle, as my first contribution with PEP 302 enabled zipimport in the first place). This is an area I&#8217;ve always been interested in, and a lot of my development work is around better and lighter weight ways to package up Python applications, mainly for Windows. There are a *lot* of ways to do this, and tools like py2exe and cx_Freeze are really good solutions, but there are still a lot of people out there struggling with how to deploy their little utility to their friends or co-workers. I&#8217;d like it if ultimately it was as easy to share a Python script as it is to share a batch file or VBScript utility.</p>
<p><strong>Which Python libraries are your favorite (core or 3rd party)?</strong></p>
<p><em>Everyone always says requests here, and I&#8217;d have to agree. The design of the API is something we can all learn from. I also love the PyData stack, and particularly the Jupyter/Pandas combination. I do lots of data analysis in my day job, and Excel and similar tools are the standard solutions. Being able to show someone a Jupyter notebook that uses Pandas to analyze data in a flexible and simple to understand way is a fantastic introduction to Python.</em></p>
<p>And of course the standard library &#8211; there are just so many useful tools in there that make writing scripts a breeze. Every time I use another language, I end up struggling with frustration over how many things I have to do by hand.</p>
<p><strong>Where do you see Python going as a programming language? </strong></p>
<p><em>I think that the core of Python is in a very good place at the moment &#8211; we have a stable language, gaining small but useful &#8220;quality of life&#8221; features. Python 3 is becoming the obvious starting point for people coming to the language, and while 2.7 will be with us for some years yet, it feels to me that the focus is very much going forward now. The biggest area I&#8217;d like to see improvements in is deployment &#8211; when writing a Python script, it should be trivially easy to add a dependency on something from PyPI and then bundle everything together so that it can be run by *anyone* who has the right version of Python installed (and with the embedded distribution on Windows, even without Python installed at all). The zipapp module is a step in that direction, but we still have a way to go here.</em></p>
<p>I&#8217;d like to see more developments in PyPy and compiler technology in general for Python. While performance isn&#8217;t the overriding concern that it once was, when you need it, it&#8217;s *really* nice not to have to give up on all the other benefits of Python to get it. I recently had a project that was unusably slow in CPython, but which was competitive with C when run with PyPy. I don&#8217;t think people realise they can get that sort of benefit so easily &#8211; I certainly didn&#8217;t! Although I&#8217;d love to see PyPy 3.x get to a production-level release on Windows &#8211; having to go back to Python 2.7 is pretty hard for me these days <img src="https://s.w.org/images/core/emoji/2.2.1/72x72/1f642.png" alt="🙂" class="wp-smiley" /></p>
<p><strong>Is there anything else you’d like to say?</strong></p>
<p><em>I&#8217;d just like to say that the Python community is awesome. I don&#8217;t know of another language with such a helpful and welcoming community. It&#8217;s been a big part of my life for many years, and without a doubt I&#8217;ve gained far more from the community than just technical information &#8211; how we deal with each other, how we encourage participation, etc.</em></p>
<p>And thanks for inviting me to take part in this series!</p>
<p><strong>Thanks for joining us!</strong></p>
<p><a class="a2a_button_facebook" href="http://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F20%2Fpydev-of-the-week-paul-moore%2F&linkname=PyDev%20of%20the%20Week%3A%20Paul%20Moore" title="Facebook" rel="nofollow" target="_blank"></a><a class="a2a_button_twitter" href="http://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F20%2Fpydev-of-the-week-paul-moore%2F&linkname=PyDev%20of%20the%20Week%3A%20Paul%20Moore" title="Twitter" rel="nofollow" target="_blank"></a><a class="a2a_button_google_plus" href="http://www.addtoany.com/add_to/google_plus?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F20%2Fpydev-of-the-week-paul-moore%2F&linkname=PyDev%20of%20the%20Week%3A%20Paul%20Moore" title="Google+" rel="nofollow" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F20%2Fpydev-of-the-week-paul-moore%2F&title=PyDev%20of%20the%20Week%3A%20Paul%20Moore"></a></p></p>
<p>
<em><a href="http://www.blog.pythonlibrary.org/2017/03/20/pydev-of-the-week-paul-moore/">March 20, 2017 12:30 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.dalkescientific.com/writings/diary/index.html" title="Andrew Dalke's writings">Andrew Dalke</a></h3>


<h4><a href="http://www.dalkescientific.com/writings/diary/archive/2017/03/20/fingerprint_set_similarity.html">Fingerprint set similarity</a></h4>
<p>
<p>

Someone recently asked how I might use chemfp to compute the
similarity between two sets of fingerprints. This would be used for
something like <a href="http://sea.bkslab.org/">SEA</a> (Similarity
Ensemble Approach), which "relates proteins based on the set-wise
chemical similarity among their ligands. It can be used to rapidly
search large compound databases and to build cross-target similarity
maps."

</p><p>

The underlying techniques of document set similarity are used in many
fields. Bioinformatics, for example, uses it to analyze gene
expression microarrays to find correlations between genes which might
indicate they affect similar pathways. That said, I am no expert on
the topic. I implemented a SEA-like algorithm for one client, but I
don't know enough to judge the effectiveness of one approach over
another, nor do I know the underlying statistics.

</p><p>

But that's okay. I'll assume that <i>you</i> know these details, and
just want to know how to use chemfp to get the raw numbers to feed
into your scoring function.

</p><p>

The first step is to create and load fingerprints. I have some
pre-computed fingerprints for ChEMBL 21, so I'll use that as my
example. I'll use the 2048-bit RDKit fingerprints. To generate them
yourself, can use the command-line tool <tt>rdkit2fps</tt>, like this:

<pre class="code">
% <b>rdkit2fps chembl_21.sdf.gz -o chembl_21.rdkit2048.fps.gz</b>
</pre>

</p><p>

The FPS file is a text-based, line-oriented format which is easy to
for both humans and software to read and write. Easy, however, does
not mean fast. It takes about 20 seconds to load this fps.gz file:

<pre class="code">
&gt;&gt;&gt; <b>import time</b>
&gt;&gt;&gt; <b>import chemfp</b>
&gt;&gt;&gt; <b>filename = "/Users/dalke/databases/chembl_21.rdkit.rdkit2048.fps.gz"</b>
&gt;&gt;&gt; <b>t1 = time.time(); chemfp.load_fingerprints(filename);t2=time.time()</b>
&lt;chemfp.arena.FingerprintArena object at 0x1021aef90&gt;
&gt;&gt;&gt; <b>t2-t1</b>
19.388361930847168
</pre>

</p><p>

Chemfp 2.0 introduced the FPB binary file format, which is more
structured around the chemfp internal data structures. It's very fast
for chemfp to load, but much more complicated. All of the chemfp tools
know how to read and write the FPB format, so you could create the FPB
file like this:

<pre class="code">
% <b>rdkit2fps chembl_21.sdf.gz -o chembl_21.rdkit2048.fpb</b>
</pre>

If you already have an FPS (or gzip-ed FPS) file then use the
<tt>fpcat</tt> tool to convert it to an FPB file:

<pre class="code">
% <b>fpbcat chembl_21.rdkit2048.fps.gz -o chembl_21.rdkit2048.fpb</b>
</pre>

The conversion took about 32 seconds on my 7 year old laptop.

</p><p>

I'll switch back to Python and show why I developed the FPB
format. The first time I loaded it took 0.4 seconds:

<pre class="code">
&gt;&gt;&gt; <b>t1=time.time(); chemfp.load_fingerprints("chembl_21.rdkit2048.fpb");t2=time.time()</b>
&lt;chemfp.fpb_io.FPBFingerprintArena object at 0x113809790&gt;
&gt;&gt;&gt; <b>t2-t1</b>
0.3760688304901123
</pre>

Much of that time is likely waiting for the hard disk. When I open it
again, the data is already in disk cache, so the load time is now
under 0.1 seconds:

<pre class="code">
&gt;&gt;&gt; <b>t1=time.time(); chemfp.load_fingerprints("chembl_21.rdkit2048.fpb");t2=time.time()</b>
&lt;chemfp.fpb_io.FPBFingerprintArena object at 0x113809650&gt;
&gt;&gt;&gt; <b>t2-t1</b>
0.06340503692626953
</pre>

That's much better than the 20 seconds it took to read from the
gzipped FPS file. For what it's worth, for the RDKit 2048-bit
fingerprint, the fps.gz file is slightly more compact than the .fpb
file:

<pre class="code">
% <b>ls -l chembl_21.rdkit2048.fpb chembl_21.rdkit2048.fps.gz</b>
-rw-r--r--  1 dalke  staff  416031861 May 12  2016 chembl_21.rdkit2048.fps.gz
-rw-r--r--  1 dalke  staff  457103145 Mar 18 02:36 chembl_21.rdkit2048.fpb
</pre>

</p>
<h2>Select a subset</h2>
<p>

In chemfp, a set of fingerprints is called an "arena". (I struggled
for a while to come up with a good name. "A 'hand' of fingerprints"
was humorous, but in the end I re-used the name from <a href="https://en.wikipedia.org/wiki/Region-based_memory_management">memory
management</a>.) I want to use a subset of the arena. The best
solution is to use the <tt>arena.copy()</tt> method. By itself it
makes a copy of the entire data set:

<pre class="code">
&gt;&gt;&gt; <b>import chemfp</b>
&gt;&gt;&gt; <b>arena = chemfp.load_fingerprints("chembl_21.rdkit2048.fpb")</b>
&gt;&gt;&gt; <b>subarena = arena.copy()</b>
&gt;&gt;&gt; <b>len(arena), len(subarena)</b>
(1583839, 1583839)
</pre>

</p><p>

Arenas act like an array of (id, fingerprint) pairs. The first element
is term [0], the second [1], and so on. For example:

<pre class="code">
&gt;&gt;&gt; <b>arena[1234]</b>
(u'CHEMBL79699', '\x04\x00\x00\x08 ... many bytes omitted ... \x00\xc0')
&gt;&gt;&gt; <b>arena[5678]</b>
(u'CHEMBL291214', '\x00\x00\x00\x08 ... many bytes omitted ... \x00 \x80')
</pre>

</p><p>

I'll make another copy, but this time ask chemfp to only copy indices
1234 and 5678:

<pre class="code">
&gt;&gt;&gt; <b>subarena = arena.copy(indices=[1234, 5678])</b>
&gt;&gt;&gt; <b>len(subarena)</b>
2
&gt;&gt;&gt; <b>subarena.ids</b>
[u'CHEMBL79699', u'CHEMBL291214']
&gt;&gt;&gt; <b>subarena[0]</b>
(u'CHEMBL79699', '\x04\x00\x00\x08 ... many bytes omitted ... \x00\xc0')
</pre>

(Notes: by default the subarena may rearrange the fingerprints for
better search performance. If you want the new arena to have the
fingerprint in the same order as the list of indices then also pass in
"reorder=False". Also, the u'' here shows that I'm using chemfp 3.0 on
Python 2.7. Earlier versions of chemfp return both the id and
fingerprint as byte strings, while chemfp 3.0 returns the id as a
Unicode string and the fingerprint as a byte string. Under Python 2,
Unicode strings are shown using the 'u' prefix. Under Python 3, byte
strings are represented with the 'b' prefix.)

</p>
<h2>Make a random subset</h2>
<p>

I need some subsets so I can compare them. To get started I'll just
use randomly selected elements. This is pleasently easy, using a
technique I learned from reading the <a href="https://docs.python.org/2/library/random.html#random.sample">Python
documentation for <tt>random.sample</tt></a>:

<blockquote>
To choose a sample from a range of integers, use an xrange() object as
an argument. This is especially fast and space efficient for sampling
from a large population: sample(xrange(10000000), 60).
</blockquote>

Note: the <tt>xrange()</tt> object is Python 2 specific. If you are
using Python 3 then replace "xrange" with "range".

</p><p>

Here are some examples where I sample 4 values (without replacement)
from 0...99:

<pre class="code">
&gt;&gt;&gt; <b>import random</b>
&gt;&gt;&gt; <b>random.sample(xrange(100), 4)</b>
[68, 49, 79, 38]
&gt;&gt;&gt; <b>random.sample(xrange(100), 4)</b>
[77, 57, 33, 43]
&gt;&gt;&gt; <b>random.sample(xrange(100), 4)</b>
[32, 70, 13, 53]
</pre>

I'll change this to get 4 randomly indices in the arena:

<pre class="code">
&gt;&gt;&gt; <b>random.sample(xrange(len(arena)), 4)</b>
[1089497, 196869, 1474590, 376331]
&gt;&gt;&gt; <b>random.sample(xrange(len(arena)), 4)</b>
[161904, 1136119, 1455737, 518548]
&gt;&gt;&gt; <b>random.sample(xrange(len(arena)), 4)</b>
[1092929, 218864, 1436330, 1357672]
</pre>

</p><p>

Here's a function to create a subarena arena of size <tt>n</tt>, in
easy-to-copy form, which I'll then execute interactively:

<pre class="code">
<b>import random
def make_subset(arena, n):
    indices = random.sample(xrange(len(arena)), n)
    return arena.copy(indices=indices)</b>

&gt;&gt;&gt; <b>a = make_subset(arena, 4)</b>
&gt;&gt;&gt; <b>len(a)</b>
4
&gt;&gt;&gt; <b>a.ids</b>
[u'CHEMBL1448181', u'CHEMBL1532656', u'CHEMBL3480613', u'CHEMBL1765556']
</pre>

</p>
<h2>Jaccard index between two sets</h2>
<p>

The <a href="https://en.wikipedia.org/wiki/Jaccard_index">Jaccard
index</a> is a widely used scoring function. (In cheminformatics we
know it better as the Tanimoto, for historical reasons tied more to
how knowledge diffuses than to strict date priority.) Simply put, it's
defined as:

<pre>
                number of elements common to both A and B
Jaccard(A, B) = -----------------------------------------
                    number of unique elements in A or B
</pre>

The harder part is to turn this into something meaningful. What does
it mean for an fingerprint record to be common to both A and B?

</p><p>

One possibility is to look at the identifier, and say that a record is
common to A and B if and only if the record's identifier is in both
sets. However, it would be nice to capture some sense of chemical
similarity. We can instead say that a record is in common if and only
if they have the same fingerprints, but 100% similarity is very
strict.

</p><p>

Let's lower the threshold a bit, and say that a record 'a' in A is
common to B if and only if there is at least one record 'b' in B such
that the fingerprint Tanimoto(a, b) &gt;= 0.8.

</p><p>

If you think at this for a bit you'll see a couple of things. First
off, this definition is <i>not</i> symmetric. If there is at least one
similar 'b' for some 'a' then there is at least one similar 'a' for
that 'b', but 'a' might be the nearest neighbor of two different
'b's. (The asymmetry could be fixed by also including the results of a
search of B against A. I'm not going to consider that approach.)
Second, "has a neighbor in B" can be implemented as a k=1 nearest
neighbor search of A against B, which is a built-in chemfp function.

</p><p>

I'll make two subsets with 1,000 elements each, randomly sampled from
the ChEMBL-21 arena:

<pre class="code">
&gt;&gt;&gt; <b>subset1 = make_subset(arena, 1000)</b>
&gt;&gt;&gt; <b>subset2 = make_subset(arena, 1000)</b>
</pre>

then use chemfp to do the k=1 nearest-neighbor search between two
arenas, with a minimum required score of 0.8:

<pre class="code">
&gt;&gt;&gt; <b>from chemfp import search</b>
&gt;&gt;&gt; <b>results = search.knearest_tanimoto_search_arena(subset1, subset2, k=1, threshold=0.8)</b>
</pre>

</p><p>

Most randomly chosen fingerprints are below 0.8 threshold, so they
find 0 neighbors, but some of them have 1 neighbor:

<pre class="code">
&gt;&gt;&gt; <b>len(results[0])</b>
0
&gt;&gt;&gt; <b>len(results[1])</b>
0
&gt;&gt;&gt; <b>len(results[26])</b>
1
</pre>

There are a few ways to count the number of element in common. You can
use normal Python functions, like:

<pre class="code">
&gt;&gt;&gt; <b>sum(len(result) for result in results)</b>
24
</pre>

A faster way is to let chemfp count all of the hits for you:

<pre class="code">
&gt;&gt;&gt; <b>results.count_all()</b>
24
</pre>

</p><p>

Okay, so Tanimoto similarity gives the numerator to the Jaccard set
similarity. What about the denominator, which is "the number of unique
elements in A or B"?

</p><p>

For that I'll count the total number of unique identifiers in both A
and B. You saw earlier that <tt>arena.ids</tt> gives the list of
identifiers for the arena. I'll use those to make a Python
<tt>set</tt> made of the union of the two ids, then get the size of
the resulting set:

<pre class="code">
&gt;&gt;&gt; <b>len(set(subset1.ids).union(subset2.ids))</b>
2000
</pre>

Thus, the Jaccard index of the two sets is 24/2000, or 0.012. They are
not that similar.

</p>
<h3>A slighly more interesting case</h3>
<p>

The denominator of 2000 is rather boring, as it's 1000+1000, that is,
the sum of the individual set sizes. That's because the two randomly
chosen sets have no elements in common:

<pre class="code">
&gt;&gt;&gt; <b>len(set(subset1.ids).intersection(subset2.ids))</b>
0
</pre>

I'll make some random samples until there are at least 3 elements in
common:

<pre class="code">
&gt;&gt;&gt; <b>while len(set(subset1.ids).intersection(subset2.ids)) &lt; 3:</b>
...   <b>subset2 = make_subset(arena, 1000)</b>
... 
&gt;&gt;&gt; <b>len(set(subset1.ids).intersection(subset2.ids))</b>
4
&gt;&gt;&gt; <b>set(subset1.ids).intersection(subset2.ids)</b>
set([u'CHEMBL64050', u'CHEMBL129835', u'CHEMBL255712', u'CHEMBL88792'])
&gt;&gt;&gt; <b>len(set(subset1.ids).union(subset2.ids))</b>
1996
</pre>

These two subsets have 40 elements in common:

<pre class="code">
&gt;&gt;&gt; <b>search.knearest_tanimoto_search_arena(subset1, subset2, k=1, threshold=0.8).count_all()</b>
40
</pre>

given them a Jaccard index of 40/1996, or 0.02. That's better than
0.012, but still not very similar.

</p>
<h2>Estimating background similarity</h2>
<p>

I want to get some idea of the average similarity between two randomly
chosen sets, at different sizes and threshold scores. I'll define a
'<tt>jaccard</tt>' function to help with the calculation:

<pre class="code">
<b>from __future__ import division  # for Python 2.x, make 1/2 be 0.5, not 0
from chemfp import search</b>

# Note: this isn't quite the Jaccard similarity as the non-reflexive
# numerator means that often jaccard(A, B) != jaccard(B, A)
<b>def jaccard(arena1, arena2, threshold=0.8):
  numerator = search.knearest_tanimoto_search_arena(
                 arena1, arena2, k=1, threshold=threshold).count_all()
  denominator = len(set(arena1.ids).union(arena2.ids))
  return numerator / denominator</b>

&gt;&gt;&gt; <b>jaccard(subset1, subset2) </b>
0.02004008016032064 
&gt;&gt;&gt; <b>jaccard(make_subset(arena, 1000), make_subset(arena, 1000))</b>
0.017508754377188594
&gt;&gt;&gt; <b>jaccard(make_subset(arena, 1000), make_subset(arena, 1000))</b>
0.021
&gt;&gt;&gt; <b>jaccard(make_subset(arena, 1000), make_subset(arena, 1000))</b>
0.0155
</pre>

</p><p>

It varies quite a bit, so I'll compute 100 scores and get some
information about the min, max, average, and standard deviation:

<pre class="code">
&gt;&gt;&gt; <b>scores = []</b>
&gt;&gt;&gt; <b>for i in range(50):</b>
...   <b>scores.append(jaccard(make_subset(arena, 1000), make_subset(arena, 1000)))</b>
... 
&gt;&gt;&gt; <b>min(scores), max(scores)</b>
(0.008, 0.022)
</pre>

</p><p>

What about the average and standard deviation? Python 3.4 introduced
the <tt><a href="https://docs.python.org/3/library/statistics.html">statistics</a></tt>
module, which has those as built-in functions. While chemfp 3.0
supports Python 3.5 and greater, I want this blog post to work on both
Python 2.7 and 3.3, so I'll import some functionality from numpy:

<pre class="code">
&gt;&gt;&gt; <b>import numpy as np </b>
&gt;&gt;&gt; <b>np.mean(scores)</b>
0.014819138037618857
&gt;&gt;&gt; <b>np.std(scores)</b>
0.0025880786854096645
</pre>

(One obvious question is, is standard deviation an appropriate
characterization, or am I hammering a square block into a round hole?
I'll let someone more knowledgeable about statistics figure that out.)

</p><p>

I then wrote a function to show the mean and standard deviation of 100
Jaccard scores, across the NxM cross product of some set sizes, that
is size 10x10, size 10x20, ... 10x2000, 20x10, ... up to size
2000x2000. Here's the function, which is mostly taken up by code that
tries to format things nicely:

<pre class="code">
def compute_score_table(arena):
  sizes = (10, 20, 50, 100, 200, 500, 1000, 2000)
  print("     " + "".join(str(size).center(12) for size in sizes))
  for size1 in sizes:
    output1 = str(size1).rjust(4) + "   "
    output2 = "       "
    for size2 in sizes:
      scores = []
      for i in range(100):
          score = jaccard(make_subset(arena, size1), make_subset(arena, size2))
          scores.append(score)
      output1 += ("%.3f +/-" % (np.mean(scores),)).ljust(12) 
      output2 += ("  %.5f" % (np.std(scores),)).ljust(12)
    print(output1) 
    print(output2)
</pre>

</p><p>

The output shows the average and standard deviations on alternate
lines, so I could make better use of vertical space:

<pre class="code">
&gt;&gt;&gt; <b>compute_score_table(arena)</b>
          10          20          50         100         200         500         1000        2000    
  10   0.000 +/-   0.000 +/-   0.000 +/-   0.000 +/-   0.000 +/-   0.000 +/-   0.000 +/-   0.000 +/-   
         0.00000     0.00000     0.00233     0.00127     0.00121     0.00059     0.00036     0.00033   
  20   0.000 +/-   0.000 +/-   0.001 +/-   0.001 +/-   0.001 +/-   0.001 +/-   0.001 +/-   0.001 +/-   
         0.00332     0.00000     0.00345     0.00266     0.00199     0.00115     0.00068     0.00054   
  50   0.000 +/-   0.001 +/-   0.001 +/-   0.002 +/-   0.002 +/-   0.001 +/-   0.001 +/-   0.001 +/-   
         0.00233     0.00371     0.00271     0.00318     0.00322     0.00146     0.00097     0.00067   
 100   0.000 +/-   0.001 +/-   0.001 +/-   0.001 +/-   0.003 +/-   0.003 +/-   0.003 +/-   0.002 +/-   
         0.00127     0.00198     0.00256     0.00256     0.00382     0.00193     0.00174     0.00121   
 200   0.000 +/-   0.001 +/-   0.002 +/-   0.002 +/-   0.004 +/-   0.005 +/-   0.005 +/-   0.005 +/-   
         0.00121     0.00276     0.00316     0.00311     0.00305     0.00286     0.00208     0.00119   
 500   0.000 +/-   0.001 +/-   0.002 +/-   0.003 +/-   0.006 +/-   0.009 +/-   0.010 +/-   0.010 +/-   
         0.00110     0.00108     0.00236     0.00298     0.00314     0.00318     0.00251     0.00177   
1000   0.000 +/-   0.001 +/-   0.002 +/-   0.004 +/-   0.006 +/-   0.012 +/-   0.014 +/-   0.016 +/-   
         0.00061     0.00132     0.00225     0.00280     0.00291     0.00275     0.00272     0.00254   
2000   0.001 +/-   0.001 +/-   0.002 +/-   0.004 +/-   0.007 +/-   0.014 +/-   0.019 +/-   0.024 +/-   
         0.00128     0.00130     0.00192     0.00269     0.00293     0.00303     0.00309     0.00250   
</pre>

(By the way, if all of the values are 0.0 then you are likely using
Python 2.7 and have omitted the "from __future__ import division" line
when you defined the jaccard() function. I did that a few times when
developing this essay.)

</p><p>

My <tt>jaccard()</tt> function is not reflexive, which you can verify
by comparing terms i by j with j by i, as in 1000x2000 vs
2000x100. Their respective values are 0.019+/-0.00309 and
0.016+/-0.00254. The averages are multiple standard deviations away
from each other.

</p><p>

The scores are also a function of set size, which is not what you want
for a good scoring function. The 2000x2000 term has an average score
of 0.024 while the 1000x1000 has an average score 0.014. The elements
in the sets are randomly selected, so I expected the two comparisons
to have about the same score. This bias towards larger sets is built
into my similarity definition, so I conclud that my
<tt>jaccard()</tt> implementation is not a good scoring function for
sets.

<p><p>

There are ways to improve the scoring function, for example by
normalizing to the background average/standard deviation to give a
Z-score, or by better use of statistics. That is "left to the student
as an exercise."

</p><p>

Here's the final code in a single block so you can use it more easily:

<pre class="code">
from __future__ import division

import random
import numpy as np
import chemfp
from chemfp import search

# Support both Python 2 and Python 3
try:
  xrange # Check if this is Python 2
except NameError:
  xrange = range # Use 'range' for Python 3 

def make_subset(arena, n):
  indices = random.sample(xrange(len(arena)), n)
  return arena.copy(indices=indices)

# Note: this isn't quite the Jaccard similarity as the non-reflexive
# numerator means that often jaccard(A, B) != jaccard(B, A)
def jaccard(arena1, arena2, threshold=0.8):
  numerator = search.knearest_tanimoto_search_arena(
                 arena1, arena2, k=1, threshold=threshold).count_all()
  denominator = len(set(arena1.ids).union(arena2.ids))
  return numerator / denominator

def compute_score_table(arena):
  sizes = (10, 20, 50, 100, 200, 500, 1000, 2000)
  print("     " + "".join(str(size).center(12) for size in sizes))
  for size1 in sizes:
    output1 = str(size1).rjust(4) + "   "
    output2 = "       "
    for size2 in sizes:
      scores = []
      for i in range(100):
          score = jaccard(make_subset(arena, size1), make_subset(arena, size2))
          scores.append(score)
      output1 += ("%.3f +/-" % (np.mean(scores),)).ljust(12) 
      output2 += ("  %.5f" % (np.std(scores),)).ljust(12)
    print(output1) 
    print(output2) 


arena = chemfp.load_fingerprints("chembl_21.rdkit2048.fpb")
compute_score_table(arena)
</pre>

</p>
<h2>Details about the best match</h2>
<p>

While it isn't needed for the set-to-set comparison, you might be
interested in knowing more about the closest match in the k=1 nearest
search. It's easy to get the list of ids and scores for the non-empty rows:

<pre class="code">
&gt;&gt;&gt; <b>subset1 = make_subset(arena, 1000)</b>
&gt;&gt;&gt; <b>subset2 = make_subset(arena, 1000)</b>
&gt;&gt;&gt; <b>results = search.knearest_tanimoto_search_arena(</b>
...     <b>subset1, subset2, k=1, threshold=0.8)</b>
...
&gt;&gt;&gt; <b>for result in results:</b>
...   <b>if result:</b>
...     <b>print("%-13s %.3f" % result.get_ids_and_scores()[0])</b>
... 
CHEMBL386477  0.926
CHEMBL386477  1.000
CHEMBL275879  0.954
CHEMBL2138462 0.921
CHEMBL83932   0.813
CHEMBL2403669 0.805
CHEMBL2372083 0.819
CHEMBL1213903 0.988
CHEMBL1574001 0.901
CHEMBL2337012 0.913
CHEMBL370254  0.806
CHEMBL555410  0.908
CHEMBL2337012 0.897
CHEMBL1683180 0.822
CHEMBL73244   0.801
CHEMBL605903  0.831
CHEMBL1834630 0.806
CHEMBL1475722 0.821
CHEMBL65904   0.912
CHEMBL2106627 0.812
CHEMBL108353  0.816
CHEMBL108353  0.825
</pre>

</p><p>

It becomes a bit more complicated if you also want information about
the query and its fingerprint, so let's do that. I'll also print the
query id, the number of 1-bits in the query and target fingerprint
(better known as the popcount), and the number of 1-bits in their
fingerprint intersection, that is, the number of bits in
common. Here's the code:

<pre class="code">
import random
import numpy as np
import chemfp
from chemfp import search, bitops

# Support both Python 2 and Python 3
try:
  xrange # Check if this is Python 2
except NameError:
  xrange = range # Use 'range' for Python 3 

def make_subset(arena, n):
    indices = random.sample(xrange(len(arena)), n)
    return arena.copy(indices=indices)

arena = chemfp.load_fingerprints("chembl_21.rdkit2048.fpb")

subset1 = make_subset(arena, 1000)
subset2 = make_subset(arena, 1000)
results = search.knearest_tanimoto_search_arena(
  subset1, subset2, k=1, threshold=0.8)

print("  query_id     #bits    target_id    #bits common  score")
for i, result in enumerate(results):
    if not result:
        continue   # skip elements with no matches
    query_id, query_fp = subset1[i]
    num_query_bits = bitops.byte_popcount(query_fp)
    j, score = result.get_indices_and_scores()[0]
    target_id, target_fp = subset2[j]
    num_target_bits = bitops.byte_popcount(target_fp)
    in_common = bitops.byte_intersect_popcount(query_fp, target_fp)
    print("%-13s %5d   %-13s %5d  %5d   %.4f" %
          (query_id, num_query_bits, target_id, num_target_bits, in_common, score))
</pre>

It generates the following output:

<pre class="code">
  query_id     #bits    target_id    #bits common  score
CHEMBL340793    710   CHEMBL443821    657    657   0.9254
CHEMBL2115272   710   CHEMBL1096675   758    667   0.8327
CHEMBL262239    761   CHEMBL411281    761    761   1.0000
CHEMBL529191    821   CHEMBL3434725   843    784   0.8909
CHEMBL389943    868   CHEMBL414961    887    807   0.8513
CHEMBL350381   1008   CHEMBL162288    899    899   0.8919
CHEMBL1407603  1042   CHEMBL1610293  1001    955   0.8778
CHEMBL484872   1058   CHEMBL1610293  1001    967   0.8855
CHEMBL381366   1066   CHEMBL426130   1060    985   0.8633
CHEMBL2058350  1098   CHEMBL2058354  1005   1005   0.9153
CHEMBL1898269  1112   CHEMBL1893417  1049    982   0.8329
CHEMBL132434   1123   CHEMBL15324    1158   1079   0.8977
CHEMBL332868   1128   CHEMBL77685    1160   1052   0.8511
CHEMBL2143647  1188   CHEMBL1893417  1049   1008   0.8202
CHEMBL1711444  1189   CHEMBL1310059  1231   1102   0.8361
CHEMBL3249400  1232   CHEMBL2371463  1128   1062   0.8182
CHEMBL1367025  1242   CHEMBL1352709  1345   1213   0.8828
CHEMBL77799    1290   CHEMBL1081652  1218   1135   0.8267
CHEMBL2303747  1296   CHEMBL15324    1158   1096   0.8071
CHEMBL451899   1656   CHEMBL477245   1551   1433   0.8078
CHEMBL362938   1708   CHEMBL1731136  1966   1641   0.8072
CHEMBL525425   1730   CHEMBL1731136  1966   1658   0.8135
CHEMBL516074   1742   CHEMBL3113501  1876   1691   0.8775
CHEMBL2029145  1764   CHEMBL2304149  1713   1706   0.9633
CHEMBL298265   1865   CHEMBL1731136  1966   1788   0.8752
CHEMBL373910   1906   CHEMBL1731136  1966   1830   0.8962
</pre>

</p>
<h2>Cumulative value scoring methods</h2>
<p>

I earlier pointed out two big problems with the <tt>jaccard()</tt>
implementation I proposed. It isn't symmetric (<tt>jaccard(a, b)</tt>
is rarely equal to <tt>jaccard(b, a)</tt>), and it has a bias towards
larger sizes.

</p><p>

There's another problem. Suppose A and B both have <i>n</i> elements,
with no overlaps (making the denominator <i>2n</i>), and suppose also
that each element in A has exactly one neighbor with at least a 0.8
similarity. Then the <tt>jaccard()</tt> method will report a
similarity of 1.0.

</p><p>

Now consider a set C which again has <i>n</i> elements, with no
overlaps with elements in A. But this time each element of A has 5
neighbors in C, and vice versa. The <tt>jaccard()</tt> function only
checks if there is at least one neighbor, so will still return a score
of 1.0, even though sets A and C are more compact and closer to each
other than A was to B.

</p><p>

One way to capture that information is to look at the total number of
matches between A and B, and between A and C. Instead of doing a k=1
nearest neighbor search, I'll do a threshold search and count the
total number of matches between the two:

<pre class="code">
&gt;&gt;&gt; <b>A = make_subset(arena, 1000)</b>
&gt;&gt;&gt; <b>B = make_subset(arena, 1000)</b>
&gt;&gt;&gt; <b>C = make_subset(arena, 1000)</b>
&gt;&gt;&gt; <b>results_AB = search.threshold_tanimoto_search_arena(A, B, threshold=0.8)</b>
&gt;&gt;&gt; <b>results_AB.count_all()</b>
34
&gt;&gt;&gt; <b>results_AC = search.threshold_tanimoto_search_arena(A, C, threshold=0.8)</b>
&gt;&gt;&gt; <b>results_AC.count_all()</b>
49
</pre>

This result is also reflexive, that is, comparing (A, B) and (B, A)
give the same values.

</p><p>

One possible concern is that the match count assumes that all
similarities are of equal importance, so a similarity of 0.8 is just
as strong as 1.0. A more subtle method might use the cumulative sum of
the scores in AxB and AxC, which is returned by the
<tt>cumulative_score_all()</tt> method:

<pre class="code">
&gt;&gt;&gt; <b>results_AB.cumulative_score_all()</b>
29.499029322763217
&gt;&gt;&gt; <b>results_AC.cumulative_score_all()</b>
42.23963171858597
</pre>

</p><p>

I pointed out earlier that my naive <tt>jaccard()</tt> implementation
is biased towards comparing large sets. A similar bias applies when
using counts or cumulative scores. With randomly selected elements,
the count or cumulative scores will scale as the product of the set
sizes:

<pre class="code">
&gt;&gt;&gt; <b>def get_count(n, m, repeat=100):</b>
...   <b>count = 0</b>
...   <b>for i in range(repeat):</b>
...     <b>subset1 = make_subset(arena, n)</b>
...     <b>subset2 = make_subset(arena, m)</b>
...     <b>results = search.threshold_tanimoto_search_arena(subset1, subset2)</b>
...     <b>count += results.count_all()</b>
...   <b>return count</b>
... 
&gt;&gt;&gt; <b>get_count(1000, 1000)</b>
29709
&gt;&gt;&gt; <b>get_count(1000, 1000)</b>
29803
&gt;&gt;&gt; <b>get_count(2000, 1000)</b>
58237
&gt;&gt;&gt; <b>get_count(2000, 1000)</b>
61533
&gt;&gt;&gt; <b>get_count(3000, 1000)</b>
91164
&gt;&gt;&gt; <b>get_count(3000, 1000)</b>
91833
&gt;&gt;&gt; <b>get_count(3000, 3000)</b>
265121
&gt;&gt;&gt; <b>get_count(3000, 3000)</b>
</pre>

Change the <tt>count_all()</tt> to <tt>cumulative_score_all()</tt> to
get similar results using the sum of all the scores.

</p><p>

As I mentioned, an advantage of the count and cumulative score
approach over the k=1 nearest-neighbor search is that they are
symmetric, or more precisely, reflexive. Compare the following to the
(3000, 1000) output of the previous code and you'll see they give
about the same values:

<pre class="code">
&gt;&gt;&gt; <b>get_count(1000, 3000)</b>
91185
&gt;&gt;&gt; <b>get_count(1000, 3000)</b>
90586
</pre>

</p>
<h3>The joy of floating point arithmetic</h3>
<p>

This is an aside. Here are two alternative ways to compute the
cumulative sum of all of the scores, the first by computing the
<tt>cumulative_sum()</tt> of each individual result, and the second by
computing the sum of the sum of each list of scores using Python.

<pre class="code">
&gt;&gt;&gt; <b>sum(result.cumulative_score() for result in results_AB)</b>
29.499029322763214
&gt;&gt;&gt; <b>sum(sum(result.get_scores()) for result in results_AB)</b>
29.499029322763214
</pre>

It really bugs me that the <tt>cumulative_score_all()</tt> and the
other two approaches differ by -3.552713678800501e-15, which is the
least significant bit of the two representations:

<pre class="code">
&gt;&gt;&gt; <b>sum(sum(result.get_scores()) for result in results_AB).hex()</b>
'0x1.d7fc062bd0356p+4'
&gt;&gt;&gt; <b>results_AB.cumulative_score_all().hex()</b>
'0x1.d7fc062bd0357p+4'
</pre>

</p><p>

After a bit of research, I confirmed that it's not due to a chemfp
bug, but rather because floating point addition using doubles is not
associative. If I sum up all of the scores in order, I get the value
from <tt>cumulative_score_all()</tt>:

<pre class="code">
&gt;&gt;&gt; <b>scores = []</b>
&gt;&gt;&gt; <b>for result in results_AB:</b>
...   <b>scores.extend(result.get_scores())</b>
... 
&gt;&gt;&gt; <b>sum(scores)</b>
29.499029322763217
</pre>

</p><p>

If I group the scores so I first sum up each row, I get the other
value:

<pre class="code">
&gt;&gt;&gt; <b>scores = []</b>
&gt;&gt;&gt; <b>for result in results_AB:</b>
...   <b>scores.append(sum(result.get_scores()))</b>
... 
&gt;&gt;&gt; <b>sum(scores)</b>
29.499029322763214
</pre>

</p><p>

Minor differences in the last significant digit are an all too common
consequence of using floating point numbers, so while it annoyed me,
it was the first reason I thought of.

</p>
<h2>Cumulative score-based similarity</h2>
<p>

In an earlier section I showed that the total count or the
cumulative score between two randomly chosen sets scales as the
product of the two set sizes. What about normalizing the cumulative
score by that product?

</p><p>

There's probably a name for this similarity measure, but I don't know
much about this field and don't know the name. I'll call it "sss" for
"sum of scores similarity".

<pre class="code">
# I don't actually use this one
def sss(arena1, arena2, threshold=0.8):
  results = search.threshold_tanimoto_search_arena(
                 arena1, arena2, threshold=threshold)
  return results.cumulative_score_all() / (len(arena1) * len(arena2))
</pre>

After some experimentation, I decided to scale the score by 300,
because that results in two sets with randomly chosen terms having a
similarity of 0.01.

<pre class="code">
# This is the one I use.
def sss(arena1, arena2, threshold=0.8):
  results = search.threshold_tanimoto_search_arena(
                 arena1, arena2, threshold=threshold)
  # The scaling factor of 300 was chosen so that random ChEMBL
  # subsets have a score of about 0.01. It doesn't matter for
  # ranking as it's used as an arbitrary scaling factor.
  similarity = 300 * results.cumulative_score_all() / (len(arena1) * len(arena2))
  return similarity
</pre>

I made a variant of the similarity table I used before, this time with
the <tt>sss()</tt> function as my similarity measure, instead of
<tt>jaccard()</tt>:

<pre class="code">
def compute_sss_table(arena):
  sizes = (10, 20, 50, 100, 200, 500, 1000, 2000)
  print("     " + "".join(str(size).center(12) for size in sizes))
  for size1 in sizes:
    output1 = str(size1).rjust(4) + "   "
    output2 = "       "
    for size2 in sizes:
      scores = []
      for i in range(100):
          score = sss(make_subset(arena, size1), make_subset(arena, size2))
          scores.append(score)
      output1 += ("%.3f +/-" % (np.mean(scores),)).ljust(12) 
      output2 += ("  %.5f" % (np.std(scores),)).ljust(12)
    print(output1) 
    print(output2) 
</pre>

The output table is very close to symmetric under transposition, and
with a nearly constant similarity score of 0.011:

<pre class="code">
          10          20          50         100         200         500         1000        2000    
  10   0.024 +/-   0.012 +/-   0.005 +/-   0.013 +/-   0.013 +/-   0.015 +/-   0.008 +/-   0.011 +/-   
         0.23916     0.12318     0.05309     0.06569     0.04212     0.03571     0.02265     0.01623   
  20   0.012 +/-   0.013 +/-   0.008 +/-   0.013 +/-   0.013 +/-   0.010 +/-   0.012 +/-   0.016 +/-   
         0.12176     0.08863     0.05592     0.03930     0.02858     0.01905     0.02362     0.02322   
  50   0.005 +/-   0.028 +/-   0.018 +/-   0.010 +/-   0.010 +/-   0.010 +/-   0.011 +/-   0.012 +/-   
         0.04816     0.09862     0.04181     0.02301     0.02007     0.01040     0.01078     0.01331   
 100   0.010 +/-   0.006 +/-   0.011 +/-   0.012 +/-   0.013 +/-   0.011 +/-   0.011 +/-   0.011 +/-   
         0.05136     0.02660     0.02348     0.01906     0.01725     0.00920     0.00927     0.00801   
 200   0.011 +/-   0.013 +/-   0.012 +/-   0.011 +/-   0.010 +/-   0.010 +/-   0.012 +/-   0.011 +/-   
         0.05310     0.03826     0.02014     0.01716     0.00940     0.00745     0.00716     0.00496   
 500   0.013 +/-   0.008 +/-   0.011 +/-   0.012 +/-   0.012 +/-   0.011 +/-   0.012 +/-   0.012 +/-   
         0.03374     0.01458     0.01471     0.01177     0.00873     0.00597     0.00509     0.00354   
1000   0.009 +/-   0.012 +/-   0.010 +/-   0.012 +/-   0.012 +/-   0.012 +/-   0.012 +/-   0.012 +/-   
         0.02291     0.02247     0.01068     0.00878     0.00639     0.00508     0.00347     0.00300   
2000   0.011 +/-   0.011 +/-   0.013 +/-   0.013 +/-   0.011 +/-   0.011 +/-   0.011 +/-   0.011 +/-   
         0.01723     0.01354     0.01446     0.01031     0.00552     0.00332     0.00275     0.00209   
</pre>

This is much more like what I expect from a similarity function!

</p>
<h2>Effect of threshold on the sss score</h2>
<p>

I picked a threshold of 0.8 because that's a pretty common value and
few will object to it. It might be that a different threshold is
better. How does the sss score change as a function of the threshold?

</p><p>

One obvious implementation is to call sss() with a different threshold each time:

<pre class="code">
&gt;&gt;&gt; <b>arena = chemfp.load_fingerprints("chembl_21.rdkit2048.fpb")</b>
&gt;&gt;&gt; <b>subset1 = make_subset(arena, 1000)</b>
&gt;&gt;&gt; <b>subset2 = make_subset(arena, 1000)</b>
&gt;&gt;&gt; <b>sss(subset1, subset2, threshold=0.9)</b>
0.0014073436068272435
&gt;&gt;&gt; <b>sss(subset1, subset2, threshold=0.8)</b>
0.006656850064948667
&gt;&gt;&gt; <b>sss(subset1, subset2, threshold=0.7)</b>
0.038875826785241686
&gt;&gt;&gt; <b>sss(subset1, subset2, threshold=0.6)</b>
0.2569320521578928
</pre>

(As you can see, while I managed to normalize the score as a function
of set size, it's still threshold dependent.)

</p><p>

The obvious implementation is perfectly reasonable. There's a more
computationally efficient way. You'll notice that each calculation
ends up redoing the calculation before it, because all compounds with
at least 0.9 are also within at least 0.8 similarity, etc.

</p><p>

Chemfp has another way to get the same values. The
<tt>cumulative_score_all()</tt> method takes extra arguments to select
the min and max values to use, and if the summation should include or
exclude the endpoints. I'll get a SearchResults instance and ask for
its help:

<pre class="code">
&gt;&gt;&gt; <b>results = search.threshold_tanimoto_search_arena(</b>
...                  <b>subset1, subset2, threshold=0.6)</b>
&gt;&gt;&gt; 
&gt;&gt;&gt; <b>help(results.cumulative_score_all)</b>
cumulative_score_all(self, min_score=None, max_score=None, interval='[]')
method of chemfp.search.SearchResults instance
    The sum of all scores in all rows which are between *min_score* and *max_score*
    
    Using the default parameters this returns the sum of all of
    the scores in all of the results. With a specified range this
    returns the sum of all of the scores in that range. The
    cumulative score is also known as the raw score.
    
    The default *min_score* of None is equivalent to -infinity.
    The default *max_score* of None is equivalent to +infinity.
    
    The *interval* parameter describes the interval end
    conditions. The default of "[]" uses a closed interval,
    where min_score &lt;= score &lt;= max_score. The interval "()"
    uses the open interval where min_score &lt; score &lt; max_score.
    The half-open/half-closed intervals "(]" and "[)" are
    also supported.
    
    :param min_score: the minimum score in the range.
    :type min_score: a float, or None for -infinity
    :param max_score: the maximum score in the range.
    :type max_score: a float, or None for +infinity
    :param interval: specify if the end points are open or closed.
    :type interval: one of "[]", "()", "(]", "[)"
    :returns: a floating point count
</pre>

I'll use the <tt>min_score</tt> parameter. First, I'll find all
fingerprints with a similarity threshold of 0.6, which is the lowest
score I'm concerned about, and, to reduce complexity later on, I'll
merge the "300*" and the product of the sizes into a single scaling
factor:

<pre class="code">
&gt;&gt;&gt; <b>results = search.threshold_tanimoto_search_arena(</b>
...                  <b>subset1, subset2, threshold=0.6)</b>
&gt;&gt;&gt; <b>scaling = 300/len(subset1)/len(subset2) </b>
</pre>

Then I'll compute the scores for each threshold, and get the same
results as earlier.

<pre class="code">
&gt;&gt;&gt; <b>scaling*results.cumulative_score_all(min_score=0.9)</b>
0.0014073436068272435
&gt;&gt;&gt; <b>scaling*results.cumulative_score_all(min_score=0.8)</b>
0.006656850064948667
&gt;&gt;&gt; <b>scaling*results.cumulative_score_all(min_score=0.7)</b>
0.038875826785241686
&gt;&gt;&gt; <b>scaling*results.cumulative_score_all(min_score=0.6)</b>
0.2569320521578928
</pre>

</p><p>
For fun, I put it in a loop and computed more thresholds:

<pre class="code">
&gt;&gt;&gt; <b>scaling = 300/len(subset1)/len(subset2) </b>
&gt;&gt;&gt; <b>for threshold in (0.99, 0.95, 0.90, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6):</b>
...   <b>score = scaling * results.cumulative_score_all(min_score=threshold)</b>
...   <b>print("%.2f %7.4f" % (threshold, score))</b>
... 
0.99  0.0003
0.95  0.0006
0.90  0.0014
0.85  0.0030
0.80  0.0067
0.75  0.0166
0.70  0.0389
0.65  0.0921
0.60  0.2569
</pre>

A quick test now shows that computing the similarities once and
finding the cumulative sum for the 9 threshold levels is about 4x
faster than doing 9 independent threshold calculations.
</p></p></p></p>
<p>
<em><a href="http://www.dalkescientific.com/writings/diary/archive/2017/03/20/fingerprint_set_similarity.html">March 20, 2017 12:00 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.europython-society.org/" title="EuroPython Society">EuroPython Society</a></h3>


<h4><a href="http://www.europython-society.org/post/158623236705">EuroPython 2017: We have liftoff!</a></h4>
<p>
<p>We are excited to announce the launch of the EuroPython 2017 website.<br /></p><a href="https://ep2017.europython.eu/" target="_blank"><img src="http://68.media.tumblr.com/1320fa8d295646bd30c844abb1ef2d14/tumblr_inline_on3wnnTsgy1swlzyf_540.png" alt="image" /></a><p class="center"><a href="https://ep2017.europython.eu/" target="_blank">https://ep2017.europython.eu/</a></p>
<p class="center">The EuroPython conference will take place in sunny<br /><b>Rimini, Italy</b>, this year, from <b>July 9 - 16</b>.</p>

<br /><h3>EuroPython 2017 - The European Python Conference</h3>

<p>Here&rsquo;s an overview of what you can expect in Rimini:</p>

<blockquote>
<p>We will start with a <b>Beginner&rsquo;s Day workshop </b>and a <b>Django Girls workshop </b>on Sunday, July 9. </p>

<p>The main 5 conference days follow, packed with <b>keynotes, talks, training sessions, help desks, interactive sessions, panels and poster sessions</b>.</p>

<p>A complete <b>PyData EuroPython</b> is included as well.</p>

<p>The two weekend days after the conference, July 15 and 16, are reserved for <b>sprints</b>.</p>
</blockquote>

<p>Overall, we will again have 8 days worth of great Python content, arranged in over 200 sessions, waiting for you.</p>

<p>In short:</p><ul><li><b>Sunday, July 9:</b> Beginners&rsquo; Day Workshop and other workshops</li><li><b>Monday - Friday, July 10-14</b>: Conference talks, keynotes, training, etc.<br /></li><li><b>Saturday, Sunday, July 15-16</b>: Sprints</li>
</ul><h3>Meet our sponsors</h3>

<p>All this would not be possible without the generous help of our launch sponsors:</p><ul><li><a href="http://www.intel.com/" target="_blank">Intel</a></li>
<li><a href="http://cfm.fr/" target="_blank">CFM</a></li>
<li><a href="https://www.facebook.com/" target="_blank">Facebook</a></li>
<li><a href="https://www.microsoft.com/" target="_blank">Microsoft</a></li>
<li><a href="http://1000mercis.com/" target="_blank">numberly</a></li>
<li><a href="http://www.criteo.com/" target="_blank">criteo labs</a></li>
<li><a href="https://www.jetbrains.com/pycharm/" target="_blank">JetBrains</a></li>
<li><a href="http://kiwi.com/" target="_blank">Kiwi.com</a></li>
<li><a href="http://www.yelp.com/" target="_blank">yelp</a></li>
<li><a href="http://2ndquadrant.com/" target="_blank">2ndQuadrant</a></li>
<li><a href="http://www.trustyou.com/" target="_blank">TrustYou</a></li>
<li><a href="http://www.demonware.net/" target="_blank">demonware</a></li>
<li><a href="http://www.riverbankcomputing.com/" target="_blank">Riverbank</a></li>
<li><a href="https://plone.org/" target="_blank">Plone Foundation</a></li>
</ul><p>


In the coming days, we will announce the start of the Call for Proposals and Early Bird Ticket sales. Please watch <a href="http://blog.europython.eu/" target="_blank">our EuroPython blog</a> for updates.</p><p>


Enjoy,<br />–<br /><a href="https://ep2017.europython.eu/en/europython/team/" target="_blank">EuroPython 2017 Team</a><br /><a href="http://www.europython-society.org/" target="_blank">EuroPython Society</a></p></p>
<p>
<em><a href="http://www.europython-society.org/post/158623236705">March 20, 2017 10:30 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://blog.europython.eu/" title="EuroPython Blog">EuroPython</a></h3>


<h4><a href="http://blog.europython.eu/post/158623131327">EuroPython 2017: We have liftoff!</a></h4>
<p>
<p>We are excited to announce the launch of the EuroPython 2017 website.<br /></p><a href="https://ep2017.europython.eu/" target="_blank"><img src="http://68.media.tumblr.com/1320fa8d295646bd30c844abb1ef2d14/tumblr_inline_on3wnnTsgy1swlzyf_540.png" alt="image" /></a><p class="center"><a href="https://ep2017.europython.eu/" target="_blank">https://ep2017.europython.eu/</a></p>
<p class="center">The EuroPython conference will take place in sunny<br /><b>Rimini, Italy</b>, this year, from <b>July 9 - 16</b>.</p>

<br /><h3>EuroPython 2017 - The European Python Conference</h3>

<p>Here&rsquo;s an overview of what you can expect in Rimini:</p>

<blockquote>
<p>We will start with a <b>Beginner&rsquo;s Day workshop </b>and a <b>Django Girls workshop </b>on Sunday, July 9. </p>

<p>The main 5 conference days follow, packed with <b>keynotes, talks, training sessions, help desks, interactive sessions, panels and poster sessions</b>.</p>

<p>A complete <b>PyData EuroPython</b> is included as well.</p>

<p>The two weekend days after the conference, July 15 and 16, are reserved for <b>sprints</b>.</p>
</blockquote>

<p>Overall, we will again have 8 days worth of great Python content, arranged in over 200 sessions, waiting for you.</p>

<p>In short:</p><ul><li><b>Sunday, July 9:</b> Beginners&rsquo; Day Workshop and other workshops</li><li><b>Monday - Friday, July 10-14</b>: Conference talks, keynotes, training, etc.<br /></li><li><b>Saturday, Sunday, July 15-16</b>: Sprints</li>
</ul><h3>Meet our sponsors</h3>

<p>All this would not be possible without the generous help of our launch sponsors:</p><ul><li><a href="http://www.intel.com/" target="_blank">Intel</a></li>
<li><a href="http://cfm.fr/" target="_blank">CFM</a></li>
<li><a href="https://www.facebook.com/" target="_blank">Facebook</a></li>
<li><a href="https://www.microsoft.com/" target="_blank">Microsoft</a></li>
<li><a href="http://1000mercis.com/" target="_blank">numberly</a></li>
<li><a href="http://www.criteo.com/" target="_blank">criteo labs</a></li>
<li><a href="https://www.jetbrains.com/pycharm/" target="_blank">JetBrains</a></li>
<li><a href="http://kiwi.com/" target="_blank">Kiwi.com</a></li>
<li><a href="http://www.yelp.com/" target="_blank">yelp</a></li>
<li><a href="http://2ndquadrant.com/" target="_blank">2ndQuadrant</a></li>
<li><a href="http://www.trustyou.com/" target="_blank">TrustYou</a></li>
<li><a href="http://www.demonware.net/" target="_blank">demonware</a></li>
<li><a href="http://www.riverbankcomputing.com/" target="_blank">Riverbank</a></li>
<li><a href="https://plone.org/" target="_blank">Plone Foundation</a></li>
</ul><p>


In the coming days, we will announce the start of the Call for Proposals and Early Bird Ticket sales. Please watch <a href="http://blog.europython.eu/" target="_blank">our EuroPython blog</a> for updates.</p><p>


Enjoy,<br />–<br /><a href="https://ep2017.europython.eu/en/europython/team/" target="_blank">EuroPython 2017 Team</a><br /><a href="http://www.europython-society.org/" target="_blank">EuroPython Society</a></p></p>
<p>
<em><a href="http://blog.europython.eu/post/158623131327">March 20, 2017 10:23 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://pybit.es/" title="PyBites">PyBites</a></h3>


<h4><a href="http://pybit.es/codechallenge11.html">Code Challenge 11 - Generators for Fun and Profit</a></h4>
<p>
<p>A new week, a new 'bite' of Python coding! After <a href="http://pybit.es/generators.html">last week's article on generators</a> we will get you to practice a bit more with them in our new challenge. Good luck and have fun.</p></p>
<p>
<em><a href="http://pybit.es/codechallenge11.html">March 20, 2017 08:00 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://importpython.com/blog/feed/" title="ImportPython Blog">Import Python</a></h3>


<h4><a href="http://importpython.com/blog/post/importpython-116-recover-deleted-python-code-habits-effective-python-learning-and-more">ImportPython 116 - Recover deleted Python Code,  Habits for effective Python learning and more</a></h4>
<p>
<table>
                    <tbody><tr>
                        <td class="container-padding content" align="left">
                            <div class="title">
                                Worthy
                                Read
                            </div>
                            <br />
                            
                                <div class="subtitle">
                                    <a href="https://gist.github.com/simonw/8aa492e59265c1a021f5c5618f9e6b12" target="_blank">How to recover lost Python source code if it's still resident in-memory</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            I used "git checkout --" on the wrong file and managed to delete the code I had just written... but it was still running in a process in a docker container. Here's how I got it back, using https://pypi.python.org/pypi/pyrasite/ and https://pypi.python.org/pypi/uncompyle6 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">core-python</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="http://4url.in/2XpV5Nkx/" target="_blank">Manual Kinks in your CI/CD Pipeline?</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            See The 3 Use Cases of How Our DevOp Teams Automate Development 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">sponsor</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="http://dvt.name/2017/03/10/pep-308-and-why-i-still-hate-python/" target="_blank">PEP 308 and why I still hate Python</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            I’m not a Python guy, but it seems that every job I’ve had has slowly pushed me into doing more and more Python until I end up doing nothing but Python all day. And I hate doing Python all day. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">core-python</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="http://python-catalin.blogspot.com/2017/03/strange-code-in-python.html" target="_blank">Strange code in python.</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Code snippets that makes you wonder what's happening? 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">code snippets</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://www.podcastinit.com/episode-100-metpy-with-ryan-may-sean-arms-and-john-leeman/" target="_blank">MetPy: Taming The Weather With Python – Episode 100</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            What’s the weather tomorrow? That’s the question that meteorologists are always trying to get better at answering. This week the developers of MetPy discuss how their project is used in that quest and the challenges that are inherent in atmospheric and weather research. It is a fascinating look at dealing with uncertainty and using messy, multidimensional data to model a massively complex system. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">podcast</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="http://djangoweekly.com/newsletter/no/30/" target="_blank">Django Weekly Issue 30</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            If you use Django framework and want to keep updated with what's happening in the Django world, check out django weekly 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">newsletter</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://www.crowdcast.io/e/learning/register" target="_blank">Habits for effective Python learning</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            When learning a programming language, how do you know whether the effort you're putting in is working or whether you're wasting your time?. We'll be chatting with Michael Herman and Evan Moore about techniques you can use to be more effective during your Python learning adventures. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">video</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="http://4url.in/bQkz7ZpB/" target="_blank">Find Top Developers Fast. The search is over.</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Let Toptal connect you with the world's most talented developers. Get started today. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">sponsor</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="http://gregoryszorc.com/blog/2017/03/13/from-__past__-import-bytes_literals/" target="_blank">from __past__ import bytes_literals</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="http://www.infoworld.com/article/3044512/application-development/intels-python-distribution-provides-a-major-math-boost.html" target="_blank">Intel's Python distribution provides a major math boost</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            The still-in-beta Python distribution uses Math Kernel Library to speed up processing on Intel hardware. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">intel</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://medium.com/zingle/customer-data-driven-light-shows-7800883182bc#.utvsgwxol" target="_blank">Customer Data Driven Light Shows</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                    
                                        <em><div class="body-text">IOT</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://github.com/Heumi/Fast_Multi_Style_Transfer-tf" target="_blank">Fast_Multi_Style_Transfer-tf</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Implementation of Google Brain's A Learned Representation For Artistic Style in Tensorflow. You can mix various type of style images using just One Model and it's still Fast. 
                                        
                                    <br />
                            
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://blog.fugue.co/2017-03-06-diagnosing-and-fixing-memory-leaks-in-python.html" target="_blank">Diagnosing and Fixing Memory Leaks in Python</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            One thing we've learned from building complex software for the cloud is that a language is only as good as its debugging and profiling tools. Logic errors, CPU spikes, and memory leaks are inevitable, but a good debugger, CPU profiler, and memory profiler can make finding these errors significantly easier and faster. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">debugging</div>,</em>
                                    
                                        <em><div class="body-text">memory leaks</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://blog.dominodatalab.com/fitting-gaussian-process-models-python/" target="_blank">Fitting Gaussian Process Models in Python</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                    
                                        <em><div class="body-text">numpy</div>,</em>
                                    
                                        <em><div class="body-text">stats</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://pythonspot.com/k-nearest-neighbors/" target="_blank">k nearest neighbors</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                    
                                        <em><div class="body-text">machine learning</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://www.andreagrandi.it/2017/03/12/creating-a-production-ready-api-with-python-and-django-rest-framework-part-3/" target="_blank">Creating a production ready API with Python and Django Rest Framework – part 3</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                    
                                        <em><div class="body-text">django</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://code.tutsplus.com/articles/dry-your-python-code-with-decorators--cms-28208" target="_blank">DRY Your Python Code With Decorators</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                    
                                        <em><div class="body-text">decorators</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://blog.dbrgn.ch/2017/3/10/write-a-collectd-python-plugin/" target="_blank">How to Write a Collectd Plugin with Python?</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Collectd is a system statistics collection daemon. It gathers a lot of information about the system it's running on, and passes it on to a software that can process and visualize that information, e.g. Grafana. Collectd already brings along a lot of built-in plugins to gather information about the system load, the network traffic, available entropy, various sensors, etc. But sometimes there's a value that you want to log which is not covered by an existing plugin. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">collectd</div>,</em>
                                    
                                        <em><div class="body-text">monitoring deployments</div></em>
                                    
                                </div>
                                <br />
                            
                        
                        <br />
                        
                        
                        
                        <div class="title">
                            Projects
                        </div>
                        <div class="hr"></div>
                        <br />
                        
                            <div class="subtitle">
                                <a href="https://github.com/yunjey/pytorch-tutorial" target="_blank">pytorch-tutorial</a> -
                                <small>1160 Stars, 158
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            Tutorial for researchers to learn deep learning with pytorch. 
                        </div>
                        <br />
                    
                            <div class="subtitle">
                                <a href="https://github.com/abhishekkrthakur/clickbaits_revisited" target="_blank">clickbaits_revisited</a> -
                                <small>97 Stars, 13
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            Deep learning models to identify clickbaits taking content into consideration. 
                        </div>
                        <br />
                    
                            <div class="subtitle">
                                <a href="https://github.com/asrp/pymetaterp" target="_blank">pymetaterp</a> -
                                <small>19 Stars, 0
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            A python parser that builds python ASTs in 502 lines of python without using modules. 
                        </div>
                        <br />
                    
                            <div class="subtitle">
                                <a href="https://github.com/absent1706/sqlalchemy-mixins" target="_blank">sqlalchemy-mixins</a> -
                                <small>19 Stars, 0
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            Active Record, Django-like queries, nested eager load and beauty __repr__ for SQLAlchemy 
                        </div>
                        <br />
                    
                            <div class="subtitle">
                                <a href="https://github.com/NativeInstruments/newrelic-cli" target="_blank">newrelic-cli</a> -
                                <small>13 Stars, 0
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            Newrelic client written in Python providing both CLI and Python interfaces. 
                        </div>
                        <br />
                    
                    
                        
                            <img src="http://www.launchbit.com/taz-pixel/11284-6650-111" />
                        
                            <img src="http://www.launchbit.com/taz-pixel/11284-6596-111" />
                        
                    
                    
                </td>
            </tr>
        </tbody></table></p>
<p>
<em><a href="http://importpython.com/blog/post/importpython-116-recover-deleted-python-code-habits-effective-python-learning-and-more">March 20, 2017 07:17 AM</a></em>
</p>





<h2>March 19, 2017</h2>




<hr /><h3 class="post"><a href="http://pybit.es/" title="PyBites">PyBites</a></h3>


<h4><a href="http://pybit.es/twitter_digest_201711.html">Twitter digest 2017 week 11</a></h4>
<p>
<p>Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.</p></p>
<p>
<em><a href="http://pybit.es/twitter_digest_201711.html">March 19, 2017 02:42 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://slott-softwarearchitect.blogspot.com/search/label/python" title="S.Lott-Software Architect">S. Lott</a></h3>


<h4><a href="http://slott-softwarearchitect.blogspot.com/2017/03/simple-csv-transformations.html">Simple CSV Transformations</a></h4>
<p>
Here's an interesting question:<br /><br /><div>I came across your blog post "<a href="https://github.com/slott56/introduction-python-csv" target="_blank">Introduction to using Python to process CSV files</a>" as I'm looking to do something I'd&nbsp;<i>think</i>&nbsp;is easy in Python but I don't know how to do it.&nbsp;</div><div><br /></div><div>I simply want to examine a column then create a new column based on an if-then on the original column. So if my CSV has a "gender" field I'd like to do the Python equivalent of this SQL statement:&nbsp;</div><div><br class="m_8853789356216301986gmail-Apple-interchange-newline" /></div><blockquote><i>case when gender = 'M' then 1 else 0 end as gender_m, case when gender = 'F' then 1 else 0 end as gender_f,...</i></blockquote><div><br /></div><div>I can do it in Pandas but my CSVs are too big and I run into memory issues.&nbsp;</div><div><br /></div>There are a number of ways to tackle this.<br /><br />First -- and foremost -- this is almost always just one step in a much longer and more complex set of operations. It's a little misleading to read-and-write a CSV file to do this.<br /><br />A <b>little</b> misleading.<br /><br />It's not wrong to write a file with expanded data. But the "incrementally write new files" process can become rather complex. If we have a large number of transformations, we can wind up with many individual file-expansion steps. These things often grow organically and can get out of control. A complex set of steps should probably be collapsed into a single program that handles all of the expansions at once.<br /><br />This kind of file-expansion is simple and fast. It can open a door previously closed by the in-memory problem &nbsp;of trying to do the entire thing in pandas.<br /><br />The general outline looks like this<br /><br /><pre>from pathlib import Path<br />import csv<br />source_path = Path("some_file.csv")<br />target_path = Path(source_path.stem + "_1").with_suffix('.csv')<br /><br />def transform(row):<br />    return row<br /><br />with source_path.open() as source_file:<br />&nbsp; &nbsp; with target_path.open('w', newline='') as target_file:<br />&nbsp; &nbsp; &nbsp; &nbsp; reader = csv.DictReader(source_file)<br />&nbsp; &nbsp; &nbsp; &nbsp; columns =&nbsp; reader.fieldnames&nbsp;+ ['gender_m', 'gender_f']<br />&nbsp; &nbsp; &nbsp; &nbsp; writer = csv.DictWriter(target_file, columns)<br />&nbsp; &nbsp; &nbsp; &nbsp; writer.writeheader()<br />&nbsp; &nbsp; &nbsp; &nbsp; for row in reader:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new_row = transform(row)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; writer.writerow(new_row)<br /><br /></pre>The goal is to be able put some meaningful transformation processing in place of the build new_row comment.<br /><br />The overall approach is this.<br /><br />1. Create <span>Path</span> objects to refer to the relevant files.<br /><br />2. Use <span>with</span>-statement context managers to handle the open files. This assures that the files are always properly closed no matter what kinds of exceptions are raised.<br /><br />3. Create a dictionary-based reader for the input. &nbsp;Add the additional columns and create a dictionary-based writer for the output. This allows the processing to work with each row of data as a dictionary.<br />This presumes that the data file actually has a single row of heading information with column names.<br /><br />If column names are missing, then a fieldnames attribute can be provided when creating the DictReader(), like this: <span>csv.DictReader(source_file, ['field', 'field', ...])</span>.<br /><br />The <b>for</b> statement works because a csv Reader is an iterator over each row of data.<br /><br />I've omitted any definition of the transformational function. Right now, it just returns each row unmodified. We'd really like it to do some useful work.<br /><br /><h2>Building The New Row</h2>The transformation function needs to build a new row from an existing row.<br /><br />Each row will be a Python dictionary. A dictionary is a mutable object. We aren't <b>really</b> building a completely new object -- that's a waste of memory. We'll modify the <span>row</span> object, and return it anyway. It will involve a microscopic redundancy of creating two references to the same dictionary object, one known by the variable name <span>row</span> and the other know by <span>new_row</span>.<br /><br />Here's an example body for <span>transform()</span><br /><br /><pre>def transform(row):<br />    row['gender_m'] = 1 if row['gender'] == 'M' else 0<br />    row['gender_f'] = 1 if row['gender'] == 'F' else 0<br />    return row<br /></pre><br />This will build two new keys in the row dictionary. The exact two keys added to the fieldnames to write a new file.<br /><br />Each key be associated with a value computed by a simple expression. In this case, the logical if-else operator is used to map a boolean value, <span>row['gender'] == 'M'</span>, to one of two integer values, 1 or 0.<br /><br />If this is confusing -- and it can be -- this can also be done with if statements instead of expressions.<br /><br /><pre>def transform(row):<br />    if row['gender'] == 'M':<br />        row['gender_m'] = 1<br />    else:<br />        row['gender_m'] = 0<br />    row['gender_f'] = 1 if row['gender'] == 'F' else 0<br />    return row<br /></pre><br />I only rewrite the 'M' case. I'll leave the rewrite of the 'F' case to the reader.<br /><h2>Faster Processing with a Generator</h2>We can simplify the body of the script slightly. This will make it work a hair faster. The following statements involve a little bit of needless overhead.<br /><br /><pre>&nbsp; &nbsp; &nbsp; &nbsp; for row in reader:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new_row = transform(row)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; writer.writerow(new_row)<br /></pre><br />We can change this as follows:<br /><br /><pre>&nbsp; &nbsp; &nbsp; &nbsp; writer.writerows(transform(row) for row in reader)<br /></pre><br />This uses a generator expression, <span>transform(row) for row in reader</span>, to build individually transformed rows from a source of data. This doesn't involve executing two statements for each row of data. Therefore, it's faster.<br /><br />We can also reframe it like this.<br /><br /><pre>&nbsp; &nbsp; &nbsp; &nbsp; writer.writerows(map(transform, reader))<br /></pre><br />In this example, we've replaced the generator expression with the <span>map()</span> function. This applies the <span>transform()</span> function to each row available in the reader. <br /><br />In both cases, the <span>writer.writerows()</span> consumes the data produced by the generator expression or the <span>map()</span> function to create the output file.<br /><br />The idea is that we can make the transform() function as complex as we need. We just have to be sure that all the new field names are handled properly when creating the writer object.<br /><br /></p>
<p>
<em><a href="http://slott-softwarearchitect.blogspot.com/2017/03/simple-csv-transformations.html">March 19, 2017 07:07 AM</a></em>
</p>





<h2>March 18, 2017</h2>




<hr /><h3 class="post"><a href="http://dspillustrations.com/" title="DSPIllustrations.com">DSPIllustrations.com</a></h3>


<h4><a href="http://dspillustrations.com/pages/posts/misc/fourier-series-and-harmonic-approximation.html">Fourier Series and Harmonic Approximation</a></h4>
<p>
<div class="cell border-box-sizing code_cell rendered">

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="The-Fourier-Series-and-Harmonic-Approximation">The Fourier Series and Harmonic Approximation<a class="anchor-link" href="http://dspillustrations.com/static/dspillustrations.rss.xml#The-Fourier-Series-and-Harmonic-Approximation">¶</a></h1><p>In this article, we will walk through the origins of the Fourier transform: the Fourier Series. The Fourier series takes a periodic signal x(t) and describes it as a sum of sine and cosine waves. Noting that sine and cosine are themselves periodic functions, it becomes clear that x(t) is also a periodic function.</p>
<p>Mathematically, the Fourier series is described as follows. Let x(t) be a periodic function with period T, i.e.</p>
x(t)=x(t+nT), n\in\mathbb{Z}.<p></p>
<p>Then, we can write x(t) as a Fourier series by</p>
x(t)=\frac{a_0}{2}+\sum_{n=1}^{\infty}a_n\cos(2\pi \frac{nt}{T})+b_n\sin(2\pi\frac{nt}{T}),<p>where a_n and b_n are the coefficients of the Fourier series. They can be calculated by
\begin{align}a_n&amp;=\frac{2}{T}\int_0^Tx(t)\cos(2\pi \frac{nt}{T})dt\\
b_n&amp;=\frac{2}{T}\int_0^Tx(t)\sin(2\pi \frac{nt}{T})dt\end{align}.</p>
<p>Note that for a function with period T, the frequencies of the sines and cosines are \frac{1}{T}, \frac{2}{T}, \frac{3}{T}, \dots, i.e. they are multiples of the fundamental frequency \frac{1}{T}, which is the inverse period duration of the function. Therefore the frequency \frac{n}{T} is called the nth harmonic. The name harmonic stems from the fact for the human ear frequencies with integer ratios sound "nice", and the frequencies are all integer multiples of the fundamental frequency.</p>
<p>Let us verify the calculation of the Fourier coefficients and the function reconstruction numerically. First, we ...</p></div></div></div></p>
<p>
<em><a href="http://dspillustrations.com/pages/posts/misc/fourier-series-and-harmonic-approximation.html">March 18, 2017 10:55 PM</a></em>
</p>

    </div>
  </div>

  <div id="left-hand-navigation">
    <div id="menu">
      <ul class="level-one">
          <li>
          <ul class="level-two">
             <li><a href="rss20.xml">RSS feed</a></li>
             <li><a href="titles_only.html">Titles Only</a></li>
             <li><a href="http://www.planetplanet.org/">Powered by Planet!</a></li>
	  </ul></li>
	  <li>Other Python Planets
            <ul class="level-two">
              <li><a href="http://terri.toybox.ca/python-soc/">Python Summer of Code</a></li>
              <li><a href="http://www.afpy.org/planet/">Planet Python Francophone</a></li>
              <li><a href="http://planeta.python.org.ar/">Planet Python Argentina</a></li>
              <li><a href="http://planetpython.matrix.jp/planet/">Planet Python Japan</a></li>
              <li><a href="http://wiki.python.org.br/planet/">Planet Python Brasil</a></li>
              <li><a href="http://planet.python.or.id">Planet Python Indonesia</a></li>
              <li><a href="http://pl.python.org/planeta/">Planet Python Poland</a></li>
  	  </ul></li>
	  <li>Python Libraries
          <ul class="level-two">
            <li><a href="http://planet.pysoy.org/">PySoy</a></li>
            <li><a href="http://planet.scipy.org/">SciPy</a></li>
            <li><a href="http://planet.sympy.org/">SymPy</a></li>
            <li><a href="http://planet.twistedmatrix.com/">Twisted</a></li>
	  </ul></li>
	  <li>Python/Web Planets
          <ul class="level-two">
            <li><a href="http://planet.cherrypy.org/">CherryPy</a></li>
            <li><a href="http://www.djangoproject.com/community/">Django Community</a></li>
            <li><a href="http://planet.plone.org/">Plone</a></li>
            <li><a href="http://planet.turbogears.org/">Turbogears</a></li>
	  </ul></li>
	  <li>Other Languages
          <ul class="level-two">
            <li><a href="http://planet.haskell.org/">Haskell</a></li>
            <li><a href="http://planet.lisp.org/">Lisp</a></li>
            <li><a href="http://planet.parrotcode.org/">Parrot</a></li>
            <li><a href="http://planet.perl.org/">Perl</a></li>
            <li><a href="http://planetruby.0x42.net/">Ruby</a></li>
	  </ul></li>
	  <li>Databases
          <ul class="level-two">
	    <li><a href="http://www.planetmysql.org/">MySQL</a></li>
	    <li><a href="http://planet.postgresql.org/">PostgreSQL</a></li>
	    <li><a href=""></a></li>
	  </ul></li>
	  <li>Subscriptions
          <ul class="level-two">
<li><a href="opml.xml">[OPML feed]</a></li>
<li><a href="" title="">"Eric Wu's Pythonfilter"</a>
</li>
<li><a href="http://blaag.haard.se/" title="Fredrik Håård's Blaag">"Fredrik Håård's Blaag"</a>
</li>
<li><a href="http://freshfoo.com/" title="Menno's Musings">"Menno's Musings"</a>
</li>
<li><a href="http://mjtokelly.blogspot.com/search/label/Python" title="mokelly's devlog">"Michael J.T. O'Kelly"</a>
</li>
<li><a href="http://speno.blogspot.com/" title="Speno's Pythonic Avocado">"Speno's Pythonic Avocado"</a>
</li>
<li><a href="http://william-os4y.livejournal.com/" title="William's journal">"William's Journal"</a>
</li>
<li><a href="" title="">2General</a>
</li>
<li><a href="http://dev.2degreesnetwork.com/" title="2degrees Developers">2degrees</a>
</li>
<li><a href="http://devblog.4teamwork.ch/" title="Category: Planet Python | Python Tales and Plone Stories">4teamwork</a>
</li>
<li><a href="" title="">A Little Bit of Python</a>
</li>
<li><a href="https://emptysqua.re/blog/category/python/index.xml" title="Python on A. Jesse Jiryu Davis">A. Jesse Jiryu Davis</a>
</li>
<li><a href="http://ablog.readthedocs.org" title="ABlog">ABlog for Sphinx</a>
</li>
<li><a href="https://engineering.aweber.com" title="Python – ENGINEERING @ AWEBER">AWeber Engineering</a>
</li>
<li><a href="http://www.artima.com/weblogs/index.jsp?blogger=aahz" title="Aahz's Weblog">Aahz</a>
</li>
<li><a href="http://masnun.rocks/tags/python/index.xml" title="masnun.rocks()">Abu Ashraf Masnun</a>
</li>
<li><a href="http://techarttiki.blogspot.com/search/label/python" title="Tech Art Tiki">Adam Pletcher</a>
</li>
<li><a href="" title="">Adrián Deccico</a>
</li>
<li><a href="https://agendaless.com/blog/?category=python" title="Agendaless Blog">Agendaless Consulting</a>
</li>
<li><a href="http://alstatr.blogspot.com/search/label/Python" title="Analysis with Programming">Al-Ahmadgaid Asaad</a>
</li>
<li><a href="http://marduk.ghost.io/" title="Python - Albert Hopkins">Albert Hopkins</a>
</li>
<li><a href="http://alecmunro.blogspot.com/search/label/python" title="Experiments in public">Alec Munro</a>
</li>
<li><a href="http://blog.aclark.net" title="Alex Clark's Blog - Posts in Python">Alex Clark</a>
</li>
<li><a href="" title="">Alex Gaynor</a>
</li>
<li><a href="http://alextechrants.blogspot.com/search/label/python" title="Alex's Tech Rants">Alex Grönholm</a>
</li>
<li><a href="https://alexmorozov.github.io/" title="CTO with a CEO flavour">Alex Morozov</a>
</li>
<li><a href="http://limi.net" title="On Python">Alexander Limi</a>
</li>
<li><a href="" title="">Alexandre Bourget</a>
</li>
<li><a href="http://www.alexconrad.org/search/label/python" title="Alex Conrad">Alexandre Conrad</a>
</li>
<li><a href="http://peadrop.com/blog" title="Alexandre Vassalotti » Python">Alexandre Vassalotti</a>
</li>
<li><a href="http://www.lexev.org/en/" title="Alexey Evseev's blog">Alexey Evseev</a>
</li>
<li><a href="" title="">Ali Afshar</a>
</li>
<li><a href="http://akaptur.github.com/" title="Category: python, | Allison Kaptur">Allison Kaptur</a>
</li>
<li><a href="" title="">Amir Rachum</a>
</li>
<li><a href="http://echorand.me/" title="Programming and Writing about it - Python">Amit Saha</a>
</li>
<li><a href="http://blog.amjith.com" title="Brain Spill - python">Amjith Ramanujam</a>
</li>
<li><a href="http://amjith.blogspot.com/search/label/python" title="Core Dump">Amjith Ramanujam</a>
</li>
<li><a href="https://www.amvtek.com/blog/" title="AmvTek blog">AmvTek</a>
</li>
<li><a href="http://anarc.at/tag/python-planet/" title="pages tagged python-planet">Anarcat</a>
</li>
<li><a href="http://pyswarm.blogspot.com/" title="Aeonic - from UML to Python">Anastasios Hatzis</a>
</li>
<li><a href="http://techtonik.rainforce.org/search/label/python" title="another day another vice another roll of the dice">Anatoly Techtonik</a>
</li>
<li><a href="http://aroberge.blogspot.com/" title="Only Python">Andre Roberge</a>
</li>
<li><a href="" title="">Andrea Grandi</a>
</li>
<li><a href="http://www.dalkescientific.com/writings/diary/index.html" title="Andrew Dalke's writings">Andrew Dalke</a>
</li>
<li><a href="" title="">Andriy Drozdyuk</a>
</li>
<li><a href="http://mindref.blogspot.com/search/label/python" title="Mind Reference">Andriy Kornatskyy</a>
</li>
<li><a href="http://kendriu.com/" title="kendriu writes...">Andrzej Skupień</a>
</li>
<li><a href="http://mysql-python.blogspot.com/" title="MySQL-Python">Andy Dustman</a>
</li>
<li><a href="http://andy.terrel.us/" title="Codematician">Andy R. Terrel</a>
</li>
<li><a href="" title="">Andy Todd</a>
</li>
<li><a href="http://nerandell.github.io/" title="Ankit Chandawala">Ankit Chandawala</a>
</li>
<li><a href="http://annaraven.blogspot.com/search/label/python" title="Meandering streams of consciousness">Anna Martelli Ravenscroft</a>
</li>
<li><a href="http://codingweasel.blogspot.com/search/label/python" title="The Coding Weasel">Anthony Baxter</a>
</li>
<li><a href="http://kpoxit.blogspot.com/search/label/python" title="kpoxit">Anton Belyaev</a>
</li>
<li><a href="http://bobrochel.blogspot.com/search/label/python" title="Beaver notes">Anton Bobrov</a>
</li>
<li><a href="http://anweshadas.in/" title="Python - Law Explained India">Anwesha Das</a>
</li>
<li><a href="https://www.appneta.com/blog" title="python – AppNeta Blog | App and Network Performance Monitoring">AppNeta Blog</a>
</li>
<li><a href="http://lucumr.pocoo.org/" title="Armin Ronacher's Thoughts and Writings">Armin Ronacher</a>
</li>
<li><a href="http://arnavk.com/tags/python/" title="Python on Arnav Khare">Arnav Khare</a>
</li>
<li><a href="https://edumine.wordpress.com" title="Python – My thoughts &amp;amp; learnings">Ashish Dutt</a>
</li>
<li><a href="http://pyfunc.blogspot.com/search/label/python" title="Programmer's notebook">Ashish Vidyarthi</a>
</li>
<li><a href="" title="">Ashley Camba</a>
</li>
<li><a href="http://astrocodeschool.com/" title="Astro Code School">Astro Code School</a>
</li>
<li><a href="http://www.toolness.com/wp" title="Python – Toolness">Atul Varma -- Toolness</a>
</li>
<li><a href="http://www.codemakesmehappy.com/search/label/Python" title="Code Makes Me Happy">Audrey Roy Greenfeld</a>
</li>
<li><a href="http://www.automatingosint.com/blog" title="Python – Automating OSINT Blog">Automating OSINT</a>
</li>
<li><a href="http://baijum.blogspot.com/search/label/python" title="Baiju Muthukadan's Blog">Baiju Muthukadan</a>
</li>
<li><a href="http://gbtami.github.io" title="gbtami - Python">Bajusz Tamás</a>
</li>
<li><a href="http://importthis.tumblr.com/" title="HeldenTechniek">Balthazar Rouberol</a>
</li>
<li><a href="http://bangalore.python.org.in/" title="BangPypers">BangPypers</a>
</li>
<li><a href="" title="">Barbara Shaurette</a>
</li>
<li><a href="http://www.wefearchange.org/" title="Pumpichank">Barry Warsaw</a>
</li>
<li><a href="" title="">Ben Bangert</a>
</li>
<li><a href="http://blog.codedstructure.net/search/label/python" title="Coded Structure">Ben Bass</a>
</li>
<li><a href="http://clusterbleep.net/blog" title="python – Ben Rousch's Cluster of Bleep">Ben Rousch</a>
</li>
<li><a href="http://mrben.co.uk/category/python/" title="mrben.co.uk - entries in the Python category">Ben Tappin</a>
</li>
<li><a href="http://pybites.blogspot.com/" title="Python bytes">Benjamin Peterson</a>
</li>
<li><a href="" title="">Benjamin W. Smith</a>
</li>
<li><a href="http://benjiyork.com/blog/" title="Benji York">Benji York</a>
</li>
<li><a href="http://zebert.blogspot.com/search/label/python" title="Paste here">Bertrand Mathieu</a>
</li>
<li><a href="http://www.thetaranights.com" title="The Tara Nights">Bhishan Bhandari</a>
</li>
<li><a href="" title="">Bill Mill</a>
</li>
<li><a href="http://news.open-bio.org/news/category/obf-projects/biopython/feed/atom/#respond" title="Comments on">BioPython News</a>
</li>
<li><a href="http://bitofcheese.blogspot.com/" title="Bit Of Cheese">Bit of Cheese</a>
</li>
<li><a href="" title="">Björn Tillenius</a>
</li>
<li><a href="http://www.blendedtechnologies.com" title="Blended Technologies">Blended Technologies</a>
</li>
<li><a href="" title="">BlueBream</a>
</li>
<li><a href="" title="">BlueDynamics Alliance</a>
</li>
<li><a href="http://source.mihelac.org/categories/django/" title="code @ informatikaMihelac posts category feed">Bojan Mihelac</a>
</li>
<li><a href="http://rhodesmill.org/brandon/" title="Python posts by Brandon Rhodes">Brandon Rhodes</a>
</li>
<li><a href="https://python4dads.wordpress.com" title="Python for Dads">Brendan Scott</a>
</li>
<li><a href="http://snarky.ca/" title="Tall, Snarky Canadian">Brett Cannon</a>
</li>
<li><a href="http://briancurtin.com/blog/" title="Brian Curtin (Posts about python)">Brian Curtin</a>
</li>
<li><a href="https://ferringb.wordpress.com" title="python – ferringbs space">Brian Harring</a>
</li>
<li><a href="http://www.protocolostomy.com" title="Musings of an Anonymous Geek » Python">Brian Jones</a>
</li>
<li><a href="http://www.protocolostomy.com" title="Musings of an Anonymous Geek » Python">Brian Jones</a>
</li>
<li><a href="http://pythontesting.net" title="planet – Python Testing">Brian Okken</a>
</li>
<li><a href="http://nicoddemus.github.io/" title="Midnight Coding">Bruno Oliveira</a>
</li>
<li><a href="http://brunorocha.org/" title="BrunoRocha.org | Python web development | Tag pythonplanet | feed">Bruno Rocha</a>
</li>
<li><a href="" title="">Bryce Verdier</a>
</li>
<li><a href="https://www.caktusgroup.com/blog/tags/python/" title="Caktus Blog">Caktus Consulting Group</a>
</li>
<li><a href="https://calvinx.com" title="Python – Calvin's">Calvin Cheng</a>
</li>
<li><a href="http://techblog.ironfroggy.com/search/label/programming" title="Developing Upwards">Calvin Spealman</a>
</li>
<li><a href="http://thelivingpearl.com" title="Captain DeadBones Chronicles » python">Captain DeadBones'' Chronicles</a>
</li>
<li><a href="https://carlchenet.com" title="planetpython – Le blog de Carl Chenet">Carl Chenet</a>
</li>
<li><a href="http://pyright.blogspot.com/" title="pyright">Carl Trachte</a>
</li>
<li><a href="http://themindcaster.blogspot.com/search/label/python" title="The Mindcaster">Carlos Eduardo de Paula</a>
</li>
<li><a href="http://blog.delaguardia.com.mx/" title="Pyramid Schemes">Carlos de la Guardia</a>
</li>
<li><a href="http://eatthedots.blogspot.com/" title=":: eat the dots ::">Casey Duncan</a>
</li>
<li><a href="http://python-catalin.blogspot.com/search/label/python" title="python-catalin">Catalin George Festila</a>
</li>
<li><a href="http://catherinedevlin.blogspot.com/search/label/python" title="Catherine: pyOraGeek">Catherine Devlin</a>
</li>
<li><a href="" title="">Chad Cooper</a>
</li>
<li><a href="" title="">Chad Whitacre</a>
</li>
<li><a href="" title="">Checking and Sharing</a>
</li>
<li><a href="http://blog.chrisarndt.de" title="Python – Christopher Arndt">Chris Arndt</a>
</li>
<li><a href="https://www.metachris.com/blog/tags/python.html" title="Posts tagged Python - metachris.com">Chris Hager</a>
</li>
<li><a href="http://blog.cdleary.com/category/python/" title="Honest to a Segfault: Python category syndication">Chris Leary</a>
</li>
<li><a href="http://chrismcavoy.org" title="Chris McAvoy » Python">Chris McAvoy</a>
</li>
<li><a href="http://plope.com" title="Chris McDonough's Python Feed">Chris McDonough</a>
</li>
<li><a href="http://chris-miles-writes-python.blogspot.com/" title="Chris Miles Writes Python">Chris Miles</a>
</li>
<li><a href="" title="">Chris Miller</a>
</li>
<li><a href="http://pyinformatics.blogspot.com/" title="PyInformatics: Bioinformatics and Data Science in Python">Chris Mitchell</a>
</li>
<li><a href="http://pbpython.com/" title="Practical Business Python">Chris Moffitt</a>
</li>
<li><a href="" title="">Chris Perkins</a>
</li>
<li><a href="http://ideas.offby1.net/" title="Ideas.Offby1 - python">Chris Rose</a>
</li>
<li><a href="https://chriswarrick.com/" title="Chris Warrick (Posts about Python)">Chris Warrick</a>
</li>
<li><a href="https://www.chrisbarra.me/" title="chrisbarra.me (python)">Christian Barra</a>
</li>
<li><a href="http://lipyrary.blogspot.com/" title="LiPyrary - Python for books">Christian Heimes</a>
</li>
<li><a href="" title="">Christian Joergensen</a>
</li>
<li><a href="" title="Kommentare zu:">Christian Scholz</a>
</li>
<li><a href="https://cito.github.io/tags/python/index.xml" title="Python on Seasoned &amp;amp; Agile">Christoph Zwerschke</a>
</li>
<li><a href="" title="">Christopher Denter</a>
</li>
<li><a href="" title="">Christopher Lenz</a>
</li>
<li><a href="" title="">Christopher Perkins</a>
</li>
<li><a href="http://www.evilchuck.com/search/label/python" title="EvilChuck">Chuck Thier</a>
</li>
<li><a href="http://www.redmountainsw.com/wordpress/archives/category/python/feed/atom/#respond" title="Comments on">Chui Tey</a>
</li>
<li><a href="http://csparpa.github.io/blog/" title="Vorsprung durch Informatik">Claudio Sparpaglione</a>
</li>
<li><a href="" title="">Cloudnumbers</a>
</li>
<li><a href="https://clusterhq.com" title="ClusterHQ Blog">ClusterHQ</a>
</li>
<li><a href="https://cobe.io/" title="Cobe (python)">Cobe.io</a>
</li>
<li><a href="http://CodeSnipers.com/?q=taxonomy/term/16/0" title="CodeSnipers.com - Python">CodeSnipers</a>
</li>
<li><a href="https://www.codementor.io/python/tutorial" title="Codementor Python Tutorials">Codementor</a>
</li>
<li><a href="https://allanderek.github.io/" title="Coding Diet (python)">Coding Diet</a>
</li>
<li><a href="" title="">Collin Winter</a>
</li>
<li><a href="https://concretecloud.github.io/" title="Concrete Clouds">Concrete Clouds</a>
</li>
<li><a href="" title="">Continuum Analytics Blog</a>
</li>
<li><a href="https://www.continuum.io/rss-feed" title="Continuum Analytics RSS FEED">Continuum Analytics News</a>
</li>
<li><a href="" title="">Continuum Blog</a>
</li>
<li><a href="http://controlfd.com" title="Ctrl-F'd - Python">Control F'd</a>
</li>
<li><a href="http://www.coresoftwaregroup.com/blog/topics/python" title="Topics">Core Software</a>
</li>
<li><a href="http://coreygoldberg.blogspot.com/search/label/python" title="Corey Goldberg">Corey Goldberg</a>
</li>
<li><a href="http://depressedoptimism.com/" title="Depressed Optimism">Corey Oordt</a>
</li>
<li><a href="http://cormoran-project.blogspot.com/" title="Cormoran Development Blog">Cormoran Project</a>
</li>
<li><a href="http://www.craigkerstiens.com/" title="Category: Python | Craig Kerstiens">Craig Kerstiens</a>
</li>
<li><a href="" title="">Creative Commons</a>
</li>
<li><a href="http://portablecommandline.blogspot.com/" title="Cross-Platform Command Line Tools">Cross-Platform Command Line Tools</a>
</li>
<li><a href="https://www.cubicweb.org/view?rql=Any%20X%2CT%2CCD%20ORDERBY%20CD%20DESC%20LIMIT%2020%20WHERE%20X%20is%20BlogEntry%2C%20X%20title%20T%2C%20X%20creation_date%20CD" title="Blog entries (CubicWeb's Forge) RSS Feed">CubicWeb</a>
</li>
<li><a href="https://ntguardian.wordpress.com" title="Python – Curtis Miller's Personal Website">Curtis Miller</a>
</li>
<li><a href="http://dspillustrations.com/" title="DSPIllustrations.com">DSPIllustrations.com</a>
</li>
<li><a href="http://dailytechvideo.com" title="Python – Daily Tech Video">Daily Tech Video (Python)</a>
</li>
<li><a href="" title="">Dalius Dobravolskas</a>
</li>
<li><a href="http://dfwpython.blogspot.com/" title="DFW Pythoneers">Dallas Fort Worth Pythoneers</a>
</li>
<li><a href="http://www.damian.oquanta.info/" title="Damian's blog (python)">Damián Avila</a>
</li>
<li><a href="http://damyanon.net" title="Python – Damyan's Blog">Damyan Bogoev</a>
</li>
<li><a href="https://late.am/" title="late.am">Dan Crosta</a>
</li>
<li><a href="http://strombrg.blogspot.com/search/label/Python" title="Dan on Python">Dan Stromberg</a>
</li>
<li><a href="https://dbader.org/blog/tags/python" title="dbader.org - Python">Daniel Bader</a>
</li>
<li><a href="http://www.endlesslycurious.com" title="Endlessly Curious">Daniel Brown</a>
</li>
<li><a href="http://danielnouri.org/notes" title="Daniel Nouri's Blog">Daniel Nouri</a>
</li>
<li><a href="http://pydanny.com/" title="pydanny">Daniel Roy Greenfeld</a>
</li>
<li><a href="" title="">Dariusz Suchojad</a>
</li>
<li><a href="" title="">Data Community DC</a>
</li>
<li><a href="http://www.dataschool.io/" title="Python - Data School">Data School</a>
</li>
<li><a href="http://www.datacamp.com/community/blog" title="DataCamp Blog">DataCamp</a>
</li>
<li><a href="https://www.dataquest.io/blog/" title="-- python">Dataquest</a>
</li>
<li><a href="http://dabeaz.blogspot.com/" title="Dabeaz">Dave Beazley</a>
</li>
<li><a href="" title="">Dave Behnke</a>
</li>
<li><a href="http://hwit.org/" title="Here's What I Think">Dave Haynes</a>
</li>
<li><a href="http://www.artima.com/weblogs/index.jsp?blogger=goodger" title="David Goodger's Weblog">David Goodger</a>
</li>
<li><a href="" title="">David Grant</a>
</li>
<li><a href="" title="">David J C Beach</a>
</li>
<li><a href="http://thppython.blogspot.com/" title="thp on Python">David Janes</a>
</li>
<li><a href="http://www.drmaciver.com" title="Python – David R. MacIver">David MacIver</a>
</li>
<li><a href="http://dmalcolm.livejournal.com/" title="dmalcolm">David Malcolm</a>
</li>
<li><a href="" title="">David Marte</a>
</li>
<li><a href="" title="">David Stanek</a>
</li>
<li><a href="http://www.szotten.com/david/" title="davidszotten">David Szotten</a>
</li>
<li><a href="http://codeinthehole.com/writing/tagged/python/" title="Writing on python | David Winterbottom">David Winterbottom</a>
</li>
<li><a href="http://davidemoro.blogspot.com/search/label/planetpython" title="Davide Moro">Davide Moro</a>
</li>
<li><a href="http://daftpython.blogspot.com/" title="daftpython">Davy Mitchell</a>
</li>
<li><a href="http://davywybiral.blogspot.com/" title="Davy Wybiral">Davy Wybiral</a>
</li>
<li><a href="" title="">Dazza</a>
</li>
<li><a href="http://degizmo.com" title="DeGizmo">DeGizmo</a>
</li>
<li><a href="http://makkalot-opensource.blogspot.com/search/label/python" title="Open Sourced">Denis Kurov</a>
</li>
<li><a href="" title="">Derrick Petzold</a>
</li>
<li><a href="" title="">Dethe Elza</a>
</li>
<li><a href="" title="">Diane Trout</a>
</li>
<li><a href="http://www.diego-garcia.info/" title="Diego Garcia - Python">Diego Garcia</a>
</li>
<li><a href="https://www.djangoproject.com/weblog/" title="The Django weblog">Django Weblog</a>
</li>
<li><a href="http://djangoweekly.com/blog/feed/" title="DjangoWeekly Blog">Django Weekly</a>
</li>
<li><a href="http://django.zone/" title="Django Zone latests posts">Django Zone</a>
</li>
<li><a href="" title="">Djangocon</a>
</li>
<li><a href="" title="">Djangofeed</a>
</li>
<li><a href="http://doingmathwithpython.github.io/" title="Doing Math with Python">Doing Math with Python</a>
</li>
<li><a href="https://doughellmann.com/blog" title="python – Doug Hellmann">Doug Hellmann</a>
</li>
<li><a href="http://douglatornell.ca/blog" title="Doug Latornell">Doug Latornell</a>
</li>
<li><a href="http://www.dougalmatthews.com/" title="Dougal Matthews - python">Dougal Matthews</a>
</li>
<li><a href="" title="">Douglas Napoleone</a>
</li>
<li><a href="https://www.dreamhost.com/blog" title="DreamHost.blog">DreamHost</a>
</li>
<li><a href="http://oubiwann.blogspot.com/search/label/python" title="Electric Duncan">Duncan McGreggor</a>
</li>
<li><a href="http://buchuki.com" title="Dusty’s Diverse Domain">Dusty Phillips</a>
</li>
<li><a href="https://easygui.wordpress.com" title="EasyGui">EasyGUI</a>
</li>
<li><a href="http://edcrewe.blogspot.com/search/label/python" title="Ed Crewe">Ed Crewe</a>
</li>
<li><a href="" title="">Ed Taekema</a>
</li>
<li><a href="http://edreamleo.blogspot.com/search/label/python" title="Explorations">Edward K. Ream</a>
</li>
<li><a href="http://pythonthusiast.pythonblogs.com/230_pythonthusiast" title="Pythonthusiast">Eko S. Wibowo</a>
</li>
<li><a href="http://eli.thegreenplace.net/" title="Eli Bendersky's website">Eli Bendersky</a>
</li>
<li><a href="http://touilleman.xyz/blog/" title="touilleMan">Emmanuel Leblond</a>
</li>
<li><a href="http://blog.endpoint.com/search/label/python" title="End Point Blog">End Point</a>
</li>
<li><a href="http://eniramltd.github.io/devblog/" title="Eniram developers' blog - python">Eniram Ltd.</a>
</li>
<li><a href="http://blog.enthought.com" title="Enthought Blog">Enthought</a>
</li>
<li><a href="https://examachine.net/blog" title="Python – log.examachine.net">Eray Özkural (examachine)</a>
</li>
<li><a href="" title="">Eric Florenzano</a>
</li>
<li><a href="http://ericholscher.com" title="Eric Holscher - Surfing in Kansas - Posts tagged python">Eric Holscher</a>
</li>
<li><a href="http://www.marsja.se" title="Python – Erik Marsja">Erik Marsja</a>
</li>
<li><a href="http://etienned.github.io/" title="Etienne’s blog (Python)">Etienne Desautels</a>
</li>
<li><a href="http://blog.europython.eu/" title="EuroPython Blog">EuroPython</a>
</li>
<li><a href="http://www.europython-society.org/" title="EuroPython Society">EuroPython Society</a>
</li>
<li><a href="" title="">Evan Fosmark</a>
</li>
<li><a href="http://blog.python-eve.org/" title="Eve News">Eve REST Framework</a>
</li>
<li><a href="http://eventh.tumblr.com/" title="Eventh">Even Wiik Thomassen</a>
</li>
<li><a href="http://evennia.blogspot.com/" title="Griatch's Evennia musings">Evennia</a>
</li>
<li><a href="http://interactivepython.org/courselib/feed/everyday.rss" title="Everyday Python">Everyday Python</a>
</li>
<li><a href="http://www.snowboardingcoder.com/django" title="Experienced Django">Experienced Django</a>
</li>
<li><a href="http://pydev.blogspot.com/" title="PyDev adventures">Fabio Zadrozny</a>
</li>
<li><a href="https://majid.info/blog" title="Python – Fazal Majid's low intensity weblog">Fazal Majid</a>
</li>
<li><a href="http://en.ig.ma/notebook/tag/python/" title="Filip Wasilewski (en.ig.ma): Newest Articles Tagged 'python'">Filip Wasilewski</a>
</li>
<li><a href="http://blog.filipesaraiva.info" title="planet-python – Filipe Saraiva's blog">Filipe Saraiva</a>
</li>
<li><a href="http://pyinsci.blogspot.com/" title="Python in Science">Flavio Coelho</a>
</li>
<li><a href="https://blog.flaper87.com/" title="Developer's black hole">Flavio Percoco</a>
</li>
<li><a href="http://blog.devork.be/search/label/python" title="devork">Floris Bruynooghe</a>
</li>
<li><a href="" title="">Francisco Souza</a>
</li>
<li><a href="http://fwierzbicki.blogspot.com/" title="Frank Wierzbicki's Weblog">Frank Wierzbicki</a>
</li>
<li><a href="http://raspberry-python.blogspot.com/search/label/english" title="Raspberry Pi Python Adventures">François Dion</a>
</li>
<li><a href="http://feeding.cloud.geek.nz/tags/python/" title="pages tagged python">François Marier</a>
</li>
<li><a href="http://fridh.nl/" title="FRidh's blog">Frederik Rietdijk</a>
</li>
<li><a href="http://effbot.org/" title="online.effbot.org">Fredrik Lundh</a>
</li>
<li><a href="http://www.frompythonimportpodcast.com" title="From Python Import Podcast">From Python Import Podcast</a>
</li>
<li><a href="https://www.fullstackpython.com/" title="Full Stack Python">Full Stack Python</a>
</li>
<li><a href="http://gael-varoquaux.info/" title="Gaël Varoquaux">Ga&#235;l Varoquaux</a>
</li>
<li><a href="http://blog.tshirtman.fr/" title="/dev/blah">Gabriel Pettier</a>
</li>
<li><a href="http://www.galvanize.com" title="python – Galvanize">Galvanize</a>
</li>
<li><a href="http://blog.extracheese.org/" title="Extra Cheese">Gary Bernhardt</a>
</li>
<li><a href="http://www.garyrobinson.net/" title="Gary Robinson's Rants">Gary Robinson</a>
</li>
<li><a href="http://thegarywilson.com/blog/" title="Gary Wilson Jr. - Latest blog entries tagged with: python">Gary Wilson</a>
</li>
<li><a href="http://gavrie.github.io/" title="Category: python | Gavrie's Blog">Gavrie Philipson</a>
</li>
<li><a href="" title="">Geek Scrap</a>
</li>
<li><a href="https://geert.vanderkelen.org/" title="Geert JM Vanderkelen">Geert Vanderkelen</a>
</li>
<li><a href="" title="">Gene Campbell</a>
</li>
<li><a href="" title="">Georg Brandl</a>
</li>
<li><a href="https://compiletoi.net/" title="python - Compile-toi toi même">Georges Dubus</a>
</li>
<li><a href="http://ghaandeeonit.tumblr.com/" title="Ghaandee on IT">Ghaandee on IT</a>
</li>
<li><a href="http://grodola.blogspot.com/search/label/python" title="Random writings and thoughts about Python">Giampaolo Rodola</a>
</li>
<li><a href="" title="">Gilad Raphaelli</a>
</li>
<li><a href="http://giuliofidente.com/" title="Giulio Fidente - python">Giulio Fidente</a>
</li>
<li><a href="http://hackermojo.com" title="Glenn Fanxman's python feed">Glenn Franxman</a>
</li>
<li><a href="https://glyph.twistedmatrix.com/" title="Deciphering Glyph">Glyph Lefkowitz</a>
</li>
<li><a href="http://paddy3118.blogspot.com/" title="Go deh!">Go Deh</a>
</li>
<li><a href="https://godjango.com" title="GoDjango Screencasts and Tutorials">GoDjango</a>
</li>
<li><a href="https://blog.gocept.com" title="python – gocept blog">Gocept Weblog</a>
</li>
<li><a href="http://blog.godson.in/search/label/Python" title="Core Dump -- Godson Gera's Blog">Godson Gera</a>
</li>
<li><a href="" title="">Gonçalo Margalho</a>
</li>
<li><a href="http://www.curiousvenn.com" title="Python – Curious Venn">Graeme Cross</a>
</li>
<li><a href="http://blog.dscpl.com.au/" title="Graham Dumpleton">Graham Dumpleton</a>
</li>
<li><a href="https://gramps-project.org" title="Programming – Gramps">Gramps</a>
</li>
<li><a href="http://defrobnication.blogspot.com/search/label/python" title="Defrobnication">Grant Baillie</a>
</li>
<li><a href="https://www.wisdomandwonder.com" title="Python – Wisdom and Wonder">Grant Rettke</a>
</li>
<li><a href="https://gc-taylor.com/" title="Greg Taylor">Greg Taylor</a>
</li>
<li><a href="" title="">Greg Turnquist</a>
</li>
<li><a href="" title="">Greg Wilson</a>
</li>
<li><a href="http://www.answermysearches.com" title="Answer My Searches » Python">Gregory Pinero</a>
</li>
<li><a href="http://agiletesting.blogspot.com/search/label/python" title="Agile Testing">Grig Gheorghiu</a>
</li>
<li><a href="http://blog.fizyk.net.pl/" title="Cases (python)">Grzegorz Śliwiński</a>
</li>
<li><a href="" title="">Guido Kollerie</a>
</li>
<li><a href="http://neopythonic.blogspot.com/" title="Neopythonic">Guido van Rossum</a>
</li>
<li><a href="" title="">Guilherme Toti</a>
</li>
<li><a href="https://gustavonarea.net" title="Python – Gustavo on Software Development">Gustavo Narea</a>
</li>
<li><a href="https://blog.labix.org" title="Labix Blog">Gustavo Niemeyer</a>
</li>
<li><a href="" title="">Guyon Moree</a>
</li>
<li><a href="http://pycloud.blogspot.com/search/label/python" title="On Clouds, Poems, Python and more...">Gökhan Sever</a>
</li>
<li><a href="http://blog.hannosch.eu/search/label/python" title="..: hannosch :..">Hanno Schlichting</a>
</li>
<li><a href="http://blog.vmfarms.com/search/label/python" title="VM Farms">Hany Fahim</a>
</li>
<li><a href="" title="">Harrison Erd</a>
</li>
<li><a href="http://www.nomadblue.com/blog/python/" title="Nomadblue - We are your CTO on-demand">Hector Garcia</a>
</li>
<li><a href="http://www.heikkitoivonen.net/blog" title="California Dreams » Python">Heikki Toivonen</a>
</li>
<li><a href="http://python-in-the-lab.blogspot.com/search/label/Python" title="Python in the Lab">Hernan Grecco</a>
</li>
<li><a href="https://hilarymason.com" title="Hi. I'm Hilary Mason.">Hilary Mason</a>
</li>
<li><a href="https://holgerkrekel.net" title="metaprogramming and politics">Holger Krekel</a>
</li>
<li><a href="http://www.holger-peters.de/" title="Data Voyage - Blog of Holger Peters - Python Feed">Holger Peters</a>
</li>
<li><a href="http://www.huyng.com/" title="Huy Nguyen">Huy Nguyen</a>
</li>
<li><a href="https://hynek.me/" title="Hynek Schlawack">Hynek Schlawack</a>
</li>
<li><a href="https://www.adampalmer.me/iodigitalsec" title="Python – IO Digital Sec">IO Digital Sec</a>
</li>
<li><a href="https://ipython0.wordpress.com" title="IPython0 blog">IPython0 blog</a>
</li>
<li><a href="" title="">Ian Bicking</a>
</li>
<li><a href="http://ianozsvald.com" title="Python – Entrepreneurial Geekiness">Ian Ozsvald</a>
</li>
<li><a href="http://www.ilian.io/feed/" title="Between engineering and real life">Ilian Iliev</a>
</li>
<li><a href="" title="">Imaginary Landscape</a>
</li>
<li><a href="http://importpython.com/blog/feed/" title="ImportPython Blog">Import Python</a>
</li>
<li><a href="http://intellimath.bitbucket.org/blog/" title="Intellimath blog (python)">Intellimath blog</a>
</li>
<li><a href="http://inventwithpython.com/blog" title="The “Invent with Python” Blog">Invent with Python</a>
</li>
<li><a href="https://www.talaikis.com" title="python | Talaikis">Investing using Python</a>
</li>
<li><a href="" title="">Ionel Cristian Mărieș</a>
</li>
<li><a href="" title="">Iraj Jelodari</a>
</li>
<li><a href="http://ironpython-urls.blogspot.com/" title="IronPython URLs">IronPython-URLs</a>
</li>
<li><a href="http://ishan.chattopadhyaya.com/blog" title="Chatman Diary">Ishan Chattopadhyaya</a>
</li>
<li><a href="" title="">Isotoma</a>
</li>
<li><a href="http://fruch.github.io" title="- Miscellaneous">Israel Fruchter</a>
</li>
<li><a href="http://www.codewithoutrules.com/" title="Code Without Rules">Itamar Turner Trauring</a>
</li>
<li><a href="" title="">Ivan Krstic</a>
</li>
<li><a href="" title="">Ivan Krstic</a>
</li>
<li><a href="http://jackdied.blogspot.com/" title="Jack Diederich's Python Blog">Jack Diederich</a>
</li>
<li><a href="http://streamhacker.com" title="python – StreamHacker">Jacob Perkins</a>
</li>
<li><a href="https://wrongsideofmemphis.wordpress.com" title="english – Wrong Side of Memphis">Jaime Buelta</a>
</li>
<li><a href="http://www.datadependence.com" title="python – Data Dependence">Jamal Moir</a>
</li>
<li><a href="http://shortcircuit.net.au/~prologic/blog/" title="James Mills's Blog">James Mills</a>
</li>
<li><a href="http://listbot.org/" title="[ listbot.org - Python feed]">James Polera</a>
</li>
<li><a href="" title="">James Tauber</a>
</li>
<li><a href="" title="">Jan-Carel Brand</a>
</li>
<li><a href="https://janusworx.com/" title="python - Janusworx">Janusworx</a>
</li>
<li><a href="" title="">Jared Forsyth</a>
</li>
<li><a href="http://blog.jarrodmillman.com/search/label/python" title="Jarrod Millman">Jarrod Millman</a>
</li>
<li><a href="" title="">Jason Baker</a>
</li>
<li><a href="http://jasonamyers.github.io//" title="The N00b Developer">Jason Meyers</a>
</li>
<li><a href="http://www.bigjason.com/tags/python.html" title="BigJason.com posts tagged python.">Jason Webb</a>
</li>
<li><a href="https://ganwell.github.io/" title="Duck! Another blag incoming! - python">Jean-Louis Fuchs</a>
</li>
<li><a href="http://as.ynchrono.us/search/label/python" title="Interesting Things, Largely Python and Twisted Related">Jean-Paul Calderone</a>
</li>
<li><a href="" title="Comments on:">Jeet Sukumaran</a>
</li>
<li><a href="http://jeethurao.com/blog" title="Jeethu's Blog">Jeethu Rao</a>
</li>
<li><a href="http://jbisbee.blogspot.com/search/label/python" title="Change for the Better">Jeff Bisbee</a>
</li>
<li><a href="http://jeffbradberry.com/" title="Jeff Bradberry">Jeff Bradberry</a>
</li>
<li><a href="http://inre.dundeemt.com" title="Python – In Re:">Jeff Hinrichs</a>
</li>
<li><a href="https://jeffknupp.com" title="Python Programming">Jeff Knupp</a>
</li>
<li><a href="" title="">Jeff McNeil</a>
</li>
<li><a href="http://www.thoughtamps.info/" title="ThoughtAmps">Jeff Rush</a>
</li>
<li><a href="http://griddlenoise.blogspot.com/search/label/python" title="Griddle Noise">Jeff Shell</a>
</li>
<li><a href="" title="">Jeff Winkler</a>
</li>
<li><a href="http://greenash.net.au/thoughts/topics/python/" title="GreenAsh: thoughts filed in Python">Jeremy Epstein</a>
</li>
<li><a href="http://jeremyhylton.blogspot.com/" title="Jeremy Hylton: Inconceivable">Jeremy Hylton</a>
</li>
<li><a href="" title="">Jessie Anderson</a>
</li>
<li><a href="http://www.zyasoft.com/pythoneering" title="Front Range Pythoneering">Jim Baker</a>
</li>
<li><a href="http://j1mfulton.blogspot.com/" title="Jim Fulton">Jim Fulton</a>
</li>
<li><a href="http://feetup.org/blog/dev/python" title="Feet up! : dev/python">Jim Hughes</a>
</li>
<li><a href="https://pyrseas.wordpress.com" title="Taming Serpents and Pachyderms">Joe Abbate</a>
</li>
<li><a href="https://joepitz.wordpress.com" title="Python – Joe Pitz – Technology Blog">Joe Pitz</a>
</li>
<li><a href="https://blogs.gnome.org/johan" title="Python – Johan Dahlin">Johan Dahlin</a>
</li>
<li><a href="" title="">John Anderson</a>
</li>
<li><a href="http://clouddbs.blogspot.com/search/label/python" title="Python Cloud">John Burns</a>
</li>
<li><a href="https://www.johndcook.com/blog" title="Python – John D. Cook">John Cook</a>
</li>
<li><a href="" title="">John Gagliardi</a>
</li>
<li><a href="http://eigenhombre.com" title="Forays into Simplicity - Python">John Jacobsen</a>
</li>
<li><a href="" title="">John Paulett</a>
</li>
<li><a href="http://www.indelible.org/ink/" title="Indelible Ink">Jon Parise</a>
</li>
<li><a href="http://hashbeat.blogspot.com/search/label/Python" title="hashbeat">Jonathan Dobson</a>
</li>
<li><a href="http://spyced.blogspot.com/search/label/python" title="Spyced">Jonathan Ellis</a>
</li>
<li><a href="http://blog.jonharrington.org/" title="python - Jonathan Harrington">Jonathan Harrington</a>
</li>
<li><a href="http://tartley.com" title="Python – tartley.com">Jonathan Hartley</a>
</li>
<li><a href="https://cleverdevil.io/external/bootstrap/assets/css/bootstrap-theme.min.css" title="">Jonathan LaCour</a>
</li>
<li><a href="https://cleverdevil.io/external/bootstrap/assets/css/bootstrap-theme.min.css" title="">Jonathan LaCour</a>
</li>
<li><a href="http://jonathanstreet.com/blog/" title="JonathanStreet.com blog feed">Jonathan Street</a>
</li>
<li><a href="" title="">Jordan Dimov</a>
</li>
<li><a href="http://www.metaklass.org/" title="Jorge Niedbalski">Jorge Niedbalski</a>
</li>
<li><a href="http://puentesarr.in" title="Tracking My Route » Python">Jorge Puente Sarrín</a>
</li>
<li><a href="http://blog.jorgenschaefer.de/search/label/Python" title="Jorgen’s Weblog">Jorgen Schäfer</a>
</li>
<li><a href="https://joao.in/blog/category/python/" title="João's latest posts on python">João Laia</a>
</li>
<li><a href="https://pythonmonopoly.wordpress.com" title="Python Monopoly">Juan Manuel Contreras</a>
</li>
<li><a href="" title="">Juan Rivas</a>
</li>
<li><a href="http://www.juanrodriguezmonti.com.ar/tags/python/" title="Python on Blog">Juan Rodríguez Monti</a>
</li>
<li><a href="http://www.nixtu.info/search/label/python" title="Nixtu">Juho Vepsäläinen</a>
</li>
<li><a href="https://julien.danjou.info/blog/" title="jd:/dev/blog">Julien Danjou</a>
</li>
<li><a href="http://dev-tricks.net" title="Python – {Dev Tricks}">Julien Palard</a>
</li>
<li><a href="http://beauty-of-imagination.blogspot.com/search/label/python" title="Imagination">Julien Tayon</a>
</li>
<li><a href="http://juripakaste.fi/cgi/pyblosxom.cgi" title="Juri Pakaste - The Blog">Juri Pakaste</a>
</li>
<li><a href="http://blog.pythonisito.com/" title="Just a little Python">Just a little Python</a>
</li>
<li><a href="https://hackercodex.com/" title="Hacker Codex - python">Justin Mayer</a>
</li>
<li><a href="" title="">Kai Diefenbach</a>
</li>
<li><a href="https://lautaportti.wordpress.com" title="Kai Lautaportti">Kai Lautaportti</a>
</li>
<li><a href="" title="">Kamon Ayeva</a>
</li>
<li><a href="" title="">Karen Rustad</a>
</li>
<li><a href="https://kate-editor.org" title="python – Kate | Get an Edge in Editing">Kate Editor</a>
</li>
<li><a href="http://therealkatie.net/blog" title="Latest Python entries from The Real Katie">Katie Cunningham</a>
</li>
<li><a href="http://nuitka.net/" title="Nuitka Home (Python)">Kay Hayen</a>
</li>
<li><a href="http://fiber-space.de/wordpress" title="Python – Trails in a Langscape">Kay Schluehr</a>
</li>
<li><a href="http://kbyanc.blogspot.com/search/label/python" title="The Other Kelly Yancey">Kelly Yancey</a>
</li>
<li><a href="" title="">Kenneth Reitz</a>
</li>
<li><a href="http://powertwenty.com/blog" title="Python – Toes to the Edge">Kevin Dahlhausen</a>
</li>
<li><a href="http://www.blueskyonmars.com" title="Python – Blue Sky On Mars">Kevin Dangoor</a>
</li>
<li><a href="" title="">Kiwi PyCon</a>
</li>
<li><a href="http://konryd.blogspot.com/" title="Most recent call">Konrad Delong</a>
</li>
<li><a href="https://koodaamo.wordpress.com" title="python – Koodaamo">Koodaamo</a>
</li>
<li><a href="http://kracekumar.com/" title="Random stream">Kracekumar Ramaraju</a>
</li>
<li><a href="https://cosmicpercolator.com" title="Python – Kristján's Cosmic Percolator">Kristján Valur Jónsson</a>
</li>
<li><a href="http://justaworldaway.com" title="python – Just a World Away">Kriti Godey</a>
</li>
<li><a href="" title="">Krys Wilken</a>
</li>
<li><a href="https://krzysztofzuraw.com/" title="Krzysztof Żuraw">Krzysztof Żuraw</a>
</li>
<li><a href="https://gofedora.com" title="Tech Stuff » Python">Kulbir Saini</a>
</li>
<li><a href="http://farmdev.com/thoughts/on/3/python/" title="Farmdev: Thoughts on Python">Kumar McMillan</a>
</li>
<li><a href="https://www.kunxi.org/blog/" title="Kun Xi">Kun Xi</a>
</li>
<li><a href="https://www.kunxi.org/blog/" title="Kun Xi">Kun Xi</a>
</li>
<li><a href="http://kurtgrandis.com/blog" title="Kurt Grandis » PythonKurt Grandis">Kurt Grandis</a>
</li>
<li><a href="https://kushaldas.in/" title="Kushal Das">Kushal Das</a>
</li>
<li><a href="http://charlesnagy.info" title="python – Charles Nagy">Károly Nagy</a>
</li>
<li><a href="http://shuttlethread.com/blog/aggregator-python" title="Shuttle Thread Blog">Laurence Rowe</a>
</li>
<li><a href="http://www.laurentluce.com" title="Python – Laurent Luce's Blog">Laurent Luce</a>
</li>
<li><a href="" title="">Laurent Szyster</a>
</li>
<li><a href="" title="">Lawrence Oluyede</a>
</li>
<li><a href="" title="">Lee Braiden</a>
</li>
<li><a href="https://hypatia.ca" title="python – hypatia dot ca">Leigh Honeywell</a>
</li>
<li><a href="https://regebro.wordpress.com" title="python – Lennart Regebro: Python, Plone, Web">Lennart Regebro</a>
</li>
<li><a href="https://leovt.wordpress.com" title="Python – leovt">Leonhard Vogt</a>
</li>
<li><a href="" title="">Lesscode.org</a>
</li>
<li><a href="http://levipy.com" title="Python - Articles">Levi Velázquez</a>
</li>
<li><a href="" title="">Lightning Fast CMS</a>
</li>
<li><a href="http://www.getlfs.com/blog" title="All news about LFS">Lightning Fast Shop</a>
</li>
<li><a href="http://howto.lintel.in" title="python – Lintel Technologies Blog">Lintel Technologies</a>
</li>
<li><a href="" title="">Lion Kimbro</a>
</li>
<li><a href="" title="">Lionel Tan</a>
</li>
<li><a href="" title="">Logilab</a>
</li>
<li><a href="http://blog.lowkster.com/" title="Lowkster - Pythonly yours">Low Kian Seong</a>
</li>
<li><a href="http://codingandlinux.blogspot.com/search/label/python" title="Coding and Linux">Luca Botti</a>
</li>
<li><a href="http://blog.gmludo.eu/search/label/python" title="Ludovic Gasc (GMLudo)">Ludovic Gasc</a>
</li>
<li><a href="" title="">Ludovico Fischer</a>
</li>
<li><a href="http://blog.sendapatch.se" title="blog.sendapatch.se">Ludvig Ericson</a>
</li>
<li><a href="http://lewk.org/blog" title="l e w k . o r g">Luke Macken</a>
</li>
<li><a href="https://lukeplant.me.uk/blog/categories/python/" title="All Unkept">Luke Plant</a>
</li>
<li><a href="http://www.machinalis.com/blog/" title="Blog | Machinalis">Machinalis</a>
</li>
<li><a href="http://lostinjit.blogspot.com/" title="Lost in JIT">Maciej Fijalkowsk</a>
</li>
<li><a href="" title="">Mahdi Yusuf</a>
</li>
<li><a href="http://sedimental.org/tagged/python/" title="Sedimental - python">Mahmoud Hashemi</a>
</li>
<li><a href="https://maltheborch.com/rss?tags=python" title="Malthe Borch's Homepage:
      A Blog About Computer Systems
      and Language Design">Malthe Borch</a>
</li>
<li><a href="" title="">Manuel de la Pena Saenz</a>
</li>
<li><a href="" title="">Marc Garcia</a>
</li>
<li><a href="http://www.malemburg.com/" title="All Things Python">Marc-André Lemburg</a>
</li>
<li><a href="http://www.imgonline.com.ua/eng/" title="">Marcin Kuźmiński</a>
</li>
<li><a href="http://www.grulic.org.ar/~mdione/glob//tags/python/" title="tags/python">Marcos Dione</a>
</li>
<li><a href="" title="">Marcus Whybrow</a>
</li>
<li><a href="http://pysnippet.blogspot.com/search/label/Python" title="PySnippet">Mario Boikov</a>
</li>
<li><a href="http://mg.pov.lt/blog/" title="Random notes from mg">Marius Gedminas</a>
</li>
<li><a href="http://www.stochasticgeometry.ie" title="Python – Stochastic Geometry">Mark Dennehy</a>
</li>
<li><a href="http://shed-skin.blogspot.com/" title="Shed Skin - A (restricted) Python-to-C++ Compiler">Mark Dufour</a>
</li>
<li><a href="https://blogs.gnome.org/markmc" title="python – Mark McLoughlin">Mark McLoughlin</a>
</li>
<li><a href="http://pywinauto.blogspot.com/" title="mark.py">Mark McMahon</a>
</li>
<li><a href="http://www.learningpython.com" title="learning python">Mark Mruss</a>
</li>
<li><a href="" title="">Mark Paschal</a>
</li>
<li><a href="" title="">Mark Ramm</a>
</li>
<li><a href="http://markos.gaivo.net/articles/" title="A notch above a monkey">Marko Samastur</a>
</li>
<li><a href="http://blog.startifact.com/" title="Secret Weblog (planetpython)">Martijn Faassen</a>
</li>
<li><a href="http://www.zopatista.com" title="Zopatista">Martijn Pieters</a>
</li>
<li><a href="" title="">Martin Blais</a>
</li>
<li><a href="https://mfitzp.io/" title="Martin Fitzpatrick">Martin Fitzpatrick</a>
</li>
<li><a href="" title="">Mathieu Fenniak</a>
</li>
<li><a href="http://txzone.net" title="Txzone » Planet Python">Mathieu Virbel</a>
</li>
<li><a href="http://mysqlmusings.blogspot.com/search/label/python" title="MySQL Musings">Mats Kindahl</a>
</li>
<li><a href="http://matt.goodall.me/" title="Random Acts of Senseless Blogging">Matt Goodall</a>
</li>
<li><a href="http://hairysun.com/" title="Hairy Sun - Python">Matt Harrison</a>
</li>
<li><a href="" title="">Matt Reid</a>
</li>
<li><a href="" title="">Matt Wilkes</a>
</li>
<li><a href="https://matthewrocklin.com/blog/" title="Working notes by Matthew Rocklin - Python">Matthew Rocklin</a>
</li>
<li><a href="http://www.stealthcopter.com/blog" title="python – Stealthcopter">Matthew Rollings</a>
</li>
<li><a href="http://blog.tplus1.com" title="Comments on:">Matthew Wilson</a>
</li>
<li><a href="http://copypasteprogrammer.blogspot.com/search/label/python" title="The copy/paste programmer">Mattias Brändström</a>
</li>
<li><a href="http://mauveweb.co.uk/" title="Mauveweb">Mauveweb</a>
</li>
<li><a href="https://art-lemon.com/ua/" title="">Max Ischenko</a>
</li>
<li><a href="http://blog.klymyshyn.com/search/label/python" title="Django and other">Max Klymyshyn</a>
</li>
<li><a href="" title="">Michael Bayer</a>
</li>
<li><a href="http://beckerfuffle.com/" title="Category: python | Beckerfuffle">Michael Becker</a>
</li>
<li><a href="" title="">Michael Crute</a>
</li>
<li><a href="http://droettboom.com/" title="Boom! Michael Droettboom's blog">Michael Droettboom</a>
</li>
<li><a href="http://www.voidspace.org.uk/python/weblog/index.shtml" title="The Voidspace Techie Blog">Michael Foord</a>
</li>
<li><a href="" title="">Michael Hudson</a>
</li>
<li><a href="" title="">Michael Martinez</a>
</li>
<li><a href="https://micknelson.wordpress.com" title="python – Something-driven development">Michael Nelson</a>
</li>
<li><a href="" title="">Michael Schurter</a>
</li>
<li><a href="" title="">Michael Sparks</a>
</li>
<li><a href="" title="">Michael Watkins</a>
</li>
<li><a href="https://mousebender.wordpress.com" title="Mousebender">Michal Kwiatkowski</a>
</li>
<li><a href="https://bultrowicz.com" title="Butlablog - Posts tagged Python">Michał Bultrowicz</a>
</li>
<li><a href="" title="">Michał Domański</a>
</li>
<li><a href="http://www.artima.com/weblogs/index.jsp?blogger=micheles" title="Michele Simionato's Weblog">Michele Simionato</a>
</li>
<li><a href="http://firsttimeprogrammer.blogspot.com/search/label/python" title="The Beginner Programmer">Michy Alice</a>
</li>
<li><a href="http://blog.vrplumber.com/b/categories/snaking/" title="blog.vrplumber.com - Entries for the category Snaking">Mike C. Fletcher</a>
</li>
<li><a href="http://www.blog.pythonlibrary.org" title="The Mouse Vs. The Python">Mike Driscoll</a>
</li>
<li><a href="http://python-academy.blogspot.com/" title="Python Academy">Mike Müller</a>
</li>
<li><a href="http://mikenaberezny.com" title="Python – Mike Naberezny">Mike Naberezny</a>
</li>
<li><a href="" title="">Mike Pirnat</a>
</li>
<li><a href="" title="">Mikeal Rogers</a>
</li>
<li><a href="http://kmike.ru/" title="kmike.ru">Mikhail Korobov</a>
</li>
<li><a href="https://opensourcehacker.com" title="python – Open Source Hacker">Mikko Ohtamaa</a>
</li>
<li><a href="" title="">Mitch Chapman</a>
</li>
<li><a href="http://www.elastician.com/" title="Elastician">Mitchell Garnaat</a>
</li>
<li><a href="http://pythonbyexample.blogspot.com/" title="PythonByExample">Mitya Sirenef</a>
</li>
<li><a href="http://montrealpython.org/feed/" title="Montréal-Python">Montreal Python User Group</a>
</li>
<li><a href="http://blogologue.com" title="Morphex's blogologue (Life, technology, music, politics, business, mental health and more)">Morphex's Blogologue</a>
</li>
<li><a href="http://www.nidelven-it.no/weblogs/hosting" title="Nidelven IT - All about Python, Zope &amp;amp; Plone - and Open Source!">Morten W Petersen</a>
</li>
<li><a href="https://www.moyaproject.com/blog/" title="Moya Project Blog">Moya Project</a>
</li>
<li><a href="https://blog.mozilla.org/webdev" title="Python – Mozilla Web Development">Mozilla Web Development</a>
</li>
<li><a href="https://muharem.wordpress.com" title="Muharem Hrnjadovic">Muharem Hrnjadovic</a>
</li>
<li><a href="http://www.thesamet.com" title="python – Nadav Samet's Blog">Nadav Samet</a>
</li>
<li><a href="" title="">Nadia Alramli</a>
</li>
<li><a href="https://learnpython.wordpress.com" title="Learn Python">Naomi Ceder</a>
</li>
<li><a href="http://www.natan.termitnjak.net//blog" title="NMB's Development Blog">Natan Zabkar</a>
</li>
<li><a href="https://climateecology.wordpress.com" title="python – Climate Change Ecology">Nathan Lemoine</a>
</li>
<li><a href="http://neckbeardrepublic.com/" title="Neckbeard Republic - bite-sized python screencasts">Neckbeard Republic</a>
</li>
<li><a href="https://nedbatchelder.com/blog" title="Ned Batchelder's blog">Ned Batchelder</a>
</li>
<li><a href="http://python.ca/nas/log/" title="Neil Schemenauer's Web Log">Neil Schemenauer</a>
</li>
<li><a href="" title="">Ng Pheng Siong</a>
</li>
<li><a href="http://blog.alienretro.com" title="Python – alienretrô">Nicholas Amorim</a>
</li>
<li><a href="" title="">Nicholas Piël</a>
</li>
<li><a href="http://www.curiousefficiency.org" title="Curious Efficiency (python)">Nick Coghlan</a>
</li>
<li><a href="http://www.craig-wood.com/nick/articles" title="Nick Craig-Wood's Articles">Nick Craig-Wood</a>
</li>
<li><a href="http://blog.efford.org/" title="Pythoneering">Nick Efford</a>
</li>
<li><a href="http://nickjanetakis.blogspot.com/search/label/python" title="Nick Janetakis">Nick Janetakis</a>
</li>
<li><a href="https://nicolaiarocci.com/tags/python/index.xml" title="Nicola Iarocci">Nicola Iarocci</a>
</li>
<li><a href="https://nicdumz.fr/blog" title="Nicolas Dumazet - Blog">Nicolas Dumazet</a>
</li>
<li><a href="http://www.nicosphere.net" title="Nico Sphere">Nicolas Paris</a>
</li>
<li><a href="http://nigelb.me/" title="Nigel Babu">Nigel Babu</a>
</li>
<li><a href="" title="">Nikhil Gopal</a>
</li>
<li><a href="https://getnikola.com/" title="Nikola">Nikola</a>
</li>
<li><a href="" title="">Noah Gift</a>
</li>
<li><a href="http://www.numfocus.org/blog" title="NumFOCUS | Open Code = Better Science - Blog">NumFOCUS</a>
</li>
<li><a href="http://www.obeythetestinggoat.com/" title="Obey the Testing Goat!">Obey the Testing Goat</a>
</li>
<li><a href="https://andrich.blog" title="python – Oliver Andrich">Oliver Andrich</a>
</li>
<li><a href="http://www.omahapython.org/blog" title="Omaha Python Users Group">Omaha Python Users Group</a>
</li>
<li><a href="http://omar.toomuchcookies.net" title="Omar Abo-Namous » python">Omar Abo-Namous</a>
</li>
<li><a href="http://ondrejcertik.blogspot.com/search/label/python" title="Ondřej Čertík">Ond&#345;ej &#268;ert&iacute;k</a>
</li>
<li><a href="http://blog.openhatch.org" title="python – The OpenHatch blog">OpenHatch Python posts</a>
</li>
<li><a href="http://orestis.gr/tags/python/" title="Posts tagged with python">Orestis Markou</a>
</li>
<li><a href="http://blog.partecs.com" title="python – ParTecs Weblog">Partecs</a>
</li>
<li><a href="http://blog.pathwright.com/" title="Pathwright Blog">Pathwright</a>
</li>
<li><a href="http://weblog.patrice.ch/" title="Patrice's Weblog">Patrice Neff</a>
</li>
<li><a href="https://pp.com.mx/blog" title="My blog » Python">Patricio Paez</a>
</li>
<li><a href="http://www.patricksoftwareblog.com" title="python – Patrick's Software Blog">Patrick Kennedy</a>
</li>
<li><a href="http://pkaudio.blogspot.com/search/label/python" title="pkaudio">Patrick Stinson</a>
</li>
<li><a href="http://news.e-scribe.com/tag/python" title="E-Scribe News : a programmer's blog : python">Paul Bissex</a>
</li>
<li><a href="https://pauleveritt.wordpress.com" title="Chatterbox, Reloaded">Paul Everitt</a>
</li>
<li><a href="http://www.logarithmic.net/pfh/blog_code" title="pfh's blog: code section">Paul Harrison</a>
</li>
<li><a href="https://codebright.wordpress.com" title="Python – Codebright's Blog">Paul Redman</a>
</li>
<li><a href="" title="">Paulo Nuin</a>
</li>
<li><a href="http://pfertyk.me/" title="pfertyk">Paweł Fertyk</a>
</li>
<li><a href="https://www.paypal-engineering.com" title="python – PayPal Engineering Blog">PayPal Engineering Blog</a>
</li>
<li><a href="http://pedrokroger.net" title="Python – Pedro Kroger">Pedro Kroger</a>
</li>
<li><a href="http://pedro.valelima.com" title="Underwater log feed for python">Pedro Lima</a>
</li>
<li><a href="" title="">Pete Hunt</a>
</li>
<li><a href="" title="">Petecode</a>
</li>
<li><a href="https://www.peterbe.com/rss.xml" title="Peterbe.com">Peter Bengtsson</a>
</li>
<li><a href="http://petereisentraut.blogspot.com/search/label/Python" title="Peter Eisentraut's Blog">Peter Eisentraut</a>
</li>
<li><a href="http://neovox.advancedmagic.de" title="Python – Advanced Magic">Peter Fankhänel</a>
</li>
<li><a href="" title="">Peter Halliday</a>
</li>
<li><a href="https://push.cx" title="Python – Push cx">Peter Harkins</a>
</li>
<li><a href="http://peter-hoffmann.com" title="Peter Hoffmann - Python">Peter Hoffmann</a>
</li>
<li><a href="" title="">Peter Parente</a>
</li>
<li><a href="" title="">Petro Verkhogliad</a>
</li>
<li><a href="http://www.philhassey.com/blog" title="Phil Hassey » python">Phil Hassey</a>
</li>
<li><a href="http://dunderboss.blogspot.com/search/label/python" title="__boss__">Philip Jenvey</a>
</li>
<li><a href="http://blog.pyspoken.com" title="Python Spoken Here">Philip Semanchuk</a>
</li>
<li><a href="https://philikon.wordpress.com" title="Python – philiKON – a journal">Philipp von Weitershausen</a>
</li>
<li><a href="http://base-art.net/" title="Base-Art">Philippe Normand</a>
</li>
<li><a href="http://dirtsimple.org/programming/index.html" title="PJE on Programming">Phillip J. Eby</a>
</li>
<li><a href="http://sites.google.com/feeds/content/site/pydatalog" title="Posts of Python Blog">Pierre Carbonnelle</a>
</li>
<li><a href="http://mancoosi.org/~abate/tags/python/feed" title="Pietro Abate homepage - python">Pietro Abate</a>
</li>
<li><a href="http://pythonpodcast.com" title="Podcast.__init__ - Python and the people who make it great">Podcast.__init__</a>
</li>
<li><a href="https://ironboundsoftware.com/blog" title="Python – Possibility and Probability">Possbility and Probability</a>
</li>
<li><a href="http://pradeepgowda.com" title="pradeepgowda.com">Pradeep Gowda</a>
</li>
<li><a href="http://flicker-technical.blogspot.com/search/label/Python" title="Hit n Trail">Pranav Pandey</a>
</li>
<li><a href="http://www.shutupandship.com/search/label/python" title="Shut Up and Ship">Praveen Gollakota</a>
</li>
<li><a href="https://programandociencia.com" title="English – Programando Ciência">Programando Ciência</a>
</li>
<li><a href="https://www.programiz.com/python-programming/rss.xml" title="Python feed">Programiz</a>
</li>
<li><a href="https://programmingideaswithjake.wordpress.com" title="Python – Programming Ideas With Jake">Programming Ideas With Jake</a>
</li>
<li><a href="" title="">Przemysław Kołodziejczyk</a>
</li>
<li><a href="" title="">PyAMF Blog</a>
</li>
<li><a href="http://pybit.es/" title="PyBites">PyBites</a>
</li>
<li><a href="" title="">PyCarolinas</a>
</li>
<li><a href="https://blog.jetbrains.com/pycharm" title="PyCharm Blog">PyCharm</a>
</li>
<li><a href="http://pycon.blogspot.com/" title="The PyCon blog">PyCon</a>
</li>
<li><a href="" title="">PyCon 2008 on YouTube</a>
</li>
<li><a href="http://2016.pycon-au.org" title="PyCon Australia 2016 News">PyCon Australia</a>
</li>
<li><a href="http://pl.pycon.org/2015/en/rss-aktualnosci" title="PyCon PL 2015">PyCon PL Conference</a>
</li>
<li><a href="" title="">PyCon Podcast</a>
</li>
<li><a href="" title="">PyLadies</a>
</li>
<li><a href="http://morepypy.blogspot.com/" title="PyPy Status Blog">PyPy Development</a>
</li>
<li><a href="https://pytennessee.tumblr.com/" title="PyTennessee 2017">PyTennessee</a>
</li>
<li><a href="https://www.pytexas.org/2015/blog" title="PyTexas Blog">PyTexas</a>
</li>
<li><a href="" title="">Pylons News Feed</a>
</li>
<li><a href="" title="">Pypix</a>
</li>
<li><a href="https://python4kids.brendanscott.com" title="Python Tutorials for Kids 13+">Python 4 Kids</a>
</li>
<li><a href="" title="">Python 411 Podcast</a>
</li>
<li><a href="http://python-advocacy.blogspot.com/" title="About Python Advocacy">Python Advocacy</a>
</li>
<li><a href="http://blog.pythonanywhere.com/" title="PythonAnywhere News">Python Anywhere</a>
</li>
<li><a href="http://pythondata.com" title="Python Data">Python Data</a>
</li>
<li><a href="http://www.pythondiary.com/" title="Python Diary latest blog entries">Python Diary</a>
</li>
<li><a href="http://www.pythondoeswhat.com/" title="Python Does What?!?">Python Does What?!</a>
</li>
<li><a href="https://blogs.msdn.microsoft.com/pythonengineering" title="Python Engineering at Microsoft">Python Engineering at Microsoft</a>
</li>
<li><a href="http://blog.python.org/" title="Python Insider">Python Insider</a>
</li>
<li><a href="" title="">Python News</a>
</li>
<li><a href="" title="">Python Open Mike</a>
</li>
<li><a href="http://www.pyptug.org/" title="PYthon Piedmont Triad User Group">Python Piedmont Triad User Group</a>
</li>
<li><a href="http://pyfound.blogspot.com/" title="Python Software Foundation News">Python Software Foundation</a>
</li>
<li><a href="" title="">Python Sprints</a>
</li>
<li><a href="http://pythonsweetness.tumblr.com/" title="python sweetness">Python Sweetness</a>
</li>
<li><a href="" title="">Python Testing Cookbook</a>
</li>
<li><a href="http://python-groups.blogspot.com/" title="Happenings in Python Usergroups">Python User Groups</a>
</li>
<li><a href="http://pythonforbiologists.com" title="Python – Python for biologists">Python for biologists</a>
</li>
<li><a href="http://python-karan.blogspot.com/" title="Python on Karan">Python on Karan</a>
</li>
<li><a href="http://developerblog.myo.com/" title="Python - The Lab">Python with Myo</a>
</li>
<li><a href="http://pythonxynews.blogspot.com/" title="Python(x,y)">Python(x,y) News</a>
</li>
<li><a href="http://pythonclub.com.br/" title="PythonClub">PythonClub - A Brazilian collaborative blog about Python</a>
</li>
<li><a href="mailto:hoge@example.com" title="">PythonThreads</a>
</li>
<li><a href="http://pythonology.blogspot.com/" title="Pythonology">Pythonology</a>
</li>
<li><a href="http://ptspts.blogspot.com/search/label/planet-python" title="pts.blog">Péter Szabó</a>
</li>
<li><a href="http://blog.zsoldosp.eu" title="Do. Reflect. Learn. Repeat!">Péter Zsoldos</a>
</li>
<li><a href="http://www.bitdance.com/blog" title="Dancing With the Bits">R David Murray</a>
</li>
<li><a href="http://threebean.org/blog" title="[three]Bean">Ralph Bean</a>
</li>
<li><a href="http://www.ralph-heinkel.com/blog" title="Ralph's Blog">Ralph Heinkel</a>
</li>
<li><a href="http://blog.ram.rachum.com/" title="Ram's blog">Ram Rachum</a>
</li>
<li><a href="" title="">Ramana</a>
</li>
<li><a href="http://blog.randell.ph" title="Python – Randell's Blog">Randell Benavidez</a>
</li>
<li><a href="http://randlet.com/blog/rss/" title="Randle Taylor's Blog Feed">Randle Taylor</a>
</li>
<li><a href="http://randyzwitch.com" title="Python – randyzwitch.com">Randy Zwitch</a>
</li>
<li><a href="https://rhettinger.wordpress.com" title="Deep Thoughts by Raymond Hettinger">Raymond Hettinger</a>
</li>
<li><a href="https://rayli.net/blog" title="rayli.net » Planet Python">Raymond Li</a>
</li>
<li><a href="http://reachtim.com/" title="ReachTim">Reach Tim</a>
</li>
<li><a href="https://realpython.com/" title="Real Python">Real Python</a>
</li>
<li><a href="http://reinout.vanrees.org/weblog/" title="Reinout van Rees' weblog">Reinout van Rees</a>
</li>
<li><a href="http://renesd.blogspot.com/search/label/python" title="making apps, making webs.">Rene Dudfield</a>
</li>
<li><a href="http://blog.lerner.co.il" title="Python – Lerner Consulting Blog">Reuven Lerner</a>
</li>
<li><a href="http://rgomes-info.blogspot.com/search/label/python" title="Notes, Experiences and Opinions by Richard Gomes">Richard Gomes</a>
</li>
<li><a href="http://www.mechanicalcat.net/richard/log/Python" title="Richard Jones' Log: Python">Richard Jones</a>
</li>
<li><a href="http://posted-stuff.blogspot.com/search/label/python" title="Stuff What I Posted">Richard Tew</a>
</li>
<li><a href="http://blog.the-moon.net/search/label/python" title="The Moon Research Blog">Richard Wall</a>
</li>
<li><a href="http://blog.cakebread.info/search/label/python" title="Rob Cakebread">Rob Cakebread</a>
</li>
<li><a href="http://www.robg3d.com" title="python – RobG3d">Rob Galanakis</a>
</li>
<li><a href="" title="">Rob Golding</a>
</li>
<li><a href="" title="">Rob Miller</a>
</li>
<li><a href="http://www.aminus.org/blogs/index.php?blog=2" title="The Hand of FuManChu - Categories: Python, Cation, CherryPy, Dejavu, WHELPS, WSGI">Robert Brewer</a>
</li>
<li><a href="https://rbtcollins.wordpress.com" title="Python – Code happens">Robert Collins</a>
</li>
<li><a href="" title="">Robert Lujo</a>
</li>
<li><a href="" title="">Robert Picard</a>
</li>
<li><a href="http://rz.scale-it.pl/" title="Robert Zaremba Scale it blog - python posts">Robert Zaremba</a>
</li>
<li><a href="https://ralsina.me/" title="Lateral Opinion (Posts about python)">Roberto Alsina</a>
</li>
<li><a href="http://wxPython.org/blog" title="wxForty-Two">Robin Dunn</a>
</li>
<li><a href="http://www.theatreofnoise.com/search/label/dev" title="theatre of noise">Robin Parmar</a>
</li>
<li><a href="http://blog.rtwilson.com" title="Python – Robin's Blog">Robin Wilson</a>
</li>
<li><a href="http://www.upfrontsystems.co.za" title="Where I'm calling from">Roche Compaan</a>
</li>
<li><a href="" title="">Rocky Burt</a>
</li>
<li><a href="https://linil.wordpress.com" title="">Rodrigo Araúj</a>
</li>
<li><a href="" title="">Rok Garbas</a>
</li>
<li><a href="http://www.imankulov.name/" title="Roman Imankulov weblog (python)">Roman Imankulov</a>
</li>
<li><a href="https://www.rosehosting.com/blog" title="python – RoseHosting.com Blog">RoseHosting Blog</a>
</li>
<li><a href="https://ruslanspivak.com/" title="Ruslan's Blog">Ruslan Spivak</a>
</li>
<li><a href="http://www.asciiarmor.com/" title="AsciiArmor">Ryan Cox</a>
</li>
<li><a href="" title="">Ryan Tomayko</a>
</li>
<li><a href="http://slott-softwarearchitect.blogspot.com/search/label/python" title="S.Lott-Software Architect">S. Lott</a>
</li>
<li><a href="https://pyhelper.wordpress.com" title="Python Helper">S. R. Krishnan</a>
</li>
<li><a href="http://www.sdjournal.com/archives/categories/languages/python/" title="SDJournal posts in Python category">SDJournal</a>
</li>
<li><a href="http://pythonide.blogspot.com/" title="SPE IDE - Stani's Python Editor">SPE Weblog</a>
</li>
<li><a href="http://blog.stxnext.com/" title="STX Next blog">STX Next</a>
</li>
<li><a href="https://salimfadhley.wordpress.com" title="Salim Fadhley">Salim Fadhley</a>
</li>
<li><a href="http://www.bitshaq.com" title="土城真香菜が伝えるこうかんかい日記">Salman Haq</a>
</li>
<li><a href="" title="">Samuel Sutch</a>
</li>
<li><a href="http://sandrotosi.blogspot.com/search/label/Python" title="Sandro Tosi">Sandro Tosi</a>
</li>
<li><a href="" title="">Sayan Chowdhury</a>
</li>
<li><a href="" title="">Scripting the web with Python</a>
</li>
<li><a href="http://seanmcgrath.blogspot.com/search/label/python" title="Sean McGrath">Sean McGrath</a>
</li>
<li><a href="" title="">Sean Reifschneider</a>
</li>
<li><a href="http://www.chesnok.com/daily" title="python – selena deckelmann">Selena Deckelmann</a>
</li>
<li><a href="https://semaphoreci.com/community/tutorials" title="Semaphore CI Community Tutorials on Python">Semaphore Community</a>
</li>
<li><a href="http://www.xtoinfinity.com/" title="Senthil Kumaran's thoughts. (Posts about python)">Senthil Kumaran</a>
</li>
<li><a href="https://blog.serverdensity.com" title="Python – Server Density Blog">Server Density</a>
</li>
<li><a href="http://www.jjinux.com/search/label/python" title="JJinuxLand">Shannon -jj Behrens</a>
</li>
<li><a href="http://shiningpanda.com/" title="ShiningPanda">ShiningPanda</a>
</li>
<li><a href="" title="">Shriphani Palakodety</a>
</li>
<li><a href="http://simeonfranklin.com/blog/" title="simeonfranklin.com python feed">Simeon Franklin</a>
</li>
<li><a href="http://simeonvisser.com/" title="Simeon Visser (python)">Simeon Visser</a>
</li>
<li><a href="" title="aboutsimon.com">Simon</a>
</li>
<li><a href="http://www.brunningonline.net/simon/blog/" title="Small Values of Cool">Simon Brunning</a>
</li>
<li><a href="" title="">Simon Willison</a>
</li>
<li><a href="http://entitycrisis.blogspot.com/search/label/Python" title="Entity Crisis">Simon Wittber</a>
</li>
<li><a href="https://simpleisbetterthancomplex.com/" title="Simple is Better Than Complex">Simple is Better Than Complex</a>
</li>
<li><a href="http://www.softformance.com" title="python | SOFTFORMANCE">SoftFormance</a>
</li>
<li><a href="http://spikeekips.tumblr.com/" title="나는겁쟁이">Spike ekipS</a>
</li>
<li><a href="http://spyder-ide.blogspot.com/" title="spyder">Spyder IDE</a>
</li>
<li><a href="http://www.j5int.com" title="j5 International">St James Software Development</a>
</li>
<li><a href="http://stackabuse.com/" title="python - Stack Abuse">Stack Abuse</a>
</li>
<li><a href="http://stacks.11craft.com/" title="Stacks">Stacks</a>
</li>
<li><a href="https://www.starzel.de/blog/starzel-de-python-blog" title="Starzel.de Python Blog">Starzel.de</a>
</li>
<li><a href="http://blog.behnel.de/" title="Stefans Welt (Planet Python)">Stefan Behnel</a>
</li>
<li><a href="http://blog.garage-coding.com/" title="Feed tagged PYTHON">Stefan Petrea</a>
</li>
<li><a href="https://stefan.sofa-rockers.org/" title="Stefan Scherfke">Stefan Scherfke</a>
</li>
<li><a href="https://jodal.no/" title="Stein Magnus Jodal">Stein Magnus Jodal</a>
</li>
<li><a href="https://pythonconquerstheuniverse.wordpress.com" title="Python Conquers The Universe">Stephen Ferg</a>
</li>
<li><a href="http://stevedower.id.au/blog" title="Python – Steve Dower">Steve Dower</a>
</li>
<li><a href="http://holdenweb.blogspot.com/search/label/python" title="For Some Value of &quot;Magic&quot;">Steve Holden</a>
</li>
<li><a href="http://rh0dium.blogspot.com/search/label/python" title="My Life">Steven Klass</a>
</li>
<li><a href="http://blog.lost-theory.org/" title="lost theorem » python">Steven Kryskalla</a>
</li>
<li><a href="" title="">Steven Wilcox</a>
</li>
<li><a href="" title="">Stijn Debrouwere</a>
</li>
<li><a href="https://storiesinmypocket.com/articles/" title="Stories in My Pocket about Python">Stories in My Pocket</a>
</li>
<li><a href="http://www.turingfinance.com" title="Python – Turing Finance">Stuart Gordon Reid</a>
</li>
<li><a href="https://wirtel.be/tags/python/index.xml" title="Python on Stephane Wirtel">Stéphane Wirtel</a>
</li>
<li><a href="http://sumith1896.github.io//" title="Sumith">Sumith</a>
</li>
<li><a href="https://www.swaroopch.com/" title="Swaroop C H">Swaroop C H</a>
</li>
<li><a href="" title="">SwiftStack</a>
</li>
<li><a href="http://ict.swisscom.ch" title="Swisscom ICT » Python">Swisscom ICT</a>
</li>
<li><a href="http://www.defuze.org" title="python – defuze.org">Sylvain Hellegouarch</a>
</li>
<li><a href="https://talkpython.fm/" title="Talk Python To Me - Python conversations for passionate developers">Talk Python to Me</a>
</li>
<li><a href="https://ziade.org/" title="Fetchez le Python">Tarek Ziade</a>
</li>
<li><a href="http://blog.tedmiston.com/" title="Python - Taylor D. Edmiston">Taylor Edmiston</a>
</li>
<li><a href="" title="">Teach Me Python</a>
</li>
<li><a href="http://www.sauria.com/blog" title="Ted Leung on the Air » python">Ted Leung</a>
</li>
<li><a href="" title="">Ted Nyman</a>
</li>
<li><a href="" title="">Teemu Harju</a>
</li>
<li><a href="http://myownhat.blogspot.com/search/label/python" title="My Own Hat">Tennessee Leeuwenburg</a>
</li>
<li><a href="http://terriko.dreamwidth.org/" title="terriko">Terri Oda</a>
</li>
<li><a href="http://blogs.fluidinfo.com/terry" title="python – Terry Jones">Terry Jones</a>
</li>
<li><a href="http://www.swordstyle.com/blog2" title="Can You Defeat My Swordstyle? » Python">Terry Peppers</a>
</li>
<li><a href="http://blog.aicookbook.com" title="Python – The Artificial Intelligence Cookbook">The Artificial Intelligence Cookbook</a>
</li>
<li><a href="https://changelog.com" title="Python – Changelog">The Changelog</a>
</li>
<li><a href="http://www.thedatascientist.de" title="The Data Scientist » python">The Data Scientist</a>
</li>
<li><a href="http://blog.thedigitalcatonline.com/" title="The Digital Cat">The Digital Cat</a>
</li>
<li><a href="http://blog.dowski.com/" title="The Occasional Occurence">The Occasional Occurrence</a>
</li>
<li><a href="http://blog.parcon.opengroove.org/" title="The Parcon Blog">The Parcon Blog</a>
</li>
<li><a href="http://pythonpapers.blogspot.com/" title="The Python Papers">The Python Papers</a>
</li>
<li><a href="http://avelino.xxx/python-en/" title="Thiago Avelino">Thiago Avelino</a>
</li>
<li><a href="http://www.tibonihoo.net/blog/en" title="python – tlog">Thibauld Nion</a>
</li>
<li><a href="http://ballingt.com" title="ballingt - Python">Thomas Ballinger's Blog</a>
</li>
<li><a href="http://wordaligned.org" title="Word Aligned">Thomas Guest</a>
</li>
<li><a href="http://thomas.apestaart.org/log" title="Python – thomas.apestaart.org">Thomas Vander Stichele</a>
</li>
<li><a href="http://www.tech-foo.net/" title="Tech Foo">Thomi Richards</a>
</li>
<li><a href="https://timgilbert.wordpress.com" title="Python – Tim Gilbert's Blog">Tim Gilbert</a>
</li>
<li><a href="http://ramblings.timgolden.me.uk" title="Moderate Realism » Python">Tim Golden</a>
</li>
<li><a href="http://kokorice.org/" title="Fresh from the plantation">Tim Knapp</a>
</li>
<li><a href="http://www.timlesher.com/search/label/python" title="Aftermarket Pipes">Tim Lesher</a>
</li>
<li><a href="" title="">Tim Parkin</a>
</li>
<li><a href="http://shisaa.jp/" title="shisaa.jp (python)">Tim van der Linden</a>
</li>
<li><a href="" title="">Titus Brown</a>
</li>
<li><a href="http://journal.thobe.org/" title="Wardrobe strength">Tobias Ivarsson</a>
</li>
<li><a href="https://thewebhaswon.wordpress.com" title="python – The Rising Tide">Tom Christie</a>
</li>
<li><a href="http://sys-exit.blogspot.com/search/label/python" title="import sys / sys.exit()">Tomasz Ducin</a>
</li>
<li><a href="http://pragmaticpython.com" title="python – Pragmatic Python">Tomasz Früboes</a>
</li>
<li><a href="" title="">Tomaž Muraus</a>
</li>
<li><a href="http://tomerfiliba.com/blog" title="tomerfiliba.com | Python Blog">Tomer Filiba</a>
</li>
<li><a href="https://tonybreyal.wordpress.com" title="Python – Consistently Infrequent">Tony Breyal</a>
</li>
<li><a href="http://better-inter.net/tag/python/" title="Making the internet a better place - python">Torsten Engelbrecht</a>
</li>
<li><a href="https://anonbadger.wordpress.com" title="Python – The Ramblings">Toshio Kuratomi</a>
</li>
<li><a href="http://technicaldiscovery.blogspot.com/search/label/python" title="Technical Discovery">Travis Oliphant</a>
</li>
<li><a href="http://treyhunner.com/" title="Trey Hunner - Python">Trey Hunner</a>
</li>
<li><a href="" title="">Troy Melhase</a>
</li>
<li><a href="http://www.tryton.org/" title="Tryton">Tryton News</a>
</li>
<li><a href="https://www.turnkeylinux.org/taxonomy/term/103/0" title="python">Turnkey Linux</a>
</li>
<li><a href="http://labs.twistedmatrix.com/" title="Twisted Matrix Laboratories">Twisted Matrix Labs</a>
</li>
<li><a href="" title="">Uche Ogbuji</a>
</li>
<li><a href="" title="">United Coders</a>
</li>
<li><a href="http://vsbabu.org/mt/" title="vsbabu.org">V.S. Babu</a>
</li>
<li><a href="https://prayogshala.wordpress.com" title="Python – PrayogShala">Varun Nischal</a>
</li>
<li><a href="http://jugad2.blogspot.com/search/label/python" title="jugad2 - Vasudev Ram on software innovation">Vasudev Ram</a>
</li>
<li><a href="http://pymolurus.blogspot.com/" title="Python molurus (the Indian Python)">Vinay Sajip</a>
</li>
<li><a href="http://plumberjack.blogspot.com/" title="Plumber Jack">Vinay Sajip (Logging)</a>
</li>
<li><a href="http://www.hardcoded.net/articles/" title="Hardcoded Software articles (python)">Virgil Dupras</a>
</li>
<li><a href="" title="">Viva La Chipperfish</a>
</li>
<li><a href="https://nvbn.github.io" title="nvbn blog - python">Vladimir Iakolev</a>
</li>
<li><a href="http://vperic.blogspot.com/search/label/Twisted" title="Vlada's technical blog">Vladimir Perić</a>
</li>
<li><a href="http://www.wallix.com" title="Wallix">Wallix</a>
</li>
<li><a href="" title="">Washington Times OpenSource</a>
</li>
<li><a href="http://pieceofpy.com" title="Piece Of Py(thon)">Wayne Witzel</a>
</li>
<li><a href="http://www.weeklypython.chat/" title="Weekly Python Chat">Weekly Python Chat</a>
</li>
<li><a href="http://python-weekly.blogspot.com/" title="# python weekly reports">Weekly Python StackOverflow Report</a>
</li>
<li><a href="https://1stvamp.org/tag/python" title="1stvamp.org">Wes Mason</a>
</li>
<li><a href="http://wescpy.blogspot.com/search/label/python" title="Core Python Programming">Wesley Chun</a>
</li>
<li><a href="http://www.wiggy.net" title="Wichert Akkerman">Wichert Akkerman</a>
</li>
<li><a href="http://bluesock.org/~willkg/blog/" title="Will's blog (Posts about python)">Will Kahn-Greene</a>
</li>
<li><a href="https://www.willmcgugan.com/blog/tech/" title="Tech">Will McGugan</a>
</li>
<li><a href="http://willpython.blogspot.com/" title="Will's Python Notebook">Will Pierce</a>
</li>
<li><a href="http://blog.minchin.ca/" title="Minchin.ca - python">William Minchin</a>
</li>
<li><a href="http://foolish-assertions.blogspot.com/search/label/python" title="Foolish Assertions">William Reade</a>
</li>
<li><a href="http://hoardedhomelyhints.dietbuddha.com/search/label/python" title="Hoarded Homely Hints">William Thompson</a>
</li>
<li><a href="http://wingware.com/" title="Wingware Blog">Wingware Blog</a>
</li>
<li><a href="http://wingware.com/" title="Wingware News">Wingware News</a>
</li>
<li><a href="" title="">Wolfram Kriesing</a>
</li>
<li><a href="https://wraithan.net" title="python – wraithan's blog">Wraithan</a>
</li>
<li><a href="http://wyattbaldwin.com" title="planet python – Wyatt Baldwin">Wyatt Baldwin</a>
</li>
<li><a href="" title="">Xavier Spriet</a>
</li>
<li><a href="" title="">Yaco</a>
</li>
<li><a href="https://tech.blog.aknin.name" title="python – NIL: .to write(1) ~ help:about">Yaniv Aknin</a>
</li>
<li><a href="http://www.ylarrivee.com" title="Yann Larrivée » python">Yann Larrivée</a>
</li>
<li><a href="" title="">Yannick Gingras</a>
</li>
<li><a href="https://pythontips.com" title="Python Tips">Yasoob Khalid</a>
</li>
<li><a href="https://yoongkang.com/" title="Yoong Kang Lim">Yoong Kang Lim</a>
</li>
<li><a href="https://uberpython.wordpress.com" title="python – Ubershmekel's Uberpython Pythonlog">Yuval Greenfield</a>
</li>
<li><a href="" title="">Zachary Voase</a>
</li>
<li><a href="http://za.github.io/" title="Aurora Borealis">Zaki Akhmad</a>
</li>
<li><a href="https://zato.io/blog" title="Zato Blog">Zato Blog</a>
</li>
<li><a href="https://medium.com/@ZeroDB_?source=rss-a0aa5238b2d8------2" title="Stories by ZeroDB on Medium">ZeroDB</a>
</li>
<li><a href="" title="">Zeth</a>
</li>
<li><a href="http://blog.bottlepy.org/" title="bottlepy-dev">bottlepy-dev</a>
</li>
<li><a href="" title="codeboje.de - coding and stuff by Tag python">codeboje</a>
</li>
<li><a href="http://www.egenix.com/company/news" title="eGenix.com News &amp;amp; Events">eGenix.com</a>
</li>
<li><a href="http://hypothesis.works/articles/python/" title="Hypothesis articles tagged &quot;python&quot;">hypothesis.works articles</a>
</li>
<li><a href="http://scummos.blogspot.com/search/label/kdev-python" title="Linux, Games, Programming, and some other random stuff">kdev-python</a>
</li>
<li><a href="http://nl-project.blogspot.com/search/label/python" title="nl-project">nl-project</a>
</li>
<li><a href="http://pgcli.com/" title="pgcli">pgcli</a>
</li>
<li><a href="http://pythonwise.blogspot.com/search/label/python" title="PythonWise">pythonwise</a>
</li>
<li><a href="https://blog.qutebrowser.org/" title="qutebrowser development blog">qutebrowser development blog</a>
</li>
<li><a href="https://medium.com/@tryexceptpass?source=rss-138c0eb26be5------2" title="Stories by Cristian Medina on Medium">tryexceptpass</a>
</li>
<li><a href="" title="">wiredobjects</a>
</li>
<li><a href="http://zombofant.net/blog/tags/python" title="Posts with tag “python”">zombofant.net</a>
</li>
<li><a href="https://wokslog.wordpress.com" title="python – Merwok’s System Log">Éric Araujo</a>
</li>
<li><a href="http://lukasz.langa.pl/" title="lukasz.langa.pl: Recent entries tagged as python">Łukasz Langa</a>
</li>
<li><a href="http://pyarab.com" title="بايثون العربي">بايثون العربي</a>
</li>

<li>
    <i>
    To request addition or removal:<br />
    Open an issue on <a href="https://github.com/python/planet/issues">github</a><br />
    or e-mail planet at python.org<br />
    (note, responses can take up to a few days) 
    </i>
</li>
          </ul></li>
      </ul>
    </div>
  </div>
</body>
</html>